<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Web Site</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2019-09-15T00:00:00-07:00</updated><entry><title>What is Software Quality?</title><link href="https://jackdewinter.github.io/2019/09/15/what-is-software-quality/" rel="alternate"></link><published>2019-09-15T00:00:00-07:00</published><updated>2019-09-15T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-09-15:/2019/09/15/what-is-software-quality/</id><summary type="html">
&lt;p&gt;When introducing myself to someone professionally, I usually start with the normal
“Hi, my name is …” that is boiler-plated on nametags the world over.  Getting past that
initial point, if the person is so inclined, they ask that always fun lead off question “So,
what do you?”  For me, I …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;When introducing myself to someone professionally, I usually start with the normal
“Hi, my name is …” that is boiler-plated on nametags the world over.  Getting past that
initial point, if the person is so inclined, they ask that always fun lead off question “So,
what do you?”  For me, I always respond with “I am an SDET”&lt;sup id="fnref:SDET"&gt;&lt;a class="footnote-ref" href="#fn:SDET"&gt;1&lt;/a&gt;&lt;/sup&gt;, to which anyone not in the
software industry replies back with “Um.... What is that?”&lt;/p&gt;
&lt;p&gt;Spewing out “It means I am a Software Development Engineer in Test.”, I wait for the response
that most people use: “Oh, so you are a tester.”  Often with gritted teeth, I try and explain
that testing is only a small part of what I do.  If I think they are still listening, I
given them my quick elevator pitch that emphasizes that I focus on helping to produce good
quality software by helping to increase the quality of the teams, the projects, and the
processes that I am tasked to assist with.&lt;/p&gt;
&lt;p&gt;Approximately 60-70% the time I win people over
with the elevator pitch, and a pleasant conversation continues.  The next 20-30% of the time,
usually with people not in the software field, I get blank stares and they fixate on the
“test” in the title rather than the “quality” in my description.  The remaining people are
usually Software Development Engineers or SDEs&lt;sup id="fnref:SDE"&gt;&lt;a class="footnote-ref" href="#fn:SDE"&gt;2&lt;/a&gt;&lt;/sup&gt; that for one reason or another, start to
tune out.&lt;/p&gt;
&lt;p&gt;For the percentage of people that I win over, they seem to understand that I focus on quality,
but the follow up question is almost always: “What does quality software mean to you?”&lt;/p&gt;
&lt;h2 id="where-do-we-start"&gt;Where do we start?&lt;a class="headerlink" href="#where-do-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me, I almost always start at the beginning with requirements.  Whether they are
spoken or written down, each project has a set of requirements.  It could be the requirements
are to “explore my ability to use X” or “fix the X in the Y project” or “create a project
that can help me X”, but every project has requirements.&lt;/p&gt;
&lt;p&gt;In the software development industry, requirements are often presented
to teams that are hard to deal with or are left to the developers to write themselves.  This
practice is so prolific that Scott Adam’s Dilbert site has pages and pages of instance where
&lt;a href="https://dilbert.com/search_results?terms=User%20Requirements"&gt;requirements are talked about&lt;/a&gt;.
One example is when a manager talks to their team and
informs them that some process needs to be faster by 5%.  Do they have enough information from
that manager to understand the context of the requirement?  Do they expect that increase by a
specific time to meet their own goals?  What does that requirement look like?  How do they
know when they have achieved it?  Is it achievable?  If it is achievable, how do they measure
progress towards that goal?  These are some of the core questions that I believe need
answering.&lt;/p&gt;
&lt;p&gt;As those questions are at the front of my mind, when someone asks me how I define software quality, the first thing I immediately think back to is a course that I once took on setting
&lt;a href="https://en.wikipedia.org/wiki/SMART_criteria"&gt;S.M.A.R.T. requirements&lt;/a&gt;.
In that class, the main focus was on taking unrefined requirements and curating them to a
point where they could be more readily be acted upon.  The instructor made a very good
argument that each requirement must be Specific, Measurable, Assignable, Realistic, and
Time-Related.&lt;/p&gt;
&lt;p&gt;When it comes to software quality, I believe those same questions needs to be asked with
regards to any of the requirements teams put on their software.  But to ask those questions
properly, we need to have some context in which to ask those questions.  To establish that
context, it is helpful to have some guidelines to provide a framework for the requirements.&lt;/p&gt;
&lt;h2 id="establishing-some-guidelines-the-four-pillars"&gt;Establishing Some Guidelines: The Four Pillars&lt;a class="headerlink" href="#establishing-some-guidelines-the-four-pillars" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good general article for anyone interested in software quality is the
&lt;a href="https://en.wikipedia.org/wiki/Software_quality#Measurement"&gt;Wikipedia article on Software Quality&lt;/a&gt;.
In fact, when asked by people where to get started in the software quality area, I often refer
them to this article solely because of the excellent diagram in the Measurements section on the
right side of the page.&lt;sup id="fnref:Pillars"&gt;&lt;a class="footnote-ref" href="#fn:Pillars"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The diagram in the Measurements section correlates very closely to what I believe are the four
pillars of software quality: Reliability, Maintainability, Efficiency, and Security.  The
diagram then shows how their pillars relate to other attributes: Application Architecture
Standards, Coding Practices, Complexity, Documentation, Portability, and Technical/Functional
Volumes.  From there, it provides more lists of how to break things down, with many references
to other articles.  In short, it is a great place to start from.&lt;/p&gt;
&lt;h2 id="measuring-software-quality"&gt;Measuring Software Quality&lt;a class="headerlink" href="#measuring-software-quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before proceeding to talk about the pillars themselves, I feel strongly that we need to
discuss the categories that I use for measuring the metrics talked about in the Wikipedia
article.  My intention is that by talking about the metrics before discussing each of the
pillars, you can start building a mental model of how to apply them to your projects as you
are reading about them.  From my point of view, making that mental transition from something
abstract that you read about to something concrete that applies to your work is
essential to serious forward momentum on software quality.&lt;/p&gt;
&lt;p&gt;These metrics typically fall into two categories: seldom violated metrics and positive
momentum metrics.&lt;/p&gt;
&lt;p&gt;The seldom violated metrics category contains rules that define rules that are pivotal to the
quality of your project.  Each rule are a combination of a given metric and a maximum
or minimum weighed against that metric.  As a guideline, teams should only ignore
these rules on a case by case basis after providing a reason that is good, defensible, and
documented.
Examples of such metrics are Service Level Agreements (SLAs), Static Code Analysis
(SCA) results, and Test Failure Rates.  Examples of rules are “the TP99 for the X
API is Y millisecond” or “all PMD warnings (Java SCA tool) must be following with
a minimal of suppressions”.&lt;/p&gt;
&lt;p&gt;Furthermore, to make these rules useful and to keep your
team honest, your team needs to publish the selected metrics, with a description of what the
metrics are, how your team measures those metrics, and why your team is measuring them.&lt;/p&gt;
&lt;p&gt;The positive momentum metrics category is usually reserved for metrics that are being
introduced to an already existing project.  When introducing software quality metrics into an
already existing project, it is not realistic to expect those metrics to be adhered to in an
instant.  It is more realistic to expect positive momentum towards the goal
until the point when your team achieves it, at which point is moves to the desired seldom
violated metrics category.  As such, a measure of the momentum of these metrics is used, and is
hopefully in a positive direction. Similar to the previous category, your team should publish
information about the selected metrics, with the added information on when your team feels
they will translate it from the positive momentum category to the seldom violated category.&lt;/p&gt;
&lt;p&gt;Being consistent on these chosen metrics is very important.  While dropping a metric looks
better on any reporting in the short term, it usually negatively impacts the software quality,
perhaps in a way that is not obvious until later. Adding a new metric will show lower the
measured quality in the short term, but increases the measured quality in the long
term.  Your team can negate the short term impact by paying the immediate cost of making the
new metric a seldom violated metric, but that has to be weighed against the other priorities
for your project.  As with everything, it is a balancing act that needs to be negotiated with
your team.&lt;/p&gt;
&lt;h2 id="exploring-the-four-pillars"&gt;Exploring The Four Pillars&lt;a class="headerlink" href="#exploring-the-four-pillars" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having established that S.M.A.R.T. requirements and the two categories for metrics
from the previous sections are useful in measuring software quality, the focus of the article
can return to the guidelines: the four pillars.  Each one of these pillars will look at
your software project from a different angle, with the goal of providing a set of data points
to formulate a coherent measurement of software quality for that project.&lt;/p&gt;
&lt;p&gt;In the following sections, I strive to describe each of the four pillars, providing a jumping
off point to another article that describes that pillar in a more comprehensive manner.  I
firmly believe that by providing metrics for each pillar that are specific to your project,
with each of those metrics properly categorized into the two measurement categories documented
above, that your team will take a decent step forward in clearly defining software quality for
your project.&lt;/p&gt;
&lt;h3 id="reliability"&gt;Reliability&lt;a class="headerlink" href="#reliability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The essence of this pillar can be broken down into two questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does the software do the task that it is supposed to do?&lt;/li&gt;
&lt;li&gt;Does the software execute that task in a consistent manner?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reliability is one of the areas in which “pure” testing shines.  A lot of the tests that
SDEs, SDETs, and testers are asked to write specifically verify if a given object does
what it is supposed to do.  Unit tests determine whether an individual software unit, such as
a class, performs they way it is supposed to.  Functional tests or integration tests take that
a step higher, determining whether a group of related software units do what they are supposed
to do.  Another step higher are the scenario tests, which determine whether the software
project, as a whole, responds properly to various use cases or scenarios that are considered
critical to its operation.  Finally, end-to-end tests or acceptance tests determine whether or
not a group of projects respond properly from an end user’s perspective.&lt;/p&gt;
&lt;p&gt;This pattern is so widely used, any search for
&lt;a href="https://www.bing.com/images/search?q=test+pyramid"&gt;test pyramid&lt;/a&gt;,
will find many variations of the same theme. Different articles on the subject will stress
different points about the pyramid, but they will all generally look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="test pyramid" src="https://jackdewinter.github.io/images/quality-1/test-pyramid.png"/&gt;&lt;/p&gt;
&lt;p&gt;This pyramid, or other similar pyramids, are interpreted by authors to indicate a specific
things about the tests, to highlight the position of their article.  Some of these
interpretations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An article on test volume will typically stress that ~70-80% of the tests should be at the unit test level, ~10-15% at the functional test level, ~5-10% at the scenario level, and ~1-3% at the end-to-end level.&lt;/li&gt;
&lt;li&gt;An article on test frequency will typically stress that tests near the bottom of the pyramid should complete within 60 seconds and be executed every time the source code is checked in.  Tests near the top of the pyramid may take minutes or hours and should be executed once a week.&lt;/li&gt;
&lt;li&gt;An article on test fragility will typically stress that tests near the bottom of the pyramid are closer to their components, the expectation is that they will not fail.  Tests near the top of the pyramid require more orchestration between projects and teams, and therefore, are more likely to failure do to environmental or other reasons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While all of these interpretations have merit, the critical point for me is the issue of
boiling down that information to a small number of bite sized observations that can be easily
measured and communicated. In the upcoming article &lt;code&gt;Software Quality: Reliability&lt;/code&gt;, I will
delve more into breaking the Reliability pillar into S.M.A.R.T. requirements and I provide
suggestions on how it can be measured.&lt;/p&gt;
&lt;h3 id="maintainability"&gt;Maintainability&lt;a class="headerlink" href="#maintainability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The essence of this pillar can be broken down into one question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are asked to change the software to fix a bug or introduce a new feature, how easy is it to change the software, how many surprises do you expect to encounter, and how confident will you be about the change afterwards?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best, and most comedic, form of asking this question is captured by this cartoon
from &lt;a href="https://www.osnews.com/"&gt;OSNews&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="WTFs per minute" src="https://mk0osnewswb2dmu4h0a.kinstacdn.com/images/comics/wtfm.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Maintainability is a single pillar that encompasses the most diverse types of processes and
measurements of any of the pillars.  The reason for this is that maintainability is often a
word that is used without a lot of provided context.  For me, a good way to think about
maintainability is that it is the cleanliness of your project.  Different people will have
different experiences, and after asking different people about how “clean” the project is,
the collected answers will almost certainly by different.&lt;/p&gt;
&lt;p&gt;Try this in your office with your colleagues.  Point to a given area of your office and ask
2-5 people how clean a given area, such as your desk is.  Instead of accepting a single
answer, dig in a bit as to why they answered the way they did.  Most likely, you will
get as many distinct answers as people that you talk to.  This exercise illustrates how
hard it is to give a good answer to how maintainable software a given piece of software is.&lt;/p&gt;
&lt;p&gt;The best way to provide metrics for maintainability is usually with various Static Code
Analysis tools.  Almost every mature language has at least one tool to do this, and each tool
usually measures a fair number of metrics.  These metrics will use established (and sometimes
experimental) industry practices to look at the source code of your project and determine
if there are issues that can be addressed.  In addition to those metrics, those same tools
often look for “problematic” and “sloppy” code.  Problematic code is usually some manner of
pattern that a fair number of experts have agreed is a bad thing, such as appending to a
string within a loop.  Sloppy code is usually things like having a variable or a parameter
that is not being used, or a forgotten comment on a public method.&lt;/p&gt;
&lt;p&gt;In addition to Static Code Analysis, teams must continue to strive to have a good set of
documentation on what the project is doing, and regularly maintain that documentation.  While
the “correctness” of the documentation is harder to measure than source code, it is pivotal
for a project. How much of the information on the various projects that your team supports
is in the head of one or two individuals?  What is going to happen if they leave the team
or leave the company.&lt;/p&gt;
&lt;p&gt;Your team should not need volumes of information on every decision that was made, but as a
team, it is imperative to document the major decisions that affect the flow of the project.
It is also a good idea to have solid documentation on building, deploying, and executing
the project. Imagine yourself as a new team member looking at the software project and any
documentation, and honestly ask yourself “How much would I want to run away from that project?”
If the honest answer from each member of the team is something similar to “I’m good”, you
probably have a decent level of documentation.&lt;/p&gt;
&lt;h4 id="a-note-on-static-code-analysis"&gt;A Note On Static Code Analysis&lt;a class="headerlink" href="#a-note-on-static-code-analysis" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Before delving deeper into maintainability, I want to take a minute to talk about Static Code
Analysis.
Typically, Static Code Analysis is used as a gatekeeper for maintainability, and as such,
any suggestions should be strictly followed.  However, Static Code Analysis tends to be an
outlier to the gatekeeper rule in that the metrics need to be “bent” every so often. This
“bending” is accomplished using some form of suppression specified by the Analyzer itself.&lt;/p&gt;
&lt;p&gt;Static Code Analyzers tend to fall into two main categories: style and correctness.&lt;/p&gt;
&lt;p&gt;Any warnings that are generated by a style analyzer should be addressed without fail.
In terms of stylistics, there are very few times where deviating from a common style are
beneficial, and as such should be avoided.  As stylistics can vary from person to
person when writing code, it is useful to supplement the style analyzer with an IDE
plugin that will reformat the source code to meet the team’s stylistics, with the Static
Code Analyzer acting as a backstop in case the IDE formatting fails.&lt;/p&gt;
&lt;p&gt;Warnings generated by correctness analyzers are more likely to require bending.  Most
correctness analyzers are based on rules that are normally correct, but do have exceptions.
As such, your team should deal with these exception by having a follow up rule on when
it is acceptable to suppress the exceptions, and specifically on a case-by-case basis.
It is also acceptable to suppress the exception after generating a future requirement to
address the exception, if your team is diligent on following up with these requests.&lt;/p&gt;
&lt;p&gt;In both cases, it is important to remember that SCAs are used to help your team
keep the project’s maintainability at a healthy level.&lt;/p&gt;
&lt;h4 id="back-to-maintainability"&gt;Back to Maintainability&lt;a class="headerlink" href="#back-to-maintainability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the upcoming article &lt;code&gt;Software Quality: Maintainability&lt;/code&gt;, I will delve more into breaking
the Maintainability pillar into S.M.A.R.T. requirements and I provide suggestions on how it can
be measured.  I will do this by presenting the 4-5 metrics that I consider to be useful as
well as both patterns and anti-patterns to avoid. [ED: Need to rephrase that last sentence.]&lt;/p&gt;
&lt;h3 id="efficiency"&gt;Efficiency&lt;a class="headerlink" href="#efficiency" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The essence of this pillar can be broken down into one question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does the software execute that task in a timely manner?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similar to my analogy of maintainability being the cleanliness of your software, efficiency
is whether or not your software is executing “fast enough”.  Coming up with an answer to a
question on whether or not something is “fast enough” is usually pretty easy.  But when
you ask for a definition of what “fast enough” means, that is when people start to have issues
coming up with a solid answer.  In my experience, a large part of the reason for that
vagueness is usually not having a good set of requirements.&lt;/p&gt;
&lt;p&gt;As an example, let’s figure out what “fast enough” means for two different video games that
my family plays: Civilization and Rocket League.&lt;/p&gt;
&lt;p&gt;For the game Civilization (in multiplayer mode), the big delays in the game are the human
interactions and decisions required before a player ends their turn.  It is
also very important that all of the information get conveyed between turns so that the
multiplayer server can accurately record actions in a fair and just manner.  For this game,
“fast enough” for the software is largely dwarfed by the delays that the players introduce.
However, if we have a game with 12 players, 2 of them human and the other 10 using the game’s
AI players, then we can start to formulate what “fast enough” is for the AI players.  It
really depends on the context.&lt;/p&gt;
&lt;p&gt;Rocket League is a different story.
&lt;a href="https://en.wikipedia.org/wiki/Rocket_League"&gt;Rocket League&lt;/a&gt;
is a sequel to the game “Supersonic Acrobatic Rocket-Powered Battle-Cars” released in 2008.
In this game, you play a game of arena soccer using rocket powered cars, each match consisting
of a series of games between teams of 1-3 players.  Unless there is a LAN tournament between
professional teams, it is very rare for more than one player to be in the immediate vicinity
of their teammates, and often players are from different states/provinces and even countries.
For the client software on the player’s computers, “fast enough” is measured by latency and
packet loss.  With each player’s action being relayed to the server and then back out to the
other players, any packet loss or increase in latency will impact the server’s reaction to
various inputs from the player’s controllers.  For this type of game, “fast enough” depends
on a good network connection and a server that is able to process many actions per second.&lt;/p&gt;
&lt;p&gt;As you can see from the video game example, efficiency greatly depends on what the requirements
of the software are.  In the upcoming article &lt;code&gt;Software Quality: Efficiency&lt;/code&gt;, I will delve
more into breaking the Efficiency pillar into S.M.A.R.T. requirements and I provide
suggestions on how it can be measured.&lt;/p&gt;
&lt;h3 id="security"&gt;Security&lt;a class="headerlink" href="#security" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The essence of this pillar can be broken down into one question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How easy is it for a third party to perform malicious actions with your software?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is one dramatic question.  “Perform malicious actions.”  Wow!  I have read all sorts
of articles on various news sites about those, but surely they cannot affect my software?
That is usually one of the first reactions of a lot of software developers.  Just 10
minutes with a security researcher can open your eyes to what is possible.&lt;/p&gt;
&lt;p&gt;To understand this better, pretend that your software project is on a slide, being viewed
through a microscope.  If you look at the slide without the microscope, you just see your
software on the slide, pretty much the same as any other slide.  However, if you increase your
magnification by one order of magnitude, you see that your project includes your source code
and components developed by other people.  You may be following proper security practices, but
did they?&lt;/p&gt;
&lt;p&gt;Another order of magnitude down, and you are looking at the low level instructions for your
project and any included components.  Once the component was assembled, could a third party
have added some malicious code to that component, executing normally until they activate it?
Was that malicious code in their from the beginning?  Or maybe it is a vulnerability at the
source code, machine code, or machine levels?  Someone can make a small change to a component
to utilize that vulnerability with little effort if they know what they are doing.&lt;/p&gt;
&lt;p&gt;Reversing our direction, if we expand outwards instead of inwards, we have containerization.
Containerization solutions, such as &lt;a href="https://www.docker.com/resources/what-container"&gt;Docker&lt;/a&gt;,
provides a complete computing environment to execute your software within.  Popular with back
end development, you encapsulate your software with it’s intended operating system platform,
reducing the number of platform’s you need to design your software for to 1.  But with
containerization, we also have to ask the same questions of the platform as we did with the
software.  How secure is the operating system that the container uses as it’s base?&lt;/p&gt;
&lt;p&gt;In today’s world of software development, where componentization is key, the software you
write is not the only place where security issues can be introduced.  However, there are
proactive steps you can take to reduce the vectors than users can
follow to use your software maliciously.
In the upcoming article &lt;code&gt;Software Quality: Security&lt;/code&gt;, I will delve more into breaking
the Security pillar into S.M.A.R.T. requirements and I provide suggestions on how they it
be measured.&lt;/p&gt;
&lt;h2 id="back-to-requirements"&gt;Back To Requirements&lt;a class="headerlink" href="#back-to-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having explored the 4 pillars, it is important to bring the discussion back to the definition
of good requirements.  Using the information from each of the individual pillar articles in
concert with the information on S.M.A.R.T. terminology, your team can request requirements
that are more focused.  As any focused requirements will be Specific (the S. in S.M.A.R.T.),
it is reasonable to expect that any impact on our 4 pillars will be noted.  Asking for this
change will almost guarantee some negotiations with the team’s stakeholders.&lt;/p&gt;
&lt;p&gt;In my experience, when your team asks for more focused goals from your stakeholders, there
will typically be some pushback from those stakeholders at the beginning.  If your team
has had some requirements mishaps in the past, highlight each mishap and how the ensuing
loss of time and focus could have been avoided usually sways stakeholders.  Don’t point
fingers, but simply point out something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, when we did the X requirement, we all had a different idea on what to fix, and as such,it took X hours of meeting and Y hours of coding and testing to figure out it was the wrong thing.  We just want to help tune the requirements process a bit to help everyone try and avoid that waste.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most stakeholders are being asked to have their teams do the maximum amount of work possible
in the shortest amount of time. By asking that question in such simple manner, you are asking
if you can spend a small amount of time up front to hopefully eliminate any such missteps.
Most stakeholders will grab on to that as a way for them to look good and for the team to
look good, a win-win.&lt;/p&gt;
&lt;h3 id="what-will-these-requirements-look-like"&gt;What will these requirements look like?&lt;a class="headerlink" href="#what-will-these-requirements-look-like" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The requirements will typically come in two main categories.  The first category, requirements
focused on fixing bugs or adding features, will typically be the bulk of the requirements.
Each requirement should outline any negative impact it will have on any of the metrics.  If
nothing is added on negative impacts, the assumption is that the impact will be neutral or
positive.&lt;/p&gt;
&lt;p&gt;A good example of this is a requirement to add a new feature to the project.  The requirement
should be clearly stated using S.M.A.R.T. terminology, because it will remove any
ambiguity in the requirements.  As any source code added without tests would impact any
reliability metrics, reliability tests should be added to meet any seldom violated
metrics for your project.  In similar ways for the other 3 pillars, it is assumed that any
source code added will be a step forward or neutral in terms of quality, not backward.&lt;/p&gt;
&lt;p&gt;At some point in your project, you should expect that at least a few of the requirements
will appear in the the second category: requirements specifically targeted at one or more of
the pillars.  These requirements allow your team to focus on some aspect of your project where
your team feels that the quality can be improved.  The big caveat with these
requirements is to be mindful of the Achievable and Time-Related aspects of S.M.A.R.T.
requirements.  Make sure that whatever the goal of these requirements are, they are things
that won’t go on forever and are not pipe dreams.&lt;/p&gt;
&lt;p&gt;A good example of this is wanting to improve the efficiency of your project or processes.
Without a good requirements that is Specific, Achievable and Time-Related, this can go on
forever. A bad requirement would state something like “Make the project build faster”.  A good
requirement might state something like “Reduce the unit test time from 20 seconds to
under 15 seconds”, timeboxed to 4 hours.  The good requirement has good guard rails on it
to keep it from exploding on someone who picks up that work.&lt;/p&gt;
&lt;h2 id="publishing-software-quality"&gt;Publishing Software Quality&lt;a class="headerlink" href="#publishing-software-quality" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having gone through the previous sections and any related articles, you should have a
better idea on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to write better requirements to ask for software quality to be improved&lt;/li&gt;
&lt;li&gt;what metrics I recommend to use for each of the four pillars&lt;/li&gt;
&lt;li&gt;how to measure those metrics and integrate them into your projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using this information as tools, your team can improve the quality of the project at it’s own
pace, be that either an immediate focus or a long term focus for your project.&lt;/p&gt;
&lt;p&gt;For any metrics that are in the seldom violated category, the best way to approach them is
to make them gatekeeper metrics for your project.  It should be possible to execute a great
many of the gatekeeper metrics before a commit happens, which is optimal.  For the remaining
metrics in the seldom violated category and metrics in the the positive momentum category,
your team should publish those metrics with every commit or push, giving the submitter that
needed feedback.&lt;/p&gt;
&lt;p&gt;In addition, publishing the metrics to some kind of data store allows your team to
determine how the project quality is trending over time, allowing any stakeholders or project
members to observe any potential software quality issues and take steps to deal with them.
Even for certain seldom violated metrics, it can be useful to track how they are trending,
even if they are trending above the gatekeeper lines set for the project.&lt;/p&gt;
&lt;p&gt;If your team does not publish those metrics in some form, the only data point they have for
the project is a binary one: it passes or it does not.  From my experience, that binary
metric is often a false positive that burns teams due to a lack of information.&lt;/p&gt;
&lt;h2 id="what-does-software-quality-mean-to-me"&gt;What Does Software Quality Mean To Me?&lt;a class="headerlink" href="#what-does-software-quality-mean-to-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software quality means each software project has a plan.  When requirements come in to the
project, they are detailed using the S.M.A.R.T. terminology.  If not specifically geared
towards a given software quality pillar, each requirement may specify what kind of impact it
has on one or more of the pillars.  If not specified, it is assumed that it has a neutral or
positive effect on all of the software quality pillars.  The goals are also specific, not
overly broad, and realistically achieved within a given time frame.&lt;/p&gt;
&lt;p&gt;Software quality means that metrics are well thought out for each project.  Each metric is
both defensible and reasonable for that project and that team.  Any metrics that are not being
used as gatekeepers are published so they can be tracked over time.  For additional benefit,
non-binary gatekeeper metrics are also published, to further improve the project and the
quality of the project.&lt;/p&gt;
&lt;p&gt;Software quality means ensuring that software projects are reliable.  Projects have well
thought out tests that are performed at many levels to ensure that the project’s components
work together to meet the project requirements as well as verify the correctness of the
components themselves.  These tests are executed frequently, and a large number of them are
used as gatekeepers, trying to ensure that only reliable changes are made to the project.
When a project is released, the scenario coverage is 100% and the code coverage is either
at 100% or whatever percentage the team has negotiated and documented for their project.&lt;/p&gt;
&lt;p&gt;Software quality means ensuring that software projects are maintainable.  This entails
sufficient documentation of project goals, architecture, design, and current state. The
documentation is coupled with Static Code Analysis to measure a number of maintainability
metrics and to gatekeep on most of them, ensuring that the project moves in a positive
direction to a higher quality project.&lt;/p&gt;
&lt;p&gt;Software quality means ensuring that software projects and their processes are efficient.
Team process to administrate and maintain the software and the software itself do not have to
be blindingly fast, but they need to be as efficient as they need to be for that project and
for that team.  They do not need to be fast as lightning, only fast enough for the software
project itself.&lt;/p&gt;
&lt;p&gt;Software quality means ensuring that software projects are secure.  If third party components
are used for the project, those components need to be monitored for vulnerabilities, and
any issues that arise must be addressed quickly.  Steps are taken, at a level that is
appropriate for the type of software project, to reduce the possible ways that an user can use
the software project do something malicious.&lt;/p&gt;
&lt;p&gt;To me, software quality is about the journey, continuously improving quality and showing
that progress, while adding new features and fixing bugs at the same time.&lt;/p&gt;
&lt;h2 id="wrapping-it-up"&gt;Wrapping It Up&lt;a class="headerlink" href="#wrapping-it-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To put it succinctly, software quality for a project is about having a common nomenclature
describing the various pillars of quality, having a common way of measuring against each of
those pillars, and the publishing of those measures.  &lt;/p&gt;
&lt;p&gt;Therefore, from my point of view, software quality is not a single metric but a collection of
metrics and a philosophy.  That philosophy is that your team can only really answer that
question by having clearly defined goals for your project and it’s quality metrics, and
steering the project towards those goals.  &lt;/p&gt;
&lt;p&gt;Does every project need to be super high quality? No, not even close.  But I firmly believe
that each project needs to have a solid understanding of what level of software quality they
have in order to negotiate the definition of “good enough” for each project.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:SDET"&gt;
&lt;p&gt;In the United States, where I currently live, I am a Software Development Engineer in Test or SDET.  I do not have an engineering degree.  In any other country, including my native Canada, I am a Software Developer in Test or SDT. &lt;a class="footnote-backref" href="#fnref:SDET" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:SDE"&gt;
&lt;p&gt;In the United States, where I currently live, a Software Development Engineer or SDE is the same as a Software Developer in any other country. &lt;a class="footnote-backref" href="#fnref:SDE" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Pillars"&gt;
&lt;p&gt;Based on my experience, where the article breaks out &lt;code&gt;Size&lt;/code&gt; as it’s own pillar, I would place it in the Maintainability section. Similarly, while I can understand why they place &lt;code&gt;Indentifying Critical Programming Errors&lt;/code&gt; in its own section, I would most likely fold half of the items into the Maintainability section and half of them into the Reliability section. To be clear, I agree with the content they present, it is just the organization that I disagree with on two small points. &lt;a class="footnote-backref" href="#fnref:Pillars" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category></entry><entry><title>Static Websites: Getting Ready For Publishing - Themes and Minutiae</title><link href="https://jackdewinter.github.io/2019/09/08/static-websites-getting-ready-for-publishing-themes-and-minutiae/" rel="alternate"></link><published>2019-09-08T00:00:00-07:00</published><updated>2019-09-08T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-09-08:/2019/09/08/static-websites-getting-ready-for-publishing-themes-and-minutiae/</id><summary type="html">
&lt;p&gt;This is the fourth article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is the fourth article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous articles, I was able to verify my setup of Pelican, posting a test article
that I was able to view in a browser.  I was then able to improve the fidelity of
that article by using &lt;a href="https://www.lipsum.com/"&gt;Lorem Ipsum&lt;/a&gt; to make sure it looked more like
a real article in terms of content and length.  Almost as important, I was able to come up
with a more efficient workflow for publishing changes as I work on them.&lt;/p&gt;
&lt;p&gt;To make the jump from authoring to publishing, there are a number of things that I needed to
finish:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixing The Build Warning&lt;/li&gt;
&lt;li&gt;File Types and File Paths&lt;/li&gt;
&lt;li&gt;Better Values For Defaults&lt;/li&gt;
&lt;li&gt;A Default About Page&lt;/li&gt;
&lt;li&gt;Selecting a Theme&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I have completed all of that, I will be ready to publish… so let’s proceed!&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please read &lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#operating-system-paths"&gt;Operating System Paths&lt;/a&gt; from the second article in
this series for my view on operating system pathing. (i.e. /mount/my/path vs. c:\my\path).
To understand the term &lt;strong&gt;base project directory&lt;/strong&gt; and the script text &lt;strong&gt;%%%MY_DIRECTORY%%%&lt;/strong&gt;,
please read the explanation under
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#step-2-create-a-project-directory-for-the-site"&gt;Step 2: Create a Project Directory For The Site&lt;/a&gt;, also from the
second article in this series.&lt;/p&gt;
&lt;h2 id="task-1-fixing-the-build-warning"&gt;Task 1: Fixing The Build Warning&lt;a class="headerlink" href="#task-1-fixing-the-build-warning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When the site was regenerated using the &lt;em&gt;pelican-build.bat&lt;/em&gt; file, I noticed a warning
at the top of the output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WARNING: Docutils has no localization for 'english'. Using 'en' instead.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an easy one to handle.  I went to the &lt;em&gt;pelicanconf.py&lt;/em&gt; and changed the value
for &lt;em&gt;DEFAULT_LANG&lt;/em&gt; from &lt;code&gt;english&lt;/code&gt; to &lt;code&gt;en&lt;/code&gt;.  Running &lt;em&gt;pelican-build.bat&lt;/em&gt; again, the warning
went away.&lt;/p&gt;
&lt;h2 id="task-2-file-types-and-file-paths"&gt;Task 2: File Types and File Paths&lt;a class="headerlink" href="#task-2-file-types-and-file-paths" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I am creating a static web site, there are various categories of content that I
feel should be kept separate, for various reasons.  Luckily, the contributors to Pelican
though of this too, and the following change to &lt;strong&gt;pelicanconf.py&lt;/strong&gt; will separate out content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PAGE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pages'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configuration informs Pelican that articles will be contained within the
&lt;strong&gt;content\articles&lt;/strong&gt; directory, pages within the &lt;strong&gt;content\pages&lt;/strong&gt; directory, and static
content, such as images, in the &lt;strong&gt;content\images&lt;/strong&gt; directory.  While this isn’t 100%
necessary at the moment, I feel that the organization will pay off later
in the website’s history.&lt;/p&gt;
&lt;p&gt;To complete this change, I moved the &lt;strong&gt;content\test.md&lt;/strong&gt; file into the
&lt;strong&gt;content\articles\test.md&lt;/strong&gt; directory to follow this paradigm.  To make the paradigm more
complete, I wanted to make sure that the articles that I write have the date they were
created as part of their published path.  Searching around the Pelican site itself, this was
easily accomplished with the following change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}/'&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}/index.html'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="task-3-better-values-for-defaults"&gt;Task 3: Better Values For Defaults&lt;a class="headerlink" href="#task-3-better-values-for-defaults" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;pelicanconf.py&lt;/em&gt; file contains two variables, LINKS and SOCIAL, which are still at
their default values.  Giving each a better value will give me a better idea of what
things will look like with various themes, so it makes sense to change them now to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/jackdewinter'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="task-4-a-default-about-page"&gt;Task 4: A Default About Page&lt;a class="headerlink" href="#task-4-a-default-about-page" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In trying to determine what I needed before looking at themes, I noticed one small gap:
I had no static pages.  While I expect most of my content to by blog posts, there will
be the occasional times where I want some kind of page on my site that isn’t an article.&lt;/p&gt;
&lt;p&gt;The first type of page that came to mind was an About page, so I quickly created a new file
&lt;strong&gt;content\pages\about.md&lt;/strong&gt; with the contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it is just a placeholder, the intent was that it would give me a good idea of what to
expect going forward.&lt;/p&gt;
&lt;p&gt;&lt;img alt="first article view" src="https://jackdewinter.github.io/images/static-4/about_page.png" title="Bla blah"/&gt;&lt;/p&gt;
&lt;h2 id="sidebar-1-what-are-themes"&gt;Sidebar 1: What Are Themes?&lt;a class="headerlink" href="#sidebar-1-what-are-themes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Pelican, extensions are performed using a combination of configuration, pip installs,
and git repositories.  The configuration changes and pip installs felt natural to me, as
they are common paradigms in Python.  However, I found the repositories as source took a
bit of getting used to.  Not too bad, but a bit of change that was good!&lt;/p&gt;
&lt;p&gt;Themes themselves are each an individual git repository, containing all of the asserts that
the theme needs.  Luckily there is a site that shows samples of approximately 80% of the
themes.  While it is a bit to process in one viewing,
&lt;a href="http://www.pelicanthemes.com/"&gt;Pelican Themes&lt;/a&gt; currently contains 126 themes, of which
100 of them have images of themed pages.  The better themes have 3-4 pages shown in the
index, whereas some of the themes only have 1 image.  Regardless, it is a lot better than
downloading 100 themes and trying each one out!&lt;/p&gt;
&lt;h2 id="task-5-selecting-a-theme"&gt;Task 5: Selecting a Theme&lt;a class="headerlink" href="#task-5-selecting-a-theme" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, I was pretty sure I had all of the assets I needed before I looked at
themes.  Sample articles. Check.  Sample page. Check.  Sample Links. Check.  Sample social
links. Check.  It was time to start!&lt;/p&gt;
&lt;p&gt;Seeing as I hadn’t actually read anything in people’s blog posts about how hard it was to
select a theme, I wasn’t sure what to expect.  As such, I budgeted a decent amount of time
to the effort.  In fact, I actually budgeted a whole week for this next section.  For me, the
choice of theme was pivotal in being able to communicate effectively with readers.&lt;/p&gt;
&lt;p&gt;To be clear, I didn’t need it to be the right choice.  I did need it to be the right choice
for me and my voice.  It was a clear proposition in my mind:  come out of the gate with a
theme that wasn’t me, or take the time and try and nail it.  Even if I missed by a bit,
I wouldn’t regret taking that time.&lt;/p&gt;
&lt;p&gt;If you are following these articles as a guide, remember that.  Give yourself the time
to make a solid choice that you believe in.&lt;/p&gt;
&lt;h3 id="which-themes-to-try"&gt;Which Themes to Try?&lt;a class="headerlink" href="#which-themes-to-try" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I was trying to find a theme for myself, I went through the complete list of themes 3 or 4
times, just taking a look and seeing which ones appealed to me and which ones had ideas that I
liked.  I started a list on the first pass, and with each pass through the list, I whittled
that list down based on what I saw.  &lt;/p&gt;
&lt;p&gt;On the final pass, I focused on getting the number of themes down to a manageable 3 themes.
For that pass, I found it important, yet difficult, to pare down the choices to 3 themes.
It was important, because I didn’t want to be stuck analyzing the themes for a long time. It
was difficult because there are a lot of good options for themes, and to come up with only 3
options wasn’t easy.  However, I found that by focusing on my primary goal of ease of use
from my &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/#is-a-static-site-generator-the-right-choice-for-me"&gt;first article&lt;/a&gt;, both ease of writing and ease of reading,
it helped me narrow things down.&lt;/p&gt;
&lt;p&gt;The use of an actual list, in my case a simple list written in Markdown, was pivotal.  At
first it contained the URLs of each of the repositories I wanted to look at more.  With
each pass through the list, it contained more information about individual themes and
a smaller number of themes, This approach helped to quickly whittle the selection down to
the real contenders.   This approach, while pedantic, saved me a number of times, as it
became more of a struggle to remember which theme had which look and which features.&lt;/p&gt;
&lt;p&gt;With my final pass through the list, I arrived at my top pick of the &lt;em&gt;nice-blog&lt;/em&gt; theme, with
alternates of the &lt;em&gt;blueprint&lt;/em&gt; theme and the &lt;em&gt;elegant&lt;/em&gt; theme.  &lt;em&gt;Nice-blog&lt;/em&gt; is simple and
uncomplicated, with a decent looking sidebar.  &lt;em&gt;blueprint&lt;/em&gt; is the theme for the site of
&lt;a href="http://duncanlock.net/"&gt;Duncan Lock&lt;/a&gt; which I found during my research.  &lt;em&gt;blueprint&lt;/em&gt; had a
bit more of a finished techy feel, with a nice layout on the sidebar.  Each article had
“X min read” text with the clock icon really grabbed me, which really appealed to me.
Finally, the &lt;em&gt;elegant&lt;/em&gt; theme seemed to keep things simple but elegant, with lots of room
for creativity.&lt;/p&gt;
&lt;h3 id="trying-out-the-themes"&gt;Trying Out The Themes&lt;a class="headerlink" href="#trying-out-the-themes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Each of the themes, &lt;a href="https://github.com/guilherme-toti/nice-blog"&gt;Nice-Blog&lt;/a&gt;,
&lt;a href="https://github.com/dflock/blueprint"&gt;Blueprint&lt;/a&gt;, and
&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;Elegant&lt;/a&gt;, exists in it’s own GitHub
repository.  As such, one approach to downloading the themes was to create a &lt;strong&gt;blog-themes&lt;/strong&gt;
directory at the same level as the &lt;em&gt;base project directory&lt;/em&gt;, creating a directory for each
theme.  As &lt;em&gt;Nice-Blog&lt;/em&gt; and &lt;em&gt;Elegant&lt;/em&gt; are in the main Pelican themes repository, the other
approach for those two themes was to clone the
&lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes Repository&lt;/a&gt;
into the &lt;strong&gt;blog-themes&lt;/strong&gt; directory using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --recursive https://github.com/getpelican/pelican-themes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the first approach, I would have to individually add each theme, whereas with the second
approach, I can get most of the themes all at once.  The was also the concern that regardless
of which way I chose for &lt;em&gt;nice-blog&lt;/em&gt; and &lt;em&gt;elegant&lt;/em&gt;, I would have to use the first approach
for &lt;em&gt;blueprint&lt;/em&gt;.  Was it worth it to have two paradigms?&lt;/p&gt;
&lt;p&gt;After thinking about it a bit, I decided to go with the first approach, as I only had 3 themes
I was interested in. So, on the command line, I entered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ..\blog-themes
git clone https://github.com/guilherme-toti/nice-blog ..\blog-themes\nice-blog
git clone https://github.com/dflock/blueprint ..\blog-themes\blueprint
git clone https://github.com/Pelican-Elegant/elegant ..\blog-themes\elegant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The plan was to try each of the candidates, writing down notes about what aspects I found
good and bad about each.  Following the instructions on the Pelican home page, I modified
&lt;strong&gt;pelicanconf.py&lt;/strong&gt; to refer to the first theme as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'%%%MY_DIRECTORY%%%\\blog-themes\\nice-blog'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the file, switch to the browser and refresh.  Check to make sure it changed properly.
Look around the site a bit and write down some notes.  Easy.  While I would end up coming
back to this theme later for more information, the first pass was a solid 5 minutes with no
issues.&lt;/p&gt;
&lt;p&gt;Expecting similar behavior, I did the similar change to make the THEME variable point to the
&lt;strong&gt;blueprint&lt;/strong&gt; directory.  I switched to the browser and refreshed and it was the same as
before.  A quick examination of the &lt;em&gt;Builder&lt;/em&gt; command window, and I got the following
notification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CRITICAL: TemplateSyntaxError: Encountered unknown tag 'assets'.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Critical error… encountering that was foreboding.  I stopped the windows started by
&lt;strong&gt;pelican-devserver.bat&lt;/strong&gt;, and buckled down to do more research.  This was the start of
a long diversion.&lt;/p&gt;
&lt;h3 id="off-the-beaten-path-getting-blueprint-to-work"&gt;Off The Beaten Path: Getting Blueprint to Work&lt;a class="headerlink" href="#off-the-beaten-path-getting-blueprint-to-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Note: I have not contacted the developer of the Blueprint theme, and his blog and his
theme have not had any recent changes.  When I decided to try it out, it was with the
knowledge that it would probably require more effort to get it to work.&lt;/p&gt;
&lt;p&gt;I had hoped to wait for a bit before exploring plugins, as there are many plugins
listed on the &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;Pelican Plugins&lt;/a&gt; web site.
In addition, unless you know what you are looking for with a plugin, it’s effects are
either invisible or difficult to spot.  For those reasons, I wanted to wait until the
more major variables regarding the web site were set before tackling these more minor ones.&lt;/p&gt;
&lt;h4 id="adding-required-plugins"&gt;Adding Required Plugins&lt;a class="headerlink" href="#adding-required-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After doing my research, it appeared that &lt;em&gt;blueprint&lt;/em&gt; was dependent upon the &lt;em&gt;assets&lt;/em&gt;
plugin.  While installing Plugins faces the same issue as how to install Themes,
I chose to do the “all at once” approach for the plugins.  The main reason for this was
to allow me in the future to try each plugin, figuring out that plugins is worth the impact.
As such, having all of the common plugins together made a lot more sense.&lt;/p&gt;
&lt;p&gt;Similar to the way described above to install all the themes, I created a &lt;em&gt;blog-plugins&lt;/em&gt;
directory at the same level as the &lt;em&gt;base project directory&lt;/em&gt;.  Changing into that directory,
I issued the following command to pull the contents down to my system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --recursive https://github.com/getpelican/pelican-plugins ..\blog-plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I had the contents of the plugin repository on my machine, I added configuration to
Pelican to point to the new plugin directory.  Then I needed to add the &lt;em&gt;assets&lt;/em&gt; plugin to
satisfy the &lt;em&gt;blueprint&lt;/em&gt; theme.  This was done by adding the following to &lt;strong&gt;pelcianconf.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'../../blog-plugins/'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'assets'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the &lt;strong&gt;pelican-build.bat&lt;/strong&gt; script this time, I received the following error, buried
deep within the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WARNING: `assets` failed to load dependency `webassets`.`assets` plugin not loaded.
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="plugins-with-python-package-requirements"&gt;Plugins With Python Package Requirements&lt;a class="headerlink" href="#plugins-with-python-package-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Luckily, as part of the previous research, this warning was mentioned, and it was because the
&lt;em&gt;assets&lt;/em&gt; plugin requires the &lt;em&gt;webassets&lt;/em&gt; Python package.  A quick &lt;em&gt;pip install webassets&lt;/em&gt;
later, it’s time to build the website again.&lt;/p&gt;
&lt;p&gt;This time, after running the build script, the output ended with the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
CRITICAL: ValueError: not enough values to unpack (expected 3, got 2)
...
  File "XXX\blog-themes\blueprint\templates\base.html", line 37, in top-level template code
    {% for anchor_text, name, link in SOCIAL %}
ValueError: not enough values to unpack (expected 3, got 2)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="configuration-changes-for-plugins"&gt;Configuration Changes For Plugins&lt;a class="headerlink" href="#configuration-changes-for-plugins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Once again, research to the rescue, this being a relatively easy issue.  Different plugins
and themes have different configuration requirements, and this one is no different.  By looking
at the error message, mixed with my knowledge of Python, I saw that the plugin is expecting
3 values for the SOCIAL configuration variable: anchor_text, name, and link.  A quick look at
my current configuration, and I see the default settings of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/jackdewinter'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;represent the 2 values that the theme is expecting.  Needing a third, I simply cloned the
first value into the second position:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/jackdewinter'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wash. Rinse. Repeat.  Running the script again, I received the following critical error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
CRITICAL: TemplateAssertionError: no filter named 'sidebar_date_format'
...
  File "XXX\blog-content\virtualenv\lib\site-packages\jinja2\compiler.py", line 315, in fail
    raise TemplateAssertionError(msg, lineno, self.name, self.filename)
jinja2.exceptions.TemplateAssertionError: no filter named 'sidebar_date_format'
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="more-configuration-changes"&gt;More Configuration Changes&lt;a class="headerlink" href="#more-configuration-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This time, it took a lot of looking.  I did scans over the entire &lt;strong&gt;blog-themes&lt;/strong&gt; directory
as well as the &lt;strong&gt;blog-plugins&lt;/strong&gt; and &lt;strong&gt;blog-content&lt;/strong&gt; directories.  Just in case.  In fact,
I had almost given up hope when I started to look at the
&lt;a href="https://github.com/dflock/duncanlock.net/blob/master/pelicanconf.py"&gt;pelicanconf.py file&lt;/a&gt;
that Duncan himself used.  Down near the bottom were a number of configuration entries,
including one for the missing configuration item.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;month_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;calendar&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{S}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;archive_date_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;custom_strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{S} %B, %Y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sidebar_date_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;custom_strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%a {S} %B, %Y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'th'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'st'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'nd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'rd'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'th'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;span class="day_suffix"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="c1"&gt;# Which custom Jinja filters to enable&lt;/span&gt;
&lt;span class="n"&gt;JINJA_FILTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"month_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;month_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"archive_date_format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;archive_date_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"sidebar_date_format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sidebar_date_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copying this into my own &lt;strong&gt;pelicanconf.py&lt;/strong&gt; file, it was time to run the build script
again.  To be honest, for this section of configuration, I started only copying the
&lt;em&gt;sidebar_date_format&lt;/em&gt; function.  Then I realized it needed &lt;em&gt;custom_strftime&lt;/em&gt;.  Then
I realized it needed… It was at that time that I figured it was easier to just copy
all of this code over, and if I stayed with the theme, I would see about cleaning it up.&lt;/p&gt;
&lt;p&gt;With the complete section copied over, running the build script produced the following
error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CRITICAL: UndefinedError: 'pelican.contents.Article object' has no attribute 'stats'
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="more-build-iterations"&gt;More Build Iterations&lt;a class="headerlink" href="#more-build-iterations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Realizing that more of the configuration may be in the &lt;strong&gt;pelicanconf.py&lt;/strong&gt; file, with
the above error in mind, I scanned the configuration and noticed a plugin called
&lt;em&gt;post_stats&lt;/em&gt;.  Looking at the
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/post_stats"&gt;documentation&lt;/a&gt;
for &lt;em&gt;post_stats&lt;/em&gt;, it seemed like it would expose that attribute.  So, adding
&lt;strong&gt;‘post_stats’&lt;/strong&gt; to the plugins, I re-ran the build, with the attribute error disappearing,
only to be replaced with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ModuleNotFoundError: No module named 'bs4'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having looked at the documentation for &lt;em&gt;post_stats&lt;/em&gt;, I was able to solve this one right
away.  To get the proper word count for the stats, the plugin uses the Python Beautiful Soup
package (version 4) to scrape the HTML output.  Executing &lt;em&gt;pip install beautifulsoup4&lt;/em&gt;,
and then rebuilding again, we get the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;File "%%%MY_DIRECTORY%%%\blog-themes\blueprint\templates\footer.html", line 41, in top-level template code
    {% for anchor_text, name, link in LINKS %}
ValueError: not enough values to unpack (expected 3, got 2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the same error as with the &lt;em&gt;SOCIAL&lt;/em&gt; variable, and the same solution will work.
Changing the LINKS variable to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And recompile and… all errors gone.  Switch back to the browser and refresh the page.
Repeat the entire process as with the &lt;em&gt;nice-blog&lt;/em&gt; theme, taking notes.&lt;/p&gt;
&lt;h3 id="back-to-the-final-theme"&gt;Back to the Final Theme&lt;a class="headerlink" href="#back-to-the-final-theme" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bracing for the worst, I changed the theme to &lt;em&gt;Elegant&lt;/em&gt; and it… just worked. After
&lt;em&gt;blueprint&lt;/em&gt;, I expected a lot more effort, but it just worked.  Counting my blessings,
I did the usual playing around and taking notes, then I sat back.&lt;/p&gt;
&lt;p&gt;From then on, I went back to the three themes frequently and took more detailed notes
and observations until I got to a point where I wasn’t adding any meaningful notes.
It was then that I was sure that I had the information I needed to make my decision.&lt;/p&gt;
&lt;h3 id="lessons-learned"&gt;Lessons Learned&lt;a class="headerlink" href="#lessons-learned" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before I go on to my decision process, I wanted to go over some things I learned or remembered
along the way of finding a theme.  Some are obvious, some are not.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The more standard things are, the less you are going to have to do to make them work.&lt;ul&gt;
&lt;li&gt;Blueprint was not in the main collection of themes, and it took a lot of effort to make  it work in it’s out-of-the-box mode.&lt;/li&gt;
&lt;li&gt;Elegant and Nice-Blog both worked out-of-the-box with 0-2 modifications to configuration  and no extra packages or plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The auto-build feature of the generator can hang.&lt;ul&gt;
&lt;li&gt;There were a number of times I had to Ctrl-C and restart the generator.&lt;/li&gt;
&lt;li&gt;This seemed to happen more when I was changing the themes or plugins.&lt;/li&gt;
&lt;li&gt;It also happened when I introduced something that required a new Python package.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I didn’t regret putting in the work.&lt;ul&gt;
&lt;li&gt;I wanted to put the work in to each theme on the short list to have a balanced comparison.&lt;/li&gt;
&lt;li&gt;I wanted to have a good understanding of what it would take to maintain each of the themes.  The work I put in gave me the understanding that &lt;em&gt;blueprint&lt;/em&gt; would take a lot  more work than the others to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;As old school as it is, a simple pros and cons list help me figure out the best theme.&lt;ul&gt;
&lt;li&gt;The first two themes were easy to keep in my head at first.&lt;/li&gt;
&lt;li&gt;The more themes that I saw, the harder it was to remember any points about each of the themes.&lt;/li&gt;
&lt;li&gt;By the time I got down to the last 2 themes, I had so many parts of so many themes going through my head.  Without the list, I would have been lost.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-final-selection"&gt;The Final Selection&lt;a class="headerlink" href="#the-final-selection" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Due to the amount of work required for &lt;em&gt;blueprint&lt;/em&gt;, including a number of limitations I
encountered clicking around, it was out of consideration right away.  One of my core issues
from &lt;a href="http://Is-a-Static-Site-Generator-The-Right-Choice-For-Me"&gt;the first article&lt;/a&gt; was ease
of use, and I didn’t get the feeling that &lt;em&gt;blueprint&lt;/em&gt; would fall into that category.&lt;/p&gt;
&lt;p&gt;Looking at the notes a number of times, it was hard to distinguish the two remaining themes
from each other.  They both had a simple and elegant look-and-feel, and that was making the
decision even more difficult.  There were a couple of small features that were different,
but those missing from one were balanced by ones missing from the other one.  It was
pretty much a stalemate in my head.&lt;/p&gt;
&lt;p&gt;After going back and forth a number of times to try and resolve the stalemate, I decided
I needed more criteria to help.  The first two that came to mind were the documentation and
active maintenance of the theme.  This was returning to the &lt;em&gt;ease-of-use&lt;/em&gt; consideration
that was a driving force in my first article, so I knew it would be relevant. It was then
that the &lt;em&gt;elegant&lt;/em&gt; theme became the winner by a fair amount.&lt;/p&gt;
&lt;p&gt;So, after about a weeks worth of shifting between themes in “spare time”, I landed on
the &lt;em&gt;elegant&lt;/em&gt; theme for my web site.  It took a couple of days for it to sink in while
I was writing this article, but with each passing day, my confidence that I made the right
choice increased.  I took the time, examined the themes, wrote the notes, and in the end,
it resulted in a single, clear choice.&lt;/p&gt;
&lt;p&gt;With finality I went to the configuration file, and near the top added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Current Theme&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%%&lt;/span&gt;&lt;span class="s1"&gt;%MY_DIRECTORY&lt;/span&gt;&lt;span class="si"&gt;%%&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;blog-other-themes&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;elegant'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the beginning of this article, I had most of what I needed to start selecting a theme.
It took some small updates to the configuration to make sure I had a good test site available.
This was critical to allowing me to go through each theme I was interested in and see if it
was for what I was looking for.  While one of the themes proved to be a handful, the
experience was good in advising me of possible issues I might have in customizing my own site.&lt;/p&gt;
&lt;p&gt;In the end, I made a strong, confident choice of the &lt;em&gt;elegant&lt;/em&gt; theme, which as benefits,
is actively being developed and has great documentation.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I have completed all of the major tasks, the next step is to publish the website to
an external host.  For choices that will become evident, I will be publishing the website to
GitHub pages. Completing this task will be covered in the next post
&lt;a href="https://jackdewinter.github.io/2019/09/08/static-websites-publishing-to-github-pages/"&gt;Publishing To GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="epilogue-jacks-notes-on-themes"&gt;Epilogue: Jack’s Notes on Themes&lt;a class="headerlink" href="#epilogue-jacks-notes-on-themes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the previous sections, I mentioned taking notes on each themes.  To do this, I used
the main page, the about page, and the two sample articles as a litmus test.  I clicked
around the web site, looking for things that worked and didn’t work, as well as the feel
of the web site.  I also went to the home repository of each theme and checked for how
often it was updated, and what kind of support the repository offered for customization.&lt;/p&gt;
&lt;p&gt;In the end, I came up with three lists of items, with pros and cons, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nice-blog&lt;ul&gt;
&lt;li&gt;pros&lt;ul&gt;
&lt;li&gt;starting point&lt;/li&gt;
&lt;li&gt;minimal but elegant look and feel&lt;/li&gt;
&lt;li&gt;categories support&lt;/li&gt;
&lt;li&gt;metadata for articles&lt;ul&gt;
&lt;li&gt;subtitle, cover image, gallery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;can change color easily&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cons&lt;ul&gt;
&lt;li&gt;doesn’t seem to handle TOC properly&lt;/li&gt;
&lt;li&gt;no tags support&lt;/li&gt;
&lt;li&gt;simple tracking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;blueprint&lt;ul&gt;
&lt;li&gt;pros&lt;ul&gt;
&lt;li&gt;tags by name and frequency&lt;/li&gt;
&lt;li&gt;like “4 min read”&lt;/li&gt;
&lt;li&gt;nice blue&lt;/li&gt;
&lt;li&gt;date format Fri 3rd December, 2010&lt;/li&gt;
&lt;li&gt;category and tag support&lt;/li&gt;
&lt;li&gt;origin of &lt;a href="http://duncanlock.net/blog/2013/05/29/better-figures-images-plugin-for-pelican/"&gt;better figures plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cons&lt;ul&gt;
&lt;li&gt;too limited otherwise&lt;/li&gt;
&lt;li&gt;no archives by default&lt;/li&gt;
&lt;li&gt;documentation for theme very limited&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;elegant&lt;ul&gt;
&lt;li&gt;pros&lt;ul&gt;
&lt;li&gt;nice layout&lt;/li&gt;
&lt;li&gt;very elegant and simple feel&lt;/li&gt;
&lt;li&gt;category and tag support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/tree/master/documentation/content"&gt;extensive documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;lots of metadata&lt;/li&gt;
&lt;li&gt;actively being maintained&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cons&lt;ul&gt;
&lt;li&gt;no “4 min read” support&lt;/li&gt;
&lt;li&gt;no links support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="static website generator"></category><category term="static site generator"></category><category term="websites"></category></entry><entry><title>Static Websites: Publishing To GitHub Pages</title><link href="https://jackdewinter.github.io/2019/09/08/static-websites-publishing-to-github-pages/" rel="alternate"></link><published>2019-09-08T00:00:00-07:00</published><updated>2019-09-08T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-09-08:/2019/09/08/static-websites-publishing-to-github-pages/</id><summary type="html">
&lt;p&gt;This is the fifth article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is the fifth article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous articles, I used Pelican as my Static Site Generator, generating a nicely
themed site with some test articles in it.  To make sure I can speak with my own voice, I took
my time determining what theming I wanted for the website.  By taking these deliberate steps,
I was able to arrive at my choice for the site’s theme with confidence and clarity.&lt;/p&gt;
&lt;p&gt;This entire journey has been geared towards generating an externally hosted web site that is
primarily a blog.  This article talks about the final step on that journey: publishing my
website to the free GitHub Pages platform.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please read &lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#operating-system-paths"&gt;Operating System Paths&lt;/a&gt; from the second article in
this series for my view on operating system pathing. (i.e. /mount/my/path vs. c:\my\path).
To understand the term &lt;strong&gt;base project directory&lt;/strong&gt; and the script text &lt;strong&gt;%%%MY_DIRECTORY%%%&lt;/strong&gt;,
please read the explanation under
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#step-2-create-a-project-directory-for-the-site"&gt;Step 2: Create a Project Directory For The Site&lt;/a&gt;, also from the
second article in this series.&lt;/p&gt;
&lt;h2 id="why-github-pages"&gt;Why GitHub Pages?&lt;a class="headerlink" href="#why-github-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In looking at a number of sites built on various Static Site Generators (SSGs), it became
obvious that a majority of the pages were hosted on &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.
With that in mind, I looked into GitHub pages to figure out if it was best solution for me.&lt;/p&gt;
&lt;p&gt;The article
&lt;a href="https://help.github.com/en/articles/what-is-github-pages"&gt;What is GitHub Pages?&lt;/a&gt; goes into
a decent amount of detail, but the summary boils down to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it’s 100% free&lt;/li&gt;
&lt;li&gt;only static content can be hosted&lt;/li&gt;
&lt;li&gt;don’t do anything illegal&lt;/li&gt;
&lt;li&gt;don’t create an excessively large site (over 1 GB in size)&lt;/li&gt;
&lt;li&gt;don’t create a site that is incredibly populate (over 100GB per month in bandwidth)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For cases where the last two items occur, their website even mentions that they will send
“a polite email from GitHub Support or GitHub Premium Support suggesting strategies for
reducing your site’s impact on our servers”.  &lt;/p&gt;
&lt;p&gt;To me, this seemed like a good place to start.  I already use Git for source management, so
familiarity with the website and tooling is already there.  Their documentation is good, and
it looks relatively easy to implement.  Another plus.  Most importantly, there are no fees for
upload or serving the content, so I can experiment with various things and not worry about
incurring extra charges.&lt;/p&gt;
&lt;h2 id="branches-on-github-pages"&gt;Branches on GitHub Pages&lt;a class="headerlink" href="#branches-on-github-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After doing my research on GitHub, specifically about
&lt;a href="https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages"&gt;publishing on GitHub pages&lt;/a&gt;,
I was confused about one point.  From my experience with Git, most people and companies do
either repository base development or branch based development.  Even less frequent is
something called monolith based development.  The approach for GitHub pages is not one of
those.&lt;/p&gt;
&lt;p&gt;Repository based development uses Git’s distributed nature to create changes on your
own repository, only merging the changes into the “main” repository when you are sure of your
changes.  Branched based development is similar, except the branching feature of Git is used
on a single remote repository, only merging changes into the “main” branch when you are sure
of your changes.  Monolith development is more dangerous, with committing all changes to a
single repository with a single branch.  For all three type of development, there is one
thread going through all of them:  you are keeping versions of a single type of thing in your
repository.&lt;/p&gt;
&lt;p&gt;In a number of sites that I researched, it appeared that they were using a tool called
&lt;em&gt;ghp-import&lt;/em&gt;.  This tool allows for the content for the site to be stored in the &lt;em&gt;content&lt;/em&gt;
branch of the repository, while the produced website is pushed to the &lt;em&gt;master&lt;/em&gt; branch of the
same repository.  While I can wrap my mind around it, to me it didn’t seem like a good idea.
As this is outside of my normal workflows, I was pretty sure that at some point I would
forget and push the wrong thing to the wrong branch.  To keep things simple,  I wanted my
website content in one repository, and my website content in another repository.&lt;/p&gt;
&lt;p&gt;That itself raised some issues with my current setup, having the &lt;strong&gt;output&lt;/strong&gt; directory at the
same level as the &lt;strong&gt;content&lt;/strong&gt; directory.  During my research, I came across the statement that
Git repositories cannot contain other repositories.  If you do need to have this kind of
format, a concept called
&lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodules&lt;/a&gt; was recommended.  The
plugins and themes repositories for Pelican make heavy use of submodules, so I knew it
could be done. But after some experimentation with some sample repositories, I was unable
to make this work reliably.  Also, while I can learn to wrap my mind around it, it seemed
like a lot of extra work to go through.&lt;/p&gt;
&lt;p&gt;In the end, I decided that it was best to keep things simple, keeping 2 repositories that
were 100% separate from each other.   If I do more research and figure out how to make
submodules work reliably, I am confident that I can condense these distinct repositories
into one physical repository.  &lt;/p&gt;
&lt;p&gt;With that decision made, I needed to create a new output directory outside of the
&lt;strong&gt;blog-content&lt;/strong&gt; directory.  I decided to call this new directory &lt;strong&gt;blog-output&lt;/strong&gt; and have
it at the same level as &lt;strong&gt;blog-content&lt;/strong&gt;.  To make sure it was initialized properly
with a local repository, I entered the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ..\blog-ouptut
cd ..\blog-ouptut
git init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that was complete, I had to ensure that the &lt;strong&gt;pelican-*&lt;/strong&gt; scripts were changed to point
to the new location, taking a simple search and replace over all of the script files.  That
being completed, I executed each of my &lt;strong&gt;pelican-*&lt;/strong&gt; scripts, to verify the changes were
correct, with no problems.  To further ensure things looked good, I performed a
&lt;strong&gt;git status -s&lt;/strong&gt; on both repositories to be sure I didn’t miss anything.  While this
approach wasn’t as elegant as the other solution, in my mind it was simpler, and therefore
more maintainable.&lt;/p&gt;
&lt;h2 id="adding-remotes-repositories"&gt;Adding Remotes Repositories&lt;a class="headerlink" href="#adding-remotes-repositories" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I had two local repositories, one for content and one for output, it was time to
make remote repositories on GitHub for each of them.  I already had a GitHub account for
some other projects I was looking at, so no worry there.  Even if I didn’t have one set up,
GitHub makes it simple to set up a new account on their &lt;a href="https://github.com"&gt;home page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From there, it was a simple matter of clicking the plus icon at the top right of the main
window, and selecting &lt;em&gt;New Repository&lt;/em&gt; from the drop down list.  The first repository I
created was for the content, and I simply called it &lt;strong&gt;blog-content&lt;/strong&gt;, which I entered in the
edit box under the &lt;em&gt;Repository Name&lt;/em&gt; label.  As I wanted my content to be private, I changed
the selection from &lt;em&gt;Public&lt;/em&gt; to &lt;em&gt;Private&lt;/em&gt; and clicked on the &lt;em&gt;Create Repository&lt;/em&gt; button.&lt;/p&gt;
&lt;p&gt;For the other repository, I followed the same instructions with two exceptions.  The first
exception is that, as the output of Pelican needs to be public to be seen, I kept the
selection on &lt;em&gt;Public&lt;/em&gt;.  The second exception was the name of the repository.  According to
the &lt;a href="https://help.github.com/en/articles/user-organization-and-project-pages"&gt;User Pages&lt;/a&gt;
page, to publish any committed pages you need to use a site of the form &lt;em&gt;user-name&lt;/em&gt;.github.io
and push any changes to the master branch.  As my user name on GitHub is &lt;em&gt;jackdewinter&lt;/em&gt;, this
made my repository name &lt;em&gt;jackdewinter.github.io&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are using this article as a guide, please note that you will need to change the
repository name to match your own GitHub user name.&lt;/p&gt;
&lt;h2 id="securing-the-github-access"&gt;Securing The GitHub Access&lt;a class="headerlink" href="#securing-the-github-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first time that I added my remote repositories to their local counterparts, I encountered
a problem almost right away.  When I went to interact with the remotes, I was asked to enter
my user id and password for GitHub each time.  This was more than annoying.  Having faced
this issue before on other systems, I knew there were solutions, so back to the research!&lt;/p&gt;
&lt;p&gt;Now, keep in mind that my main machine is a Windows machine, so of course this is a bit more
complicated than when I am working on a Linux machine.  If I was on a Linux machine, I would
follow the instructions at
&lt;a href="https://help.github.com/en/articles/connecting-to-github-with-ssh"&gt;Connecting to GitHub with SSH&lt;/a&gt;
and things would probably work with no changes.  To start with, I want to make sure that
GitHub has it’s own private/public key pair, so I would follow the instructions under
&lt;a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;Generating a New SSH Key and adding it to the ssh-agent&lt;/a&gt;.
I would then follow the instructions under
&lt;a href="https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account"&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;
to make sure GitHub had the right half of the key.  A couple of Git commands later, and it
would be tested.&lt;/p&gt;
&lt;p&gt;In this case, I needed to get it running on windows, and the Win10 instance of SSH takes a bit
more finessing.  To make sure the service was installed and operational, I followed the
instructions on &lt;a href="https://stackoverflow.com/questions/52113738/starting-ssh-agent-on-windows-10-fails-unable-to-start-ssh-agent-service-erro"&gt;Starting the SSH-Agent&lt;/a&gt;.  Once that
was performed, I was able to execute &lt;strong&gt;ssh-agent&lt;/strong&gt;, and only then could I use &lt;strong&gt;ssh-add&lt;/strong&gt;
to add the newly created private key to &lt;strong&gt;ssh-agent&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, I needed to execute these commands to setup the key on my local machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-agent
ssh-keygen -f %USERPROFILE%\.ssh\blog-publish-key -C "jack.de.winter@outlook.com"
ssh-add %USERPROFILE%\.ssh\blog-publish-key
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="attaching-remote-repositories-to-local-repositories"&gt;Attaching Remote Repositories to Local Repositories&lt;a class="headerlink" href="#attaching-remote-repositories-to-local-repositories" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was the real point where I would see if things flowed together properly.  First, I
needed to specify the remote for the &lt;strong&gt;blog-content&lt;/strong&gt; repository.  Looking at my GitHub
account, I browsed over to my &lt;strong&gt;blog-content&lt;/strong&gt; repository, and clicked on the &lt;em&gt;clone or
download&lt;/em&gt; button.  Making sure the link began with &lt;em&gt;ssh&lt;/em&gt;, I pressed the clipboard icon
to copy the link into the clipboard.  &lt;/p&gt;
&lt;p&gt;Back in my shell, and I change directory to &lt;strong&gt;blog-content&lt;/strong&gt; and entered the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin %%%PASTE HERE%%%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;strong&gt;%%%PASTE HERE%%%&lt;/strong&gt; was the text I copied into the clipboard.  As my user id is
&lt;em&gt;jackdewinter&lt;/em&gt; and the repository is &lt;strong&gt;blog-content&lt;/strong&gt;, the actual text was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin https://github.com/jackdewinter/blog-content.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This process was then copied for the &lt;strong&gt;blog-output&lt;/strong&gt; directory and the
&lt;strong&gt;jackdewinter.github.io&lt;/strong&gt; repository.&lt;/p&gt;
&lt;h2 id="publish-the-content-to-output"&gt;Publish the Content to Output&lt;a class="headerlink" href="#publish-the-content-to-output" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Until this point, when I wanted to look at the website, I would make sure to have the
windows from the &lt;strong&gt;pelican-devserver.bat&lt;/strong&gt; script up and running.  Behind the scenes, the
&lt;strong&gt;pelican-autobuild.bat&lt;/strong&gt; script and the &lt;strong&gt;pelican-server.bat&lt;/strong&gt; scripts were being run in
their own windows, the first script building the site on any changes and the second script
serving the newly changed content.  As long as I am developing the site or an article,
that workflow is a good and efficient workflow.&lt;/p&gt;
&lt;p&gt;When generating the output for the actual website, I felt that I needed a different workflow.
As that act of publishing is a very deliberate act, my feeling is that it should be more
controlled than automatically building the entire site on each change.  Ideally, I want to
be able to proof a group of changes to the website before making those changes public.&lt;/p&gt;
&lt;p&gt;One of the major reasons for the deliberate workflow is that, from experience, the
generation of anything production grade relies on some form of configuration that is
specific to the thing you are producing.  For my website, this needs extra testing
specifically around that production configuration in order for my confidence in those
changes to be high enough that I am confident in publishing it.&lt;/p&gt;
&lt;p&gt;The most immediate example of such configuration is the
&lt;a href="https://docs.getpelican.com/en/stable/settings.html?highlight=settings#SITEURL"&gt;SITE_URL&lt;/a&gt;
configuration variable.
While it was not obvious in the examples that I researched, this variable must be set to
the actual base URL of the hosting site.  Using the &lt;em&gt;Elegant&lt;/em&gt; theme, if you click on
the &lt;strong&gt;Categories&lt;/strong&gt; button in the header, and then the &lt;strong&gt;Home&lt;/strong&gt; button, it will stay on
the &lt;strong&gt;Categories&lt;/strong&gt; page.  Looking more closely at the source for the &lt;strong&gt;base.html&lt;/strong&gt; page,
the &lt;strong&gt;Home&lt;/strong&gt; button contains an url is defaulted to &lt;strong&gt;’‘&lt;/strong&gt;.  Digging into the template
for the &lt;strong&gt;base.html&lt;/strong&gt; page, the value being set for the anchor of that button is
&lt;strong&gt;href=”{{ SITEURL }}”&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hence, for the &lt;strong&gt;Home&lt;/strong&gt; button to work properly, &lt;strong&gt;SITE_URL&lt;/strong&gt; needs a proper value.  The
default configuration in &lt;strong&gt;pythonconf.py&lt;/strong&gt; for &lt;strong&gt;SITE_URL&lt;/strong&gt; is &lt;strong&gt;’‘&lt;/strong&gt;, so that needed to
be changed.  For the developer website to work properly, &lt;strong&gt;SITE_URL&lt;/strong&gt; must be set to
&lt;strong&gt;‘http://localhost:8000’&lt;/strong&gt; in &lt;strong&gt;pythonconf.py&lt;/strong&gt;.  This however introduces a new issue:
how do I make sure this variable is set properly when we publish the output?&lt;/p&gt;
&lt;p&gt;Luckily, the Pelican developers thought of situations like this.  Back in the second article
of this series, &lt;a href="{filename}/static-2.md#css#css"&gt;Step 4: Create a Generic Web Site&lt;/a&gt;,
I mentioned a file called &lt;strong&gt;publishconf.py&lt;/strong&gt;.  This file was generated as part of the output
of &lt;strong&gt;pelican-quickstart&lt;/strong&gt; and has not been mentioned since.  This file is intended to be used
as part of a publish workflow, allowing the variables from &lt;strong&gt;publishconf.py&lt;/strong&gt; to be overridden.&lt;/p&gt;
&lt;p&gt;Specifically, in that file, the following code imports the settings from &lt;strong&gt;publishconf.py&lt;/strong&gt;
before defining alternate values for them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;website.pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below this part of the configuration, in the same manner as in &lt;strong&gt;pythonconf.py&lt;/strong&gt;, the
&lt;strong&gt;SITEURL&lt;/strong&gt; variable in &lt;strong&gt;publishconf.py&lt;/strong&gt; is set to &lt;strong&gt;’‘&lt;/strong&gt;.  Therefore, when I publish the
website with the publish configuration, it will use &lt;strong&gt;’‘&lt;/strong&gt; for the &lt;strong&gt;SITE_URL&lt;/strong&gt;.  To make sure
the website publishes properly, I needed to change the &lt;strong&gt;SITE_URL&lt;/strong&gt; variable in
&lt;strong&gt;publishconf.py&lt;/strong&gt; to reflect the website where we are publishing to, namely
&lt;strong&gt; https://jackdewinter.github.io &lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that I took care of that, I just needed to come up with a batch script that makes
use of &lt;strong&gt;publishconf.py&lt;/strong&gt;.  To accomplish that, I simply copied the &lt;strong&gt;pelican-build.bat&lt;/strong&gt;
script to &lt;strong&gt;pelican-publish.bat&lt;/strong&gt;, and edited the file removing the &lt;strong&gt;–debug&lt;/strong&gt; flag
and referring to &lt;strong&gt;publishconf.py&lt;/strong&gt; instead of &lt;strong&gt;pelicanconf.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican --verbose --output ..\blog-output --settings website\publishconf.py website\content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test this out, I stopped the &lt;strong&gt;pelican-autobuild.bat&lt;/strong&gt; script and executed the
&lt;strong&gt;pelican-publish.bat&lt;/strong&gt; script.  By leaving the &lt;strong&gt;pelican-server.bat&lt;/strong&gt; script running,
I was able to double check the published links, verifying that they were based on the
&lt;strong&gt;jackdewinter.github.io&lt;/strong&gt; site where I wanted to publish them.&lt;/p&gt;
&lt;h2 id="pushing-the-content-to-the-remote"&gt;Pushing the Content To The Remote&lt;a class="headerlink" href="#pushing-the-content-to-the-remote" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, I had two local repositories, one with commits and one without, and two remote
repositories with no information.  While I wanted to see the results and work on the
&lt;strong&gt;blog-output&lt;/strong&gt; repositories first, it was more important to make sure my work was safe in
the &lt;strong&gt;blog-content&lt;/strong&gt; repositories.  So that one would be first.&lt;/p&gt;
&lt;p&gt;Changing into the &lt;strong&gt;blog-content&lt;/strong&gt; directory and doing a &lt;strong&gt;git status -s&lt;/strong&gt;, I noticed a
couple of changes that were not committed.  A quick &lt;strong&gt;git add –all&lt;/strong&gt; and a &lt;strong&gt;git commit&lt;/strong&gt;
later, all of the changes were committed to the local repository.  At this point, the changes
are present in the local repository, but not in the remote repository.  The following command
will push those changes up to the remote repository’s master branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push --set-upstream origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, I did a quick check on the &lt;strong&gt;blog-content&lt;/strong&gt; repository in GitHub and made
sure that all of the repository was up there.  Now, in the future, I knew I would be more
selective than using &lt;strong&gt;git add –all&lt;/strong&gt; most of the time, but for now it was a good start.
So I carefully went through the files that GitHub listed and verified them manually
against what was in the directory.  I didn’t expect any issues, but a quick check helped
with my confidence that I had set up the repository correctly.&lt;/p&gt;
&lt;h2 id="pushing-the-output-to-the-remote"&gt;Pushing the Output To The Remote&lt;a class="headerlink" href="#pushing-the-output-to-the-remote" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once that was verified, I carefully
repeated the same actions with the &lt;strong&gt;blog-output&lt;/strong&gt; directory but with one small change.
In the &lt;strong&gt;blog-content&lt;/strong&gt; directory, I want to save any changes.  However, with the
&lt;strong&gt;blog-output&lt;/strong&gt; directory, I want to commit everything, ever if there are conflicts.
This is something that is done with quite a few static sites, so the workflow is decently
documented.&lt;/p&gt;
&lt;p&gt;As this is an action that I am going to repeat every time I publish, I placed in a script file
called &lt;strong&gt;pelican-upload.bat&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushd ..\blog-output
git add --all .
git commit -m "new files"
ssh-agent
git push origin master --force
popd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order: switch to the &lt;strong&gt;blog-output&lt;/strong&gt; directory, add all of the files, commit them
with a simple reason, ensure the &lt;em&gt;ssh-agent&lt;/em&gt; is up and running, push the committed files
to remote repository, and go back to our original directory.&lt;/p&gt;
&lt;p&gt;If that last &lt;strong&gt;git push&lt;/strong&gt; looks weird, it is.  It is so weird and destructive that there are
a number of posts like
&lt;a href="https://evilmartians.com/chronicles/git-push---force-and-how-to-deal-with-it"&gt;git push –force and how to deal with it&lt;/a&gt; and
&lt;a href="https://blog.sensible.io/2012/10/09/git-to-force-put-or-not-to-force-push.html"&gt;GIT: To force-push or not to force-push&lt;/a&gt;.  However, even after I looked at the
&lt;a href="https://git-scm.com/docs/git-push"&gt;manual page for git push&lt;/a&gt;, I was still trying to figure
it out.  It wasn’t until I came across
&lt;a href="https://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/"&gt;The Dark Side of the Force Push&lt;/a&gt;,
and specifically the &lt;strong&gt;Force Push Pitfalls&lt;/strong&gt; section of that article, that things made
sense.&lt;/p&gt;
&lt;p&gt;Under&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new script&lt;/li&gt;
&lt;li&gt;run &lt;strong&gt;pelican-upload.bat&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="viewing-the-webpage"&gt;Viewing the Webpage&lt;a class="headerlink" href="#viewing-the-webpage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To make sure things looked right, I wanted to do a side by side comparison of what I could
see in my browser both locally and on the new website.  To do that, I opened up one tab
of my browser and pointed it to &lt;strong&gt;http://localhost:8000/&lt;/strong&gt;, and another tab beside it and
pointed it to &lt;strong&gt;https://jackdewinter.github.io/&lt;/strong&gt;.  To be honest, while I was hoping there
would be no issues, I was expecting at least 1-2 items to be different.  However, as I went
through the comparison, there was 100% parity between the two versions of the web site.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the beginning of this article, I had most of what I needed to start selecting a theme.
It took some small updates to the configuration to make sure I had a good test site available.
This was critical to allowing me to go through each theme I was interested in and see if it
was for what I was looking for.  While one of the themes proved to be a handful, the
experience was good in advising me of possible issues I might have in customizing my own site.&lt;/p&gt;
&lt;p&gt;In the end, I had a strong choice of the &lt;em&gt;elegant&lt;/em&gt; theme, which as benefits, is actively
being developed and has great documentation.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;</content><category term="static website generator"></category><category term="static site generator"></category><category term="websites"></category></entry><entry><title>Static Websites: Posting My First Article</title><link href="https://jackdewinter.github.io/2019/09/01/static-websites-posting-my-first-article/" rel="alternate"></link><published>2019-09-01T00:00:00-07:00</published><updated>2019-09-01T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-09-01:/2019/09/01/static-websites-posting-my-first-article/</id><summary type="html">
&lt;p&gt;This is the third article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With Pelican installed …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is the third article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With Pelican installed, it was time to start creating stuff.  The first I thing I wanted to do
was to figure out if the base site was good by creating a default site and viewing it in a
browser.  Then I wanted to come up with a very simple test article, publishing it and viewing
it to verify my ability to publish and exercise that workflow.  Finally, I wanted to take
some time to come up with a more representative test article and improve the publishing
workflows.&lt;/p&gt;
&lt;p&gt;Similar to the last article, this is not about leaping forward, but to take a decent
step forward in understanding the tools and processes.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please read &lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#operating-system-paths"&gt;Operating System Paths&lt;/a&gt; from the second article in
this series for my view on operating system pathing. (i.e. /mount/my/path vs. c:\my\path).
To understand the term &lt;strong&gt;base project directory&lt;/strong&gt; and the script text &lt;strong&gt;%%%MY_DIRECTORY%%%&lt;/strong&gt;,
please read the explanation under
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#step-2-create-a-project-directory-for-the-site"&gt;Step 2: Create a Project Directory For The Site&lt;/a&gt;, also from the
second article in this series.&lt;/p&gt;
&lt;h2 id="step-1-verify-our-basic-web-site"&gt;Step 1: Verify Our Basic Web Site&lt;a class="headerlink" href="#step-1-verify-our-basic-web-site" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing I wanted to do is to make sure I didn’t mess anything up in the last article,
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/"&gt;Setting Up the Pelican Static Site Generator&lt;/a&gt;.  Therefore,
it made
the most sense that I verify that my website was up and running before I added my first
article.  After doing some research, it was evident that there are two phases that I need to
take care of: building the content and viewing the content.&lt;/p&gt;
&lt;h3 id="step-1a-building-the-web-site-content"&gt;Step 1a: Building The Web Site Content&lt;a class="headerlink" href="#step-1a-building-the-web-site-content" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first article’s section on
&lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/#what-are-static-site-generators"&gt;Static Site Generators (SSGs)&lt;/a&gt; hopefully made it clear that
the focus of SSGs is to render the site content when updated.  In the second article,
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#step-4-create-a-generic-web-site"&gt;Setting Up the Pelican Static Site Generator&lt;/a&gt;, I created the
base configuration for a generic web site, but did nothing to build that content.
To build that content, I needed to find out how take the empty content and generate
the output files from it.&lt;/p&gt;
&lt;p&gt;Looking at some articles, I was drawn to the output of the &lt;strong&gt;pelican-quickstart&lt;/strong&gt; command
that generated the base configuration.  In particular, I noticed the prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I specifically answered &lt;em&gt;No&lt;/em&gt; because of my research.  If you answer &lt;em&gt;Yes&lt;/em&gt;, the template will
ask a number of additional questions related to publishing, and it will place the &lt;strong&gt;Makefile&lt;/strong&gt;
and &lt;strong&gt;tasks.py&lt;/strong&gt; in the &lt;strong&gt;website&lt;/strong&gt; directory.  As my primary machine is a Windows machine,
these two files are mostly useless.  Their primary value would be to instruct me on what I
needed to do to replicate their behavior on the command line or in Python.&lt;/p&gt;
&lt;p&gt;Thankfully, between the command &lt;strong&gt;pelican –help&lt;/strong&gt;, using the &lt;strong&gt;Makefile&lt;/strong&gt; for reference,
and experimentation, I was able to arrive that this command for building the web site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican --debug --output website\output --settings website\pelicanconf.py website\content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing too fancy.  I started Pelican in debug mode to have more information about what was
going on.  Using the above command, the output was placed in the &lt;strong&gt;website\output&lt;/strong&gt;
directory, the settings were retrieved from the &lt;strong&gt;website\pelcianconf.py&lt;/strong&gt; file, and the
content for the website is located in the &lt;strong&gt;website\content&lt;/strong&gt; directory.  I double checked
to make sure these were all correct, and it ran once without issue.  To make sure that I
didn’t lose this command, I created a simple script &lt;strong&gt;pelican-build.bat&lt;/strong&gt; in my base project
directory, with the above command being the only line in that file.&lt;/p&gt;
&lt;p&gt;Pelican generated a lot of output, but in the end, it looked like everything was okay.
I was excited to check out the new web site, so I used my web browser to
open the file &lt;strong&gt;website\output\index.html&lt;/strong&gt; and got this result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="initial view" src="https://jackdewinter.github.io/images/static-3/local_html.png" title="Initial Web Page View"/&gt;&lt;/p&gt;
&lt;p&gt;I must admit… it was kind of underwhelming.  And then I thought about it a bit.  A lot of
the stuff that makes web pages powerful are other parts that included by the web page,
and may not be loaded if the page is loaded directly from the file system.&lt;/p&gt;
&lt;p&gt;To properly view the content, I was going to have to host it somewhere.&lt;/p&gt;
&lt;h3 id="step-1b-viewing-the-web-site-content"&gt;Step 1b: Viewing The Web Site Content&lt;a class="headerlink" href="#step-1b-viewing-the-web-site-content" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are like me, hearing or thinking the words “I need to install my own web server” are not
exactly good words.  Even for a pared down web server, there are usually 3-6 directories to set
up, ports to clear with firewalls, and other little things.  I must admit, when I started
looking around, I was not exactly in a good mood.&lt;/p&gt;
&lt;p&gt;However, the first 3 web sites that talked about Pelican were from the Pelican project’s
various versions.  Looking deeper into the documentation, I found the part of the documentation
titled
&lt;a href="http://docs.getpelican.com/en/3.6.3/quickstart.html#preview-your-site"&gt;Preview Your Site&lt;/a&gt;.
Without taking too much away from the documentation, it specified that Python 3 includes a
pared down web server that is available for simple uses, like I needed.&lt;/p&gt;
&lt;p&gt;After a bit of experimentation and fiddling, and I came up with the following lines and placed
them in &lt;strong&gt;pelican-server.bat&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushd website\output
python -m pelican.server
popd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Executing that script, I then saw the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;XXX\python\python37-32\Lib\runpy.py:125: RuntimeWarning: 'pelican.server' found in sys.modules after import of package 'pelican', but prior to execution of 'pelican.server'; this may result in unpredictable behaviour
  warn(RuntimeWarning(msg))
WARNING: 'python -m pelican.server' is deprecated.
  | The Pelican development server should be run via 'pelican --listen' or 'pelican -l'.
  | This can be combined with regeneration as 'pelican -lr'.
  | Rerun 'pelican-quickstart' to get new Makefile and tasks.py files.
-&amp;gt; Serving at port 8000, server .
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is what the official documentation suggests, it does look like it is out of date.
Using the output from above, the installed &lt;strong&gt;Makefile&lt;/strong&gt; for guidance, and more
experimentation, I replaced the contents of the &lt;strong&gt;pelican-server.bat&lt;/strong&gt; file with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican -l -p 8000 --debug --output website\output --settings website\pelicanconf.py website\content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, the output of the script was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEBUG: Pelican version: 4.0.1
DEBUG: Python version: 3.7.3
DEBUG: Adding current directory to system path
DEBUG: Temporarily adding PLUGIN_PATHS to system path
DEBUG: Restoring system path
WARNING: Docutils has no localization for 'english'. Using 'en' instead.
-&amp;gt; Serving at port 8000, server .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To me, it looked like the web pages were served up properly, or at least Pelican didn’t report
any errors to the screen.  The only thing left was to actually see if it would allow me to
load the generated web site to my browser.  Instead of loading the file directly into the web
browser as before, I entered “localhost:8000” in the address bar.   To be honest, I took a
guess that &lt;strong&gt;server .&lt;/strong&gt; meant the localhost.&lt;/p&gt;
&lt;p&gt;This time, I got the following result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="local host view" src="https://jackdewinter.github.io/images/static-3/localhost.png" title="Localhost Web Page View"/&gt;&lt;/p&gt;
&lt;p&gt;Unstyled, no unique content, and only locally visible.  It’s not a great result… but
it’s a start!&lt;/p&gt;
&lt;h3 id="step-1c-commit-changes"&gt;Step 1c: Commit Changes&lt;a class="headerlink" href="#step-1c-commit-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before I went forward, I wanted to save the current state of the web site, so back to Git and
the &lt;strong&gt;git status -s&lt;/strong&gt; command, whose output was now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;?? pelican-build.bat
?? pelican-server.bat
?? website/__pycache__/
?? website/output/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my head, I compared these results to the changes I made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I added 2 script files to help me build and serve the content&lt;/li&gt;
&lt;li&gt;both file are detected, and I want them as source in my project&lt;/li&gt;
&lt;li&gt;I built the web site, placing the output into &lt;strong&gt;website/output&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the directory was detected, but I want to generate this output, and not persist it&lt;/li&gt;
&lt;li&gt;from previous experience, the &lt;strong&gt;website/&lt;strong&gt;pycache&lt;/strong&gt;/&lt;/strong&gt; contains
  &lt;a href="https://stackoverflow.com/questions/2998215/if-python-is-interpreted-what-are-pyc-files"&gt;pyc files&lt;/a&gt; that are built when the python scripts are interpreted&lt;/li&gt;
&lt;li&gt;the directory containing these files was detected, but these should never be persisted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using thought processes derived from what I documented in the section
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#step-5-committing-the-changes"&gt;Step 5: Committing the Changes&lt;/a&gt; from the previous article,
it was clear that I needed to &lt;strong&gt;git add pelican-build.bat&lt;/strong&gt; and &lt;strong&gt;git add pelican-server.bat&lt;/strong&gt;
to persist those changes.  However, the two items that I did not want to persist would require
different tacks for each one.  &lt;/p&gt;
&lt;p&gt;The first case, &lt;strong&gt;website/output/&lt;/strong&gt;, is a directory like the &lt;strong&gt;virtualenv&lt;/strong&gt; directory in
the section &lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#step-2-create-a-project-directory-for-the-site"&gt;# Step 2: Create a Project Directory For The Site&lt;/a&gt;
from the previous article.  Therefore, I edited the &lt;strong&gt;.gitignore&lt;/strong&gt; file to include the
directory by name.  That was the simple one.&lt;/p&gt;
&lt;p&gt;The second case was more complex, the &lt;strong&gt;website/&lt;strong&gt;pycache&lt;/strong&gt;/&lt;/strong&gt; directory.  This directory only
exists to contain compiled Python byte code designed to speed up execution on subsequent
passes. If I add the directory, as with the first case, it only takes care of that one
directory.  If I run any Python scripts from other locations, I will have to add those
directories too.  This was not an efficient option, hence I edited the &lt;strong&gt;.gitignore&lt;/strong&gt; file to
ignore the files themselves, by specifying &lt;strong&gt;&amp;amp;ast.pyc&lt;/strong&gt; as the pattern to ignore.&lt;/p&gt;
&lt;p&gt;Therefore, following those changes, the &lt;strong&gt;.gitignore&lt;/strong&gt; file looked like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv/
website/output/
*.pyc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;strong&gt;git status -s&lt;/strong&gt;, I verified that only the 2 scripts were being added, as well as the
&lt;strong&gt;.gitignore&lt;/strong&gt; file itself being changed.  Quickly adding &lt;strong&gt;git add .gitignore&lt;/strong&gt;, I then
used &lt;strong&gt;git commit -m “my message”&lt;/strong&gt; to commit these changes to the repository.&lt;/p&gt;
&lt;p&gt;So let’s take inventory.  We have a basic web site up and running, we have tested it in
our browser, and we have committed any changes to our local repository.  It’s definitely time
to write our first article.&lt;/p&gt;
&lt;h2 id="step-2-the-first-article"&gt;Step 2: The First Article&lt;a class="headerlink" href="#step-2-the-first-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking through the Pelican Documentation, I found another good section on
&lt;a href="http://docs.getpelican.com/en/4.0.1/content.html#writing-content"&gt;Writing Content&lt;/a&gt;.
From here, I learned that certain Markdown processors, such as the Python implementation,
support metadata on files.&lt;/p&gt;
&lt;p&gt;As a base example, they specify this as a sample post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Title&lt;/span&gt;: &lt;span class="nv"&gt;My&lt;/span&gt; &lt;span class="nv"&gt;super&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;
&lt;span class="nv"&gt;Date&lt;/span&gt;: &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;:&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="nv"&gt;Modified&lt;/span&gt;: &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;:&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="nv"&gt;Category&lt;/span&gt;: &lt;span class="nv"&gt;Python&lt;/span&gt;
&lt;span class="nv"&gt;Tags&lt;/span&gt;: &lt;span class="nv"&gt;pelican&lt;/span&gt;, &lt;span class="nv"&gt;publishing&lt;/span&gt;
&lt;span class="nv"&gt;Slug&lt;/span&gt;: &lt;span class="nv"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;
&lt;span class="nv"&gt;Authors&lt;/span&gt;: &lt;span class="nv"&gt;Alexis&lt;/span&gt; &lt;span class="nv"&gt;Metaireau&lt;/span&gt;, &lt;span class="nv"&gt;Conan&lt;/span&gt; &lt;span class="nv"&gt;Doyle&lt;/span&gt;
&lt;span class="nv"&gt;Summary&lt;/span&gt;: &lt;span class="nv"&gt;Short&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;feeds&lt;/span&gt;

&lt;span class="nv"&gt;This&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;super&lt;/span&gt; &lt;span class="nv"&gt;blog&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading further, a lot of the metadata fields have defaults, but the &lt;strong&gt;Title&lt;/strong&gt; metadata
is required for the page to be picked up and processed by Pelican.  That got some wheels
turning in my head, but I put it aside for a later article.  First I wanted to have a
solid way of writing the articles before adding to that.&lt;/p&gt;
&lt;p&gt;Taking the markdown content from above, I created a file in the &lt;strong&gt;website/content&lt;/strong&gt; directory
called &lt;strong&gt;test.md&lt;/strong&gt; and placed the content in there and saved it.  Following the same pattern
I used for the base content, I ran &lt;strong&gt;pelican-build.bat&lt;/strong&gt; and then &lt;strong&gt;pelican-server.bat&lt;/strong&gt; to
view the content, providing the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="first article view" src="https://jackdewinter.github.io/images/static-3/step-2-a-main.png" title="Bla blah"/&gt;&lt;/p&gt;
&lt;p&gt;Granted, its a stock article, but I now have a way to publish my articles!  However, along the
way, I noticed a couple of things I want to improve on.&lt;/p&gt;
&lt;h3 id="step-3a-a-more-streamlined-buildpreview-workflow"&gt;Step 3a: A More Streamlined Build/Preview Workflow&lt;a class="headerlink" href="#step-3a-a-more-streamlined-buildpreview-workflow" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the previous section, the workflow I used took 4 actions to go from something I wrote to
something I could see and validate: save the file, run &lt;strong&gt;pelican-build.bat&lt;/strong&gt;, run
&lt;strong&gt;pelican-server.bat&lt;/strong&gt;, and refresh the web page.  Wondering if there was a more efficient
way to do that, I checked back on the &lt;strong&gt;Makefile&lt;/strong&gt; that I used as the inspiration
for the two scripts, and noticed a &lt;strong&gt;devserver&lt;/strong&gt; entry.&lt;/p&gt;
&lt;p&gt;As the &lt;strong&gt;devserver&lt;/strong&gt; entry only differed from the &lt;strong&gt;server&lt;/strong&gt; entry by the introduction of
the &lt;strong&gt;-r&lt;/strong&gt; flag, I quickly created a &lt;strong&gt;pelican-devserver.bat&lt;/strong&gt; with that simple change,
and executed it.  Within seconds, I got the feedback:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CRITICAL: TypeError: can't pickle generator objects
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Weird error, but understandable.  In Python, the default serialization of objects to be passed
outside of executables is referred to as
&lt;a href="https://docs.python.org/3.7/library/pickle.html"&gt;pickling&lt;/a&gt;.  If Pelican was already hosting
the server and wanted to spawn a process to rebuild the web site, it would make sense that it
pass the current configuration to that new process.&lt;/p&gt;
&lt;p&gt;Doing a bit more searching, I came across
&lt;a href="https://github.com/getpelican/pelican/issues/2400"&gt;this issue&lt;/a&gt; logged against the Pelican
project in GitHub.   There are a fair number of entries for this issue, offering various
pieces of advice.  The low down for me is that due to the way pickling works, I cannot use it
on my Windows machine with that given program.  Reading further in the comments for the issue,
a number of people did mention that the &lt;strong&gt;-r&lt;/strong&gt; flag works fine when applied to the command I
am using for building the pages, just not for building the pages from the server.&lt;/p&gt;
&lt;p&gt;Trying it out, I renamed &lt;strong&gt;pelican-devserver.bat&lt;/strong&gt; to &lt;strong&gt;pelican-autobuild.bat&lt;/strong&gt;, and switched
the file contents to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican -r --output website\output --settings website\pelicanconf.py website\content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on what I read, this should have my desired effect, and a quick modification of the
&lt;strong&gt;test.md&lt;/strong&gt; file confirmed it.  When I saved the file, the generator detected it and
rebuilt the contents.  However, thinking through things a bit more, I wondered if the
&lt;a href="https://ss64.com/nt/start.html"&gt;Windows start&lt;/a&gt; command would help build a better solution.&lt;/p&gt;
&lt;p&gt;When I write a Windows batch file and I need to execute another batch file, I use the
&lt;strong&gt;call&lt;/strong&gt; primitive.  This allows me to run the new batch file within the current batch file’s
shell.  When that new batch file completes, I can check the return code from that script, and
determine what action, if any, to do next.  By structuring batch files and scripts this way,
I find that I assemble things together more quickly, keeping the batch files and scripts
more readable and more maintainable.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;start&lt;/strong&gt; primitive is almost identical to the &lt;strong&gt;call&lt;/strong&gt; primitive, with one small
exception: the new program is started in a newly created shell spawned from the current shell.
As the current shell and the new shell are separate processes, by default, both shells operate
independently of each other, unless the &lt;strong&gt;/wait&lt;/strong&gt; flag is specified.  While this is not ideal
for composing batch files, this behavior seemed to fit what I was trying to achieve.&lt;/p&gt;
&lt;p&gt;Creating a new version of the &lt;strong&gt;pelican-devserver.bat&lt;/strong&gt; file, I placed within it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@echo off
start pelican-autobuild.bat
start pelican-server.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And executed the batch file.  Two full size shell windows popped up, each one running one
of the scripts, with the original shell window left alone.  A new modification to the
&lt;strong&gt;test.md&lt;/strong&gt; file resulted in the rebuild happening in the window running
&lt;strong&gt;pelican-autobuild.bat&lt;/strong&gt;.  A quick refresh of the browser page, and the newly changed article
appeared in the browser.&lt;/p&gt;
&lt;p&gt;I was mostly where I needed the script to be.  Further tweaking the contents of &lt;strong&gt;pelican-devserver.bat&lt;/strong&gt; to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@echo off
start "Builder-Pelican" /min pelican-autobuild.bat
start "Server-Pelican" /min pelican-server.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;got me to where I wanted to be. To keep things clean, I wanted to specify a title for each
shell window and I wanted to start them minimized.  Thus, by default both windows are out of
the way, but if I need them, I can find them quickly.&lt;/p&gt;
&lt;p&gt;Side Note: If you are using this as a guide, note that this only seems to be an issue on
Windows machines.  In quick tests I did using an Ubuntu image running under Docker, I did
not see this issue, and the served pages updated properly.&lt;/p&gt;
&lt;h3 id="step-3b-a-more-representative-test-article"&gt;Step 3b: A More Representative Test Article&lt;a class="headerlink" href="#step-3b-a-more-representative-test-article" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I noticed about my test article is that it was short.  Really short.  When
I posted it, it was hard to notice where the test article was being summarized, and where
it was just the article.  I needed to come up with a test article that would be a better
representation of an actual article.  For that, I dug back into my testing experience.&lt;/p&gt;
&lt;p&gt;When coming up with test information for test projects, I have used the site
&lt;a href="https://www.lipsum.com/"&gt;Lorem Ipsum&lt;/a&gt; and sites like it for years. The site goes into more
details, but by using this text it allows someone viewing the text to focus on what is around
the text instead of the text itself.  This is also better than using random words, as someone
viewing that random text may try and find patterns in the paragraphs, once again distracting
from what is around the text.&lt;/p&gt;
&lt;p&gt;After a couple of quick clicks on the site, and it generated 5 decent sized paragraphs of
random text that started with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eget velit porta, efficitur justo at, sagittis nulla. Donec neque arcu, condimentum sed massa a, elementum rhoncus justo.
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I didn’t include all 5 paragraphs here, as it was randomly generated.  If you are using
this as a guide, you can easily generate your own test paragraphs and insert them into
your test message.  However, when the page was regenerated, this is what it looked like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="first article view" src="https://jackdewinter.github.io/images/static-3/test-lorem-ipsum.png" title="Bla blah"/&gt;&lt;/p&gt;
&lt;p&gt;Also, to give a bit of contrast, I created a copy of the page, called it &lt;strong&gt;test-2.md&lt;/strong&gt;,
changed the title a bit, and removed all except the first two paragraphs.  My reasoning
behind this was to make sure I had a sample that was long and a sample that was short.&lt;/p&gt;
&lt;h3 id="step-3c-commit-the-changes"&gt;Step 3c: Commit The Changes&lt;a class="headerlink" href="#step-3c-commit-the-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As always, before moving on, I needed to make sure I committed the changes.  This one
was easy, simply performing the &lt;strong&gt;git add&lt;/strong&gt; action on the files &lt;strong&gt;test.md&lt;/strong&gt;,
&lt;strong&gt;pelican-autobuild.bat&lt;/strong&gt;, and &lt;strong&gt;pelican-devserver.bat&lt;/strong&gt;, followed by a &lt;strong&gt;git commit&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the beginning of this article, I only had the foundation for a basic web site.  The first
thing I did was to make sure I had a good workflow for generating the web site and viewing
it in a browser as a web site.  After that, I added a sample article, and also improved the
original build/preview workflow.  Finally, I created more realistic data for the test
article, so I could see what a normal article would look like.&lt;/p&gt;
&lt;p&gt;As for the goal of creating a test article that I could use to start fine-tuning the site,
I believe I am in a good place.  So next, fine-tuning and selecting a theme!&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I need to clean up a couple of small things before selecting a theme for the website.
Getting a solid choice for a theme is the last major task I have to complete before
publishing the web site itself.  Completing this last major task will be covered in the next
post &lt;a href="https://jackdewinter.github.io/2019/09/08/static-websites-getting-ready-for-publishing-themes-and-minutiae/"&gt;Getting Ready For Publishing - Themes and Minutiae&lt;/a&gt;.&lt;/p&gt;</content><category term="static website generator"></category><category term="static site generator"></category><category term="websites"></category></entry><entry><title>Static Websites: Setting Up the Pelican Static Site Generator</title><link href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/" rel="alternate"></link><published>2019-08-25T00:00:00-07:00</published><updated>2019-08-25T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-08-25:/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/</id><summary type="html">
&lt;p&gt;This is the second article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is the second article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous article, I decided that the Pelican
&lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/#which-one-to-choose"&gt;Static Site Generator (SSG)&lt;/a&gt; was the right
choice for me.  This article goes through the steps that I took in setting up Pelican
on my system, providing a play-by-play for anyone thinking of doing the same thing.
Feel free to use this as a guide for setting up your own web site to experiment with.
If you are not using this as a guide, I hope it provides you with any details that you
require for regarding Pelican and it’s setup.&lt;/p&gt;
&lt;p&gt;From my experience, it is more important for me to make a small step forward and lay a good
foundation for what comes next than it is to take leaps and bounds and miss things.  Hence,
I feel that focusing on the setup of Pelican is a good and properly scoped step.&lt;/p&gt;
&lt;h3 id="why-another-pelican-how-to-guide"&gt;Why Another Pelican How-To-Guide?&lt;a class="headerlink" href="#why-another-pelican-how-to-guide" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In looking around, there was a real mish-mash of articles out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;Making a Static Blog with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spapas.github.io/2013/10/07/pelican-static-windows/"&gt;Using pelican to generate static sites on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://seanazlin.com/creating-a-blog-on-GitHub-dot-io-with-Python.html"&gt;Creating a Blog on GitHub.io with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chdoig.github.io/create-pelican-blog.html"&gt;Creating your blog with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;How to Create Your First Static Site with Pelican and Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first thing that was obvious to me was that all of the Pelican posts I found were written
in 2017 or earlier.  This means that these articles refer to versions of Pelican before
the current 4.0.1 release that I am running, so they are either out of date or inaccurate.&lt;/p&gt;
&lt;p&gt;The second thing that was obvious was there were very few posts written about using Pelican
on a Windows machine.  According to the site
&lt;a href="https://www.netmarketshare.com/operating-system-market-share.aspx"&gt;NetMarketShare.com&lt;/a&gt;,
Windows machines account for over 87% of the desktop machines surveyed.  While it is true
(from experience) that developers prefer Macs over Windows, projects like
&lt;a href="http://wsl-guide.org/en/latest/"&gt;WSL&lt;/a&gt; are starting to chip away at those reasons.  And it
still remains that for a non-developer, Windows is by far the most common machine type.
As it is my primary environment, I want to make sure it is represented.&lt;/p&gt;
&lt;h3 id="component-versions"&gt;Component Versions&lt;a class="headerlink" href="#component-versions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are using this as a guide, you may try versions of any listed component other than
those specified, but note that
&lt;a href="https://www.urbandictionary.com/define.php?term=ymmv"&gt;Your Mileage May Vary&lt;/a&gt;.  This
article was written from my detailed notes of how I set up my web site, using the
component versions listed.  As such, if you experience any issues, I would fall back to
those versions as an established baseline.&lt;/p&gt;
&lt;p&gt;If you would like to try other versions of components, I strongly encourage you to go
to the baseline established in this article and commit it to your local repository
(see &lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/#Step-5"&gt;Step 5: Committing the Changes&lt;/a&gt; below).  Once you
have that point set and committed, you can then try and use other versions of the
components, having a known state to return to.  Regardless, keep detailed notes about what
you try, and if you find yourself in a bad state, fall back to one of your previous known
states and try again.&lt;/p&gt;
&lt;h3 id="operating-system-paths"&gt;Operating System Paths&lt;a class="headerlink" href="#operating-system-paths" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From long experience as a developer, there is virtually no sematic difference
between pathing that is meaningful.  Windows uses a format of &lt;strong&gt;C:\this\is\my\directory&lt;/strong&gt;
and Linux systems use &lt;strong&gt;/my-mount/this/is/my/directory&lt;/strong&gt;.  I personally work on both types
of systems equally and do not have any issues switching back and forth between them.  &lt;/p&gt;
&lt;p&gt;One reason that I enjoy using Python over PowerShell, Bat/Cmd, and *Sh shells, is that I can
properly obfuscate any such issues in my code.  Python scripts can easily be written that
are platform agnostic, eliminating duplicated scripts to handle platform issues.  Add in to
that additional support from editors such as VSCode and PyCharm, and it becomes a powerful
scripting language with some real muscle behind it.&lt;/p&gt;
&lt;p&gt;While I realize others may feel differently, I expect the reader to be able to perform the
same translation task while reading, with practice if required.&lt;/p&gt;
&lt;h2 id="step-1-install-pre-requisites"&gt;Step 1: Install Pre-requisites&lt;a class="headerlink" href="#step-1-install-pre-requisites" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is one pre-requisite for Pelican itself, and that is having Python 3.7 installed with
a current version of Pip.  The information in this post was generated with
&lt;a href="https://www.python.org/downloads/release/python-373/"&gt;Python 3.7.3&lt;/a&gt; and
&lt;a href="https://pip.pypa.io/en/stable/#"&gt;Pip 19.1.1&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;As I have a great habit of
&lt;a href="https://www.urbandictionary.com/define.php?term=fat-fingering"&gt;fat fingering&lt;/a&gt; commands,
I prefer to keep most of my files in a version control system, specifically
&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;.  While I use &lt;a href="https://www.sourcetreeapp.com/"&gt;Source Tree&lt;/a&gt; as a
graphical interface to Git, I realize most people use the command line.  Therefore, for the
purpose of any examples, I will use the Git command line interface, assuming that anyone
reading this who uses a Git GUI can find the appropriate command in their GUI if needed.&lt;/p&gt;
&lt;p&gt;The commands I will be using in this article are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-init"&gt;git init&lt;/a&gt; - Create an empty git repository.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-status"&gt;git status&lt;/a&gt; - Working tree status of the current
  repository.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-add"&gt;git add&lt;/a&gt; - Add a new file to the working tree.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-commit"&gt;git commit&lt;/a&gt; - Commit any changes to the working tree
  to the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are new to Git or need a refresher, please go to the links about and do some searching
online for examples.   These are some of the base concepts of Git, and should be understood
before proceeding.&lt;/p&gt;
&lt;p&gt;With respect to how to install Python and Git/SourceTree, there is plenty of information on how
to install those programs for each platform.  Please google
&lt;a href="https://www.google.com/search?q=python+install&amp;amp;oq=python+install"&gt;Python install&lt;/a&gt;,
&lt;a href="https://www.google.com/search?q=git+install&amp;amp;oq=git+install"&gt;Git install&lt;/a&gt;, and
&lt;a href="https://www.google.com/search?q=sourcetree+install&amp;amp;oq=sourcetree+install"&gt;SourceTree install&lt;/a&gt;
for the best installation instructions for a given platform.  For the Windows system I am
using, I simply downloaded the installations from the web sites linked to in the previous 2
paragraphs.&lt;/p&gt;
&lt;p&gt;After installing Python on my system, the installation of required packages was very
simple.  At the command prompt, I entered the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pip==19.1.1 virtualenv==16.6.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two packages installed were the Pip Package Manager itself and the virtualenv package.
The first installed package, pip, makes sure that Python’s own package manager is at the
specified version.  While pip does not often change meaningfully and I am not planning on
using any new features, it usually pays to keep things current.  &lt;/p&gt;
&lt;p&gt;The second one is a virtual environment system for Python.
&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt; is a Python tool that allows you to
isolate a given Python project.  While it is not portable between different systems, it does
provide for a manner in which to isolate different versions of Python and different versions
of Python packages from each other.  Using virtualenv will allow me to install a specific
versions of Python and each package with no fear of any global changes affecting this project.&lt;/p&gt;
&lt;p&gt;To verify that I have the correct version of pip and virtualenv installed, I executed
each tool with the &lt;strong&gt;–version&lt;/strong&gt; parameter, expecting to see output similar to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;XXX&amp;gt; pip --version
pip 19.1.1 from XXX\lib\site-packages\pip (python 3.7)
XXX&amp;gt; virtualenv --version
16.6.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these pre-requisites were installed, I was ready to create a directory to host
the content for the web site.&lt;/p&gt;
&lt;h2 id="step-2-create-a-project-directory-for-the-site"&gt;Step 2: Create a Project Directory For The Site&lt;a class="headerlink" href="#step-2-create-a-project-directory-for-the-site" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before generating content, I needed to create a place to install Pelican that was
isolated and self-contained.  As mentioned in the previous section, that is exactly the use
case that the Virtualenv program was created for.  That is the first of the two tools that I
needed to set up for the new directory.&lt;/p&gt;
&lt;p&gt;The other tool is version control, to ensure I can replicate and version the web site.  For
this purpose, I use Git. The first thing this accomplishes is to ensure that if the computer
hosting the web site content gets destroyed, I still have the latest information about the
web site.  The other thing that this accomplishes is to ensure that if I make a change
(or two, or three) to the web site that I don’t like, I can always return back to previous
versions of any of the documents.&lt;/p&gt;
&lt;p&gt;That out of the way, I selected a directory as a location of the web site.  In my case, I keep
all of my local Git repositories in a directory &lt;strong&gt;c:\enlistments&lt;/strong&gt;, so I created the directory
I wanted to keep the web site in was &lt;strong&gt;c:\enlistments\blog-content&lt;/strong&gt;.  The location is totally
arbitrary, so for the sake of clarity, if I refer to this directory indirectly, I will use the
term &lt;strong&gt;base project directory&lt;/strong&gt;.  If I refer to this directory directly in a script, I will use
the pattern %%%MY_DIRECTORY%%%.&lt;/p&gt;
&lt;p&gt;To create the base project directory, I executed the following commands in order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir %%%MY_DIRECTORY%%%
cd %%%MY_DIRECTORY%%%
git init
virtualenv virtualenv
virtualenv\scripts\activate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order of execution, the commands first create a directory and then changed the current
directory to that directory.  Once the base project directory was created, &lt;strong&gt;git init&lt;/strong&gt;
was used to create an empty Git repository with nothing in it, ready for the project to
populate.  Next, &lt;strong&gt;virtualenv virtualenv&lt;/strong&gt; was used to create a virtual environment for the
web site, housing that environment in the &lt;strong&gt;virtualenv&lt;/strong&gt; directory of the project.&lt;/p&gt;
&lt;p&gt;Finally, the activate script of &lt;strong&gt;virtualenv&lt;/strong&gt; was executed to enable the virtual environment.
The script &lt;strong&gt;activate.bat&lt;/strong&gt; on my Windows platform (&lt;strong&gt;activate.sh&lt;/strong&gt; on Linux platforms)
performs two simple tasks: change the shell’s path to use the virtual environment AND change
the path to make sure that change is evident.  To be sure, I checked the &lt;strong&gt;PATH&lt;/strong&gt; environment
variable to make sure it starts with the Python path of the project’s virtual environment
and that the prompt started with &lt;strong&gt;(virtualenv)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that while I used &lt;strong&gt;git init&lt;/strong&gt; to create a local repository, I was still getting
started with the project.  As such, I didn’t need to worry about ensuring that the local
repository is reflected in a remote repository.  At that point, the purpose of having the
local repository was to ensure that I could see what changed and revert back to previous
versions if needed.&lt;/p&gt;
&lt;p&gt;If you are using this as a guide, please note that from this point forward, any commands that
I entered were entered in the virtual environment shell. If for some reason you close your
shell and need to restore the shell to where you were, you will need to open a new shell and
submit the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd %%%MY_DIRECTORY%%%
virtualenv\scripts\activate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had a good directory ready to go, but I had one small issue to fix.  When I submitted the
&lt;strong&gt;git status -s&lt;/strong&gt; command, I encounter the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;?? virtualenv/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As mentioned above, the virtual environment is specific to a given operating system and
version of Python.  Because of this, committing the &lt;strong&gt;virtualenv&lt;/strong&gt; directory to Git didn’t
make sense, as it contains system specific information.  Luckily, this issue was
easily addressed by creating a file in the base directory called &lt;strong&gt;.gitignore&lt;/strong&gt; with the
contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The format of &lt;a href="https://git-scm.com/docs/gitignore"&gt;.gitignore&lt;/a&gt; is pretty simple to understand.
In my case, I only wanted to ignore the &lt;strong&gt;virtualenv&lt;/strong&gt; directory off the base project
directory, so I just needed to add that directory to the .gitignore file.  Submitting the
&lt;strong&gt;git status -s&lt;/strong&gt; command again, I then saw the output of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;?? .gitignore
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This showed me that Git is ignoring the entire &lt;strong&gt;virtualenv&lt;/strong&gt; directory, instead showing
the &lt;strong&gt;.gitignore&lt;/strong&gt; file that I just created.  Since I have only done limited setup in the
base project directory, having only the &lt;strong&gt;.gitignore&lt;/strong&gt; file showing up as untracked is what
I expected. To be safe, I used the &lt;strong&gt;git add&lt;/strong&gt; and &lt;strong&gt;git commit&lt;/strong&gt; commands to save
these changes as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .gitignore
git commit -m "initial commit"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The directory was ready, time to focus on Pelican.&lt;/p&gt;
&lt;h2 id="step-3-install-pelican"&gt;Step 3: Install Pelican&lt;a class="headerlink" href="#step-3-install-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican itself is installed as a package using Python’s Pip program.  Based on information
from &lt;a href="http://docs.getpelican.com/en/4.0.1/install.html#optional-packages"&gt;Pelican’s Installing page&lt;/a&gt;,
both the &lt;strong&gt;markdown&lt;/strong&gt; and &lt;strong&gt;typogrify&lt;/strong&gt; package are useful, so I installed them as well.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;markdown&lt;/strong&gt; package allows for content authoring with Pelican using using Markdown.
Using a simple text file, special annotations can be placed in the text that alter how it
will look when rendered with a Markdown processor.  The full range of Markdown annotations
and their effects are
&lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;shown here&lt;/a&gt;.  As this is
one of the requirements I established in
&lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/#is-a-static-site-generator-the-right-choice-for-me"&gt;the previous page&lt;/a&gt;, this support was critical.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://pypi.org/project/typogrify/"&gt;Typogrify package&lt;/a&gt; “cleans” up the text to make it
look more professional.  It accomplishes this by wrapping certain blocks of text in HTML span
tags to allow for CSS styling. In addition, it replaces certain sequences of characters with
other sequences that add polish to the finished document.  While not required to get the site
up and running, I figured it would be of use later.&lt;/p&gt;
&lt;p&gt;To install these three packages, I submitted the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican==4.0.1 markdown==3.1.1 typogrify==2.0.7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This resulted in the installation of any dependent packages, is essence, going from the
stock packages (displayed using &lt;strong&gt;pip list&lt;/strong&gt;) of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Package    Version
---------- -------
pip        19.1.1
setuptools 41.0.1
wheel      0.33.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Package         Version
--------------- -------
blinker         1.4
docutils        0.14
feedgenerator   1.9
Jinja2          2.10.1
Markdown        3.1.1
MarkupSafe      1.1.1
pelican         4.0.1
pip             19.1.1
Pygments        2.4.2
python-dateutil 2.8.0
pytz            2019.1
setuptools      41.0.1
six             1.12.0
smartypants     2.0.1
typogrify       2.0.7
Unidecode       1.0.23
wheel           0.33.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure that I would be able to keep these libraries at their current versions in the
future, I needed to take a snapshot and save it with the repository.  Thankfully, this is a scenario that the Pip contributors though of.  On the command line, I typed in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command produces a terse list of each package and it’s version, which I redirected into
the file &lt;strong&gt;requirements.txt&lt;/strong&gt;.  The benefit to doing this is that, at any time, I can execute
the following command to restore the packages and versions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="step-4-create-a-generic-web-site"&gt;Step 4: Create a Generic Web Site&lt;a class="headerlink" href="#step-4-create-a-generic-web-site" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that Pelican is installed and ready to go, I needed to enact the templating system of
Pelican to form the basis of my web site.  The authors of Pelican have kept this simple.
All I needed to do is run the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During the installation, I was asked a number of questions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.] website
&amp;gt; What will be the title of this web site? Jack's Web Site
&amp;gt; Who will be the author of this web site? Jack De Winter
&amp;gt; What will be the default language of this web site? [English]
&amp;gt; Do you want to specify a URL prefix? e.g., https://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; What is your time zone? [Europe/Paris] America/Los Angeles
&amp;gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) n
Done. Your new project is available at %%%MY_DIRECTORY%%%\website
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a decent number of the questions, the defaults were sufficient.  The questions that I
answered specifically were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;website directory&lt;/li&gt;
&lt;li&gt;keep the web site isolated in a subdirectory, for future use&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;something simple for now&lt;/li&gt;
&lt;li&gt;author&lt;/li&gt;
&lt;li&gt;my name here&lt;/li&gt;
&lt;li&gt;url prefix&lt;/li&gt;
&lt;li&gt;No, we can change this later&lt;/li&gt;
&lt;li&gt;time zone&lt;/li&gt;
&lt;li&gt;I didn’t know this, so I entered in something silly, and it gave me an URL to a web page
    where I looked it up&lt;/li&gt;
&lt;li&gt;generate&lt;/li&gt;
&lt;li&gt;no, I will provide simple scripts for that&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When this was completed, my base directory had a new directory &lt;strong&gt;website/&lt;/strong&gt; which
contained 2 files and 2 directories.  The first file &lt;strong&gt;pelicanconf.py&lt;/strong&gt; had the settings that
I entered using &lt;strong&gt;pelican-quickstart&lt;/strong&gt;.  The second file &lt;strong&gt;publishconf.py&lt;/strong&gt; has any
remaining settings that Pelican will use when publishing.  If things change with the web site,
I just need to change the settings in these files, and the next time I publish, they will be
in effect.&lt;/p&gt;
&lt;p&gt;The 2 directories are the key here.   The &lt;strong&gt;content&lt;/strong&gt; directory was created to contain any
files that are the source parts of the web site.  During the publishing action (covered in a
subsequent post), Pelican will translate that content into output and place it in the
other directory that was created, &lt;strong&gt;output&lt;/strong&gt; directory.&lt;/p&gt;
&lt;h2 id="step-5-committing-the-changes"&gt;Step 5: Committing the Changes&lt;a class="headerlink" href="#step-5-committing-the-changes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, it was useful to use &lt;strong&gt;git add&lt;/strong&gt; and &lt;strong&gt;git commit&lt;/strong&gt; to commit what I did
to the local Git repository, as there was useful progress.  Entering the
&lt;strong&gt;git status -s&lt;/strong&gt; command, it reported that the only meaningful changes were that the
&lt;strong&gt;website&lt;/strong&gt; directory and the &lt;strong&gt;requirements.txt&lt;/strong&gt; file were added.  As both of these objects
are considered source and configuration, I added them as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add requirements.txt
git add website
git commit -m "Base website"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there was something that was added that was not part of source, configuration, or
documentation for the web site, I would have edited the &lt;strong&gt;.gitignore&lt;/strong&gt; file to include
a pattern that cleanly removed those changes from Git’s preview.  When this comes up
in future articles in this series, I will point out what I added and why.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having decided that SSGs were the correct paradigm for my web site, and Pelican the correct
SSG for me to use, it was time to set it up.  I documented how I installed various
components, as well as how I set up the base project directory for the web site itself.
Finally, I created a default web site as a solid foundation for my purposes, and made
sure that I committed the base project directory to Git for version control.&lt;/p&gt;
&lt;p&gt;In my professional career, most of the time it is advantageous to build a foundation for
your application, committing it to version control often.  Having provided that foundation
in this article, I can now proceed with the actual building of the web site.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I will start with publishing a simple file to the web site and make sure I check it
online for any errors.  By providing realistic samples and getting experience with the
publishing workflows, I will get invaluable information on using Pelican. This task will
be covered in the next post &lt;a href="https://jackdewinter.github.io/2019/09/01/static-websites-posting-my-first-article/"&gt;Posting My First Article&lt;/a&gt;.&lt;/p&gt;</content><category term="static website generator"></category><category term="static site generator"></category><category term="websites"></category></entry><entry><title>Embracing Something Hard</title><link href="https://jackdewinter.github.io/2019/08/18/embracing-something-hard/" rel="alternate"></link><published>2019-08-18T00:00:00-07:00</published><updated>2019-08-18T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-08-18:/2019/08/18/embracing-something-hard/</id><summary type="html">&lt;p&gt;If you look at my &lt;a href="https://www.linkedin.com/in/jackdewinter/"&gt;LinkedIn profile&lt;/a&gt;, you&amp;rsquo;ll
see that I have been around for a while.  I was a Software Developer for many years
beginning in 1991 at a small 2 person company in Waterloo,  until a stint in Denmark
gave me a bit of a wakeup call …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you look at my &lt;a href="https://www.linkedin.com/in/jackdewinter/"&gt;LinkedIn profile&lt;/a&gt;, you&amp;rsquo;ll
see that I have been around for a while.  I was a Software Developer for many years
beginning in 1991 at a small 2 person company in Waterloo,  until a stint in Denmark
gave me a bit of a wakeup call.  When I came back to the United States in January 2011, I
changed from a Software Developer to a Software Developer in Test.&lt;sup id="fnref:SDET"&gt;&lt;a class="footnote-ref" href="#fn:SDET"&gt;1&lt;/a&gt;&lt;/sup&gt;  While I started my
career &amp;ldquo;making things that work&amp;rdquo;, after 20 years I was more focused on &amp;ldquo;making things work
better.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;That career change was a wonderful and happy change for myself that I have never looked back
negatively on.  &lt;strong&gt;Ed: Jenn, not sure how to phrase that last sentence.  Help?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To be specific, I am not a tester.  I do know a lot about testing, but that is not my primary
focus.  My focus is looking at interconnected systems and figuring out how to improve them.
It is not about breaking things, like a lot of people assume, but making the team around me
better.  It is about standing up and mentioning that having 5 developers struggle through the
same setup process for 4 days each is just plain inefficient.&lt;/p&gt;
&lt;p&gt;It is about standing up and mentioning that having 5 developers struggle through the same
setup process for 4 days each is just plain inefficient.  Solution: Add a responsibility for
documenting the setup process for the first person, with each subsequent person responsible for
the process of updating the document to current standards.  Benefits: The team owns the
process and its updating, with a clear path of responsibility if it doesn&amp;rsquo;t work the next time
it is used.&lt;/p&gt;
&lt;p&gt;It is about looking holistically at a group of systems and, while developers enjoy being
creative,  focusing that creativity on the parts of the systems that will benefit them and the
team the most.  Solution: Use templates and common libraries where possible to reduce the
amount of &amp;ldquo;creativity&amp;rdquo; needed for anything remotely common to as close to zero as possible.
Benefits: The team spends time on stuff that needs to be solved and not stuff that has already
been solved.&lt;/p&gt;
&lt;p&gt;It is about asking each member of the team what they expect of documentation from the
projects that their projects rely on.  Solution: Setup a set of &amp;ldquo;how-to&amp;rdquo; guides that documents
common practices for the documentation of projects for the team, hopefully with a &amp;ldquo;dummy&amp;rdquo;
project that gives a live interpretation of those guides.  Benefits:  The team writes a set
of documentation for their systems that looks like they were written by the same team, instead
of a mish-mash of people thrown together.&lt;/p&gt;
&lt;p&gt;My job is as much about asking the simple but tough questions, as it is about having an idea
on how to respond to both the questions and answers that follow those tough questions.&lt;/p&gt;
&lt;p&gt;The actual job is almost always about automation or process, it almost always involves changing
the way people look at things, and unfortunately it almost always includes having someone&amp;rsquo;s ego
bruised along the way.  Partially due to me having Autism, I can see certain patterns very
easily, almost as if I was reading a book.  Changing the way developers look at things almost
always brings around the bruised egos.  A lot of developers associate code they write with
themselves.  As such, saying that the code or process can be improved becomes confused with
saying that the developers themselves can be improved.&lt;/p&gt;
&lt;p&gt;And yes, when that happens, it is often the people asking the questions and making
suggestions on how to make things better that take the brunt of the anger that results.&lt;/p&gt;
&lt;p&gt;I still remember my daughter asking me one time why I liked being a software developer in test,
as I am often frustrated with people over a perceived lack of momentum.  Thinking about it
quickly, the immediate answer was easy: I am good at a decent portion of it.  If you are in a
box and looking around you, all you see is the box.  I am able to elevate my perspective to a
higher level and not only see the one box, but the boxes around it.  I can see how they are
stacked, and if they are looking like they will tip over.  That came second nature to me. But
it wasn&amp;rsquo;t the complete answer.&lt;/p&gt;
&lt;p&gt;Even as I responded with that answer to my daughter, there was something
missing in that answer, and it bothered me when I thought about that conversation over the next
couple of years.&lt;/p&gt;
&lt;p&gt;It was years later during one of those teaching moments we as parents have with our children
that it occurred to me.  I was reminding one of my children that we have a saying in our
family: being knocked flat on your ass is not the last step, it&amp;rsquo;s just the step before we pick
ourselves up, brush ourselves off, and try again.  Yeah, having issues and making mistakes
sucks, but they helped make us who we are, and it&amp;rsquo;s how we stand up again that defines us.&lt;/p&gt;
&lt;p&gt;It was then that I realized: I became a software developer in test because it was hard.  I
wanted the challenge to make things better, and to help others get better at what they were
doing.  I knew I was going to encounter stubborn people along the way, but I was determined
that I would try and figure out a way to get through to them.  Sure, I get knocked flat on my
rear end a fair number of times, but I always get back up and try again.&lt;/p&gt;
&lt;p&gt;And it wasn&amp;rsquo;t just the other people, it was myself.  I had to learn when to strive for
perfection and when to strive for &amp;ldquo;just good enough&amp;rdquo;.  I had to learn to find the balance
between what I felt was the right decision and what the right decision was for the business
right now.  I had to learn that while my own passion and vision were wonderful, unless I was
able to share those things in a way that others were receptive to, they meant nothing.  I
had to learn to get in a state of continuous learning.&lt;/p&gt;
&lt;p&gt;After all that time, I finally had my answer: I liked being a Software Developer in Test
because I was good at it and because it was a hard challenge that forced me to learn and grow.&lt;/p&gt;
&lt;p&gt;That takes me to the last couple of months.&lt;/p&gt;
&lt;p&gt;For a long time I have wanted to start my own blog and help out an open source project.  I was
under no illusion that either objective was going to be easy, I just didn&amp;rsquo;t have a clue about
how different it would evolve into from what I thought it originally was.&lt;/p&gt;
&lt;p&gt;As I was going through and picking out a platform for my blog, I kept notes and started to
turn them into articles.  That was relatively easy.  Or at least the first pass was.  I found
out that when it comes to articles, I want to make sure I am saying the right thing in the
right way, and can literally spend 45 minutes working on one sentence.   Shortly after that,
I also learned that I can spend 5 minutes getting said sentence in a way that makes sense,
add text a marker like &lt;code&gt;**TBD**&lt;/code&gt; before it, and then come back to it at the end of the article.
And yes, following that, I realized that about half the time, going downstairs and doing
something totally unrelated caused me to think of &lt;strong&gt;THE EXACT&lt;/strong&gt; phrase that I needed within
seconds of coming back after the break.  Yup, learning is fun, and hindsight is perfect!&lt;/p&gt;
&lt;p&gt;This blog isn&amp;rsquo;t hard in terms of writing for me, but the production of it sometimes gets me.
If you want to stay on track, you have to give yourself some kind of schedule.  For me it
was to publish once a week on something technical.  It is a challenge to always make sure you
have a couple of articles on the go at any time, and that you can polish one up and
publish it on a weekly basis.  I also have to balance the writing with exploring stuff so that
I can write about it in my blog.  And I realized I have to extend that out 4-6 weeks to give
me time to go through a good ideation process.&lt;/p&gt;
&lt;p&gt;In picking a theme for my website, my attention was drawn to the Elegant theme for its
simplicity and crispness.  Looking into the documentation a bit, I noticed that some things
were close, but not spot on.  I wanted to get one of those features working for my website,
so asking for some help getting it working, I changed the document to better document what
needed to be done.  The change was welcomed, and I volunteered to help out with any other
articles.  That is how I started contributing to the Elegant theme.&lt;/p&gt;
&lt;p&gt;What does it entail?  Take the work I am doing for my blog articles, subtract the subject
matter research, in certain cases add some localized research, and supplement that with making
sure I write the articles in a more professional and international. &lt;sup id="fnref:International-Tone"&gt;&lt;a class="footnote-ref" href="#fn:International-Tone"&gt;2&lt;/a&gt;&lt;/sup&gt;
On top of that, apply a bit of my developer in test training and try and make sure I have a
solid theme, and that I am making the process easier for me and other users of Elegant in the
process.&lt;/p&gt;
&lt;p&gt;For sure, doing these things at the same time can be nuts, but I am thoroughly enjoying the
challenge.  I am growing both personally and professionally as I work though things on each
project, some inside of my expertise and some outside of it.&lt;/p&gt;
&lt;p&gt;Sometimes I wish there were more hours in the day, but I wouldn&amp;rsquo;t trade the learning I am doing
for the world.&lt;/p&gt;
&lt;p&gt;Yeah, it&amp;rsquo;s quite often hard, but it wouldn&amp;rsquo;t be worth it if it wasn&amp;rsquo;t hard,
would it?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:SDET"&gt;
&lt;p&gt;In the United States, where I currently live, I am a Software Development Engineer in Test or SDET.  I do not have an engineering degree.  In any other country, including my native Canada, I am a Software Developer in Test or SDT.&amp;#160;&lt;a class="footnote-backref" href="#fnref:SDET" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:International-Tone"&gt;
&lt;p&gt;I will probably write an upcoming article about this to explain it fully.  In essence, if you are writing in English for an international audience, you have to remember that a fair percentage of your readers are not native English speakers.  Until they reach a point in their English proficiency, they will typically think in their native language and translate what they are reading from English to that native language.  As such, you want to keep your language as free from idioms and imprecision as possible.&amp;#160;&lt;a class="footnote-backref" href="#fnref:International-Tone" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content></entry><entry><title>Static Websites: Choosing a Static (Web) Site Generator</title><link href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/" rel="alternate"></link><published>2019-08-18T00:00:00-07:00</published><updated>2019-08-18T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-08-18:/2019/08/18/static-websites-choosing-a-static-web-site-generator/</id><summary type="html">
&lt;p&gt;This is the first article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Why do I …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is the first article in a series about setting up my own web site using a
Static Site Generator.  For other articles in the series, click on the title of the article
under the heading “Static Site Generators” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Why do I want a static web site?  &lt;/p&gt;
&lt;p&gt;It has been on my mind for a couple of years that I would like to talk about some of the
things that I find cool and other things that I feel strongly about.  As a big proponent of
&lt;a href="https://en.wikipedia.org/wiki/Servant_leadership"&gt;servant leadership&lt;/a&gt;, I want to help and
inspire people to do more, be more, and help more.&lt;/p&gt;
&lt;p&gt;Basically, I want a low-friction, easy to use platform that allows me to communicate with and
help others in my own way.  I also want tooling and workflows to be efficient so that I can
spend more time communicating and less time fidgeting on the web site.&lt;/p&gt;
&lt;p&gt;To this end, I want to focus on something that is simple, but extensible.  I want to be able
to have a good mix of my own pages and a blog, allowing for flexibility on what I am doing. I
want to be able to focus on the message and my voice, rather than the medium.&lt;/p&gt;
&lt;p&gt;From my research, Static Site Generators fulfils those requirements in spades.  But as with
a number of things I do, I want to take the time to determine if they are the right choice
for my web site, and if so, select the right one for me.  I would rather take a small
amount of time now to ensure it is a good fit, than to take time reworking things because it
wasn’t.&lt;/p&gt;
&lt;h2 id="what-are-static-site-generators"&gt;What are Static Site Generators?&lt;a class="headerlink" href="#what-are-static-site-generators" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Static Site Generators (SSGs) are programs that take a certain type of web site and shift
the heavy loading of the web site from the content-request point to the content-update point.
Put another way, the decision of what content to show the viewer of the web page is changed
from when the web page is requested by the browser to when the web page content is updated by
the author.  Therefore, to be eligible to use a SSG for a given web site, that web site must
have all its content available when the content is updated, with no real time content
present.  There are small ways to get around that restriction, but those present their own
challenges.  As such, I am going to assume that 95% of the web site is going to be static, and
that all the important information is within that 95%.&lt;/p&gt;
&lt;p&gt;SSGs themselves usually combine different technologies to achieve their results: writing,
templating/styling, metadata, and publishing.  The pages for the site need to be written in
either a supplied WYSIWYG editor or in some format like Markdown.  Once the pages are written,
generic styling and templating are applied to the collection of pages to make sure that the
branding on the pages is consistent.  To help organize the pages, most SSGs include some form
of metadata that is attached to the pages, used by the SSG to group pages and provide other
guidance to the SSG itself.  Finally, when the pages are checked over, there needs to be a
simple way to publish them to the intended web site.&lt;/p&gt;
&lt;p&gt;Reducing the barrier to entry and keeping it low is essential to a SSGs success.  Therefore
providing multiple technology choices for parts of the SSG is common.  All the SSGs that I
looked at had a variety of options for most of these technologies, with templating and styling
being the exception. In the case of templating, most of the SSGs support a single default
templating engine that is used on all the pages.  With respect to styling, common HTML
technologies such as Cascading Style Sheets (CSSs) are most commonly used.  Besides keeping
the cost of the templating and styling low, using a common technology allows for lots of
examples to be provided by the Internet at a low cost.&lt;/p&gt;
&lt;h3 id="is-a-static-site-generator-the-right-choice-for-me"&gt;Is a Static Site Generator The Right Choice For Me?&lt;a class="headerlink" href="#is-a-static-site-generator-the-right-choice-for-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In determining whether SSGs are the right technology for my site, I started making a list of
the things I was primarily worried about with a web site:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Security&lt;/p&gt;
&lt;p&gt;As I deal with security concerns at work, this one was top of mind.  How often have I
heard about various platforms and websites being hacked in the last month?  To avoid this,
I want to keep my web site as simple as possible.  Static pages created by a SSG leave a
single attack vector: the repository where my website’s HTML pages are being stored.&lt;/p&gt;
&lt;p&gt;Mitigating attacks by only having a single attack vector is very attractive solution for
me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ease Of Use&lt;/p&gt;
&lt;p&gt;I don’t want to be messing with the web site more than I have to.  I either want to be
updating something on the site in response to something I am working on, or working on that
thing. I am already used to writing documentation at work in Markdown, so writing web
pages in Markdown is already very efficient for me.  In a similar manner, at work I keep
documentation in a version control system, so keeping the pages in their various stages of
completion in a readable form in version control is also efficient.&lt;/p&gt;
&lt;p&gt;Using my already existing workflows, with minor modifications, is an acceptable
solution that keeps ease of use high.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real-Time Contents and User Input&lt;/p&gt;
&lt;p&gt;A lot of my focus at work is making sure that we can anticipate and plan for events that
happen to change our system’s state.  If a user or another system sends a request to our
system, can we validate the request, verify the system is in a good state for the request,
and enforce the correct behavior for the response?  Any good SSG takes care of this issue
by eliminating any change of state.&lt;/p&gt;
&lt;p&gt;Resolving the concerns of state management by removing all state information seems like an
ideal solution for the limited scope of my personal web site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once those were out of the way, only the big question remained:  Do I have any plans for a web
site that would require it to support dynamic content?  My primary purpose is to allow me
to communicate to interested readers.  As such, the sites’s content is largely going to
change only when I write something new and publish it.  Based on the 95% barrier I set for
myself above, such content appears to be will within that barrier.&lt;/p&gt;
&lt;p&gt;To handle the remaining 5%, I am fine with any dynamic content for my site being generated
using JavaScript.  A good example of that is using something like &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;
for dynamic comments.  By handling such things with a Javascript approach, I can keep the
simple things simple, only making things more complex when they need to be.  To me, that seems
to be a solid way to handle the few exceptions that may arise.&lt;/p&gt;
&lt;p&gt;For those reasons, I believe an SSG is an ideal choice for a personal web site with a blog.&lt;/p&gt;
&lt;h2 id="which-one-to-choose"&gt;Which One to Choose?&lt;a class="headerlink" href="#which-one-to-choose" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In case I need or want to do any extension work, I want the SSG to be in a language I am
comfortable with, maintaining the ease of use concern from the previous section.  At the
moment, that limits the SSG language to C#, Java, and Python.  While I can work effectively in
other languages, the comfort and enjoyment levels are not there.  As I am doing this for
myself, I want the writing of any extensions to be easy and fun to increase the chances that I
will stick with the writing and the SSG choice.&lt;/p&gt;
&lt;p&gt;Looking at a number of sites, these are the SSGs that appear the most.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Generator&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Last Updated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hugo&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href="https://gohugo.io/"&gt;https://gohugo.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;May 30, 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pelican&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href="http://blog.getpelican.com/"&gt;http://blog.getpelican.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;May 13, 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hexo&lt;/td&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;&lt;a href="https://hexo.io/"&gt;https://hexo.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jun 6, 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jekyll&lt;/td&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;&lt;a href="http://jekyllrb.com"&gt;http://jekyllrb.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jun 9, 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gatsby&lt;/td&gt;
&lt;td&gt;NodeJs&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/gatsbyjs"&gt;https://github.com/gatsbyjs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jun 9, 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(Note that the last updated column is current as of 2019-Jun-09.)&lt;/p&gt;
&lt;p&gt;Given these goals in mind, I looked through the choices for static site generators and decided
to go with Pelican.  It’s written in Python, has been maintained recently, any extensions are
written in Python, and seems to be easy to use.  This choice supports my desire to write pages
and articles in Markdown, and any needed extensions can be tweaked if needed.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the beginning of this article, I was intrigued by Static Site Generators and whether or not
SSGs would be an effective tool for me to communicate through.  During the article, I not
only determined that it was the right fit, but selected the Pelican as the SSG to use, based
on its Python coding and recent updating.&lt;/p&gt;
&lt;p&gt;I feel that this determination to use SSGs, and Pelican specifically, puts me in a good
position to start building my web site with confidence.&lt;/p&gt;
&lt;h2 id="if-you-are-trying-to-decide"&gt;If You Are Trying To Decide…&lt;a class="headerlink" href="#if-you-are-trying-to-decide" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are trying to decide if SSGs, or a specific SSG, will work for you and your site,
I would encourage you to walk through a similar process to what I did.  Figure out your own
concerns for your own web site, and determine whether or not an SSG will address those
concerns.  If you think you may write extension for it, take a look at the language of the SSG
and make sure you are familiar with the extension language.  Most importantly, figure out
whether your choice of SSGs in general or a specific SSG will serve as a tool for you to
publish your information, or whether it will be an impediment to you publishing.  &lt;/p&gt;
&lt;p&gt;From the point where I was at when I made the decision, Pelican appeared to be a good choice
for me.  I did some research to make sure this was the right choice for me.  Make sure you
ask yourself those questions, get those answers through research, and make sure your choice
is going to work for you!&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I need to start exploring Pelican and how to set it up with default content.  This will
be covered in the article
&lt;a href="https://jackdewinter.github.io/2019/08/25/static-websites-setting-up-the-pelican-static-site-generator/"&gt;Setting Up the Pelican Static Site Generator&lt;/a&gt;.&lt;/p&gt;</content><category term="static website generator"></category><category term="static site generator"></category><category term="websites"></category></entry><entry><title>Glanceable Displays: Setting Up Our Display</title><link href="https://jackdewinter.github.io/2019/08/04/glanceable-displays-setting-up-our-display/" rel="alternate"></link><published>2019-08-04T00:00:00-07:00</published><updated>2019-08-04T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-08-04:/2019/08/04/glanceable-displays-setting-up-our-display/</id><summary type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the fourth article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In the first …&lt;/p&gt;</summary><content type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the fourth article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In the first article,
&lt;a href="https://jackdewinter.github.io/2019/07/14/glanceable-displays-what-are-they/"&gt;Glanceable Displays: What Are They?&lt;/a&gt;,
I introduced the concept of a Glanceable Display, describing a number of things to consider
if you decided to embark on a project like this.  Assuming you decide to proceed, the article
&lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/"&gt;Glanceable Displays: Installing Raspbian on a Raspberry Pi&lt;/a&gt;
details how I went from an unformatted Raspberry Pi to one with the Raspbian
operating system installed.  As I prefer working from my own workstation, I also detailed
the setup of the SSH service on the Raspberry Pi to allow for remote connections.  Finally,
the article
&lt;a href="https://jackdewinter.github.io/2019/07/28/glanceable-displays-fine-tuning-a-raspberry-pi-installation/"&gt;Glanceable Displays: Fine Tuning A Raspberry Pi Installation&lt;/a&gt;
shows how I filled in a number of gaps that I encountered with the normal installation,
namely setting up a wireless connection with my network and ensuring the Raspberry Pi has
a solid understanding of the current time.&lt;/p&gt;
&lt;p&gt;Having taken all of those steps to be confident that setting up the actual display will work,
it is time to jump right in and set the display up.  But what is it actually that I was
setting up?&lt;/p&gt;
&lt;h2 id="what-are-our-displays-implementation-requirements"&gt;What Are Our Display’s Implementation Requirements?&lt;a class="headerlink" href="#what-are-our-displays-implementation-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes down to it, the articles in the series have been building up to this point.
I now have a glanceable display is a Raspberry Pi.  Upon boot, it will start a web browser
pointing at a specific webpage.  It’s that simple.  However, the devil is in the
requirements.&lt;/p&gt;
&lt;p&gt;The high level requirements for the display were covered in the first article in this series,
&lt;a href="https://jackdewinter.github.io/2019/07/14/glanceable-displays-what-are-they/#the-decisions-for-our-glanceable-display"&gt;Glanceable Displays: What Are They?&lt;/a&gt;.  What is left are the specific
requirements that will realize those high level requirements into an actual display, the
implementation requirements.&lt;/p&gt;
&lt;p&gt;The first implementation requirements, already fulfilled, is that any administration of the
machine
can be performed from my desktop.  With the exception of the Raspberry Pi seizing up, which
I have noticed from time to time, I should not have to touch the Raspberry Pi itself.  For
the most part, I will be running &lt;code&gt;sudo reboot&lt;/code&gt; to restart the machine, but all of that should
be done without the need to plug a keyboard into the Raspberry Pi.  &lt;/p&gt;
&lt;p&gt;The second implementation requirements is that after a reboot of the machine, I shouldn’t
need to plug in a keyboard and type some commands to get it started.  After the machine starts,
it should open a browser and display the page or pages that are
required. To be clear, on reboot with no keyboard and no mouse, the display should start by
itself.  The physical cost of plugging a keyboard into the machine kind of defeats the
“appliance” feel that I want it to have.&lt;/p&gt;
&lt;p&gt;The final implementation requirements is that, to the best extent possible, any processing of
what to show on
the display should be performed on a machine other than the Raspberry Pi.  While some of the
more recent machines have more power on them, I want to be able to use lower cost Raspberry Pi
machines for the display.  If I must also run scripts to pull information to generate
information for the display, it means I need a heftier machine.  While this may change later,
I believe that starting with the lower machine requirements is the right thing to do.&lt;/p&gt;
&lt;h2 id="installing-the-right-tools"&gt;Installing the Right Tools&lt;a class="headerlink" href="#installing-the-right-tools" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To make sure that I had the right browser and other utilities I needed, I ran the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install chromium-browser x11-xserver-utils unclutter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A lot of Raspbian installations will come with &lt;code&gt;chromium-browser&lt;/code&gt; package already installed,
but I included it for anyone following along.  The &lt;code&gt;x11-xserver-utils&lt;/code&gt; package has one or
two small utilities that will make the display look cleaner.  The &lt;code&gt;unclutter&lt;/code&gt; package allows
me to hide the mouse cursor after inactivity, perfect for a display where I know there will
be no mouse attached.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;When I was testing out the installation instructions, one of the things that made me include instructions on setting up a time server is the &lt;code&gt;apt-get&lt;/code&gt; command.  In certain cases, if your Raspberry Pi’s clock is too far in the past, you will not be able to access the right packages with &lt;code&gt;apt-get&lt;/code&gt;.  Please make sure your Raspberry Pi’s clock is current before using the &lt;code&gt;apt-get&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="creating-a-local-startup-file"&gt;Creating a Local Startup file&lt;a class="headerlink" href="#creating-a-local-startup-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default, Raspbian comes with a heavily modified version of the
&lt;a href="https://wiki.archlinux.org/index.php/LXDE"&gt;LXDE&lt;/a&gt; or “Lightweight X-11 Desktop Environment”.
According to
&lt;a href="https://developer.toradex.com/knowledge-base/how-to-autorun-application-at-the-start-up-in-linux#X11_Desktop"&gt;the documentation&lt;/a&gt;,
the startup configuration file for the &lt;code&gt;pi&lt;/code&gt; user needs to be
located at the path &lt;code&gt;/home/pi/.config/lxsession/LXDE-pi/autostart&lt;/code&gt;.  If it is not there, it
will default to the generic file located at the path &lt;code&gt;/etc/xdg/lxsession/LXDE-pi/autostart&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Following the advice of various articles, I elected to create a copy of the &lt;code&gt;autostart&lt;/code&gt; file
in my local directory.  That way, if something bad happened, I could always start from the
beginning again by copying the default file over again.  To accomplish this, I executed the
following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /home/pi/.config/lxsession/LXDE-pi/
cp /etc/xdg/lxsession/LXDE-pi/autostart /home/pi/.config/lxsession/LXDE-pi/autostart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To place the file in the proper directory, I performed a &lt;code&gt;mkdir&lt;/code&gt; command as the &lt;code&gt;LXDE-pi&lt;/code&gt;
directory did not exist with the clean Raspbian installation I was using.  Once I had the
directory created, I used the &lt;code&gt;cp&lt;/code&gt; command to copy the default version of the &lt;code&gt;autostart&lt;/code&gt;
file into that directory.  At that time, the file looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@lxpanel --profile LXDE-pi
@pcmanfm --desktop --profile LXDE-pi
@xscreensaver -no-splash
@point-rpi
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="starting-chromium-in-kiosk-mode"&gt;Starting Chromium In Kiosk Mode&lt;a class="headerlink" href="#starting-chromium-in-kiosk-mode" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that the local startup file was present, I needed to edit it with the command
&lt;code&gt;nano /home/pi/.config/lxsession/LXDE-pi/autostart&lt;/code&gt; to add my own startup commands. To
be honest, I tried a number of different things recommended by different articles, and each
one had good points and pad points.  In the end, I ended up with a simple addition to the
the &lt;code&gt;autostart&lt;/code&gt; file which was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@unclutter
@xset s off
@xset s noblank
@xset -dpms

@chromium-browser --incognito --start-maximized --disable-notifications --disable-extensions --disable-hang-monitor --disable-infobars --kiosk https://bingwallpaper.anerg.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As mentioned above, the &lt;a href="https://wiki.debian.org/unclutter"&gt;unclutter tool&lt;/a&gt; makes the mouse
disappear when not used, which is perfect for a display that is never going to have a mouse.
The &lt;a href="https://www.computerhope.com/unix/uxset.htm"&gt;xset tools&lt;/a&gt; allows for the setting of
various XWindows related settings.  Specifically, the &lt;code&gt;s&lt;/code&gt; setting is for the screen saver
and the &lt;code&gt;-dpms&lt;/code&gt; setting is for the monitor’s Energy Start features.  Finally, the Chromium
browser is the browser I chose to start with for displaying the webpages as it has the most
documentation on &lt;a href="https://www.computerhope.com/unix/uxset.htm"&gt;command line switches&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;When I say the most documentation on command line switches, look at the link.  The list is way too large to confidently comprehend.  As such, I had to take guesses as to which of the –disable switches I needed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In order, the changes I made to the configuration file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hide the mouse&lt;/li&gt;
&lt;li&gt;turn the screen saver off&lt;/li&gt;
&lt;li&gt;don’t blank the screen&lt;/li&gt;
&lt;li&gt;turn off any Energy Star power save monitor features&lt;/li&gt;
&lt;li&gt;start the browser (window maximized, incognito, in kiosk mode) pointing at the Bing wallpaper page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After I finished editing the file, I made sure to save the file (ctrl-X, &lt;code&gt;yes&lt;/code&gt;, enter), and
then double checked all of my changes.  When I confident I had all of them entered
correctly, I proceeded to the next step.&lt;/p&gt;
&lt;h2 id="verifying-things-are-working-properly"&gt;Verifying things are Working Properly&lt;a class="headerlink" href="#verifying-things-are-working-properly" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I issued a &lt;code&gt;sudo reboot&lt;/code&gt; to reboot the Raspberry Pi.&lt;/p&gt;
&lt;p&gt;And waited.&lt;/p&gt;
&lt;p&gt;And waited.&lt;/p&gt;
&lt;p&gt;And waited.&lt;/p&gt;
&lt;p&gt;If the repetition doesn’t make it clear, it felt like forever.  I was sure I had followed my
own instructions properly. Even going off of my own notes, there was the anticipation of
seeing whether or not it would work.  The Raspberry Pi I was using seemed slower than usual,
but after a while, everything started up and it was displaying the website
&lt;code&gt;https://bingwallpaper.anerg.com/&lt;/code&gt; in the browser.&lt;/p&gt;
&lt;p&gt;As I checked the display, I saw the mouse pointer disappear after a few minutes.  Check.&lt;/p&gt;
&lt;p&gt;After a couple of hours, the screen saver had not kicked in.  Check.&lt;/p&gt;
&lt;p&gt;After a couple of hours, the monitor was still displaying the website. Check.&lt;/p&gt;
&lt;p&gt;For the most part, due to some good notes that I kept, everything was up and running the way it
was supposed to.&lt;/p&gt;
&lt;h3 id="but-what-if-it-is-not"&gt;But What if it Is Not?&lt;a class="headerlink" href="#but-what-if-it-is-not" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first log file that I used to debug things was the &lt;code&gt;/home/pi/.xsession-errors&lt;/code&gt; file.
After executing the &lt;code&gt;cat /home/pi/.xsession-errors&lt;/code&gt; command, I noticed that while it didn’t
have a lot of useful information, it had two important pieces of information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;** Message: 17:00:13.893: main.vala:101: Session is LXDE-pi
** Message: 17:00:13.894: main.vala:102: DE is LXDE
** Message: 17:00:16.375: main.vala:133: log directory: /home/pi/.cache/lxsession/LXDE-pi
** Message: 17:00:16.376: main.vala:134: log path: /home/pi/.cache/lxsession/LXDE-pi/run.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This information let me know I was putting the changes in the right place, and where to look
for the log for the current user’s session: &lt;code&gt;/home/pi/.cache/lxsession/LXDE-pi/run.log&lt;/code&gt;. Also,
the fact that it was putting the logs in the &lt;code&gt;/home/pi/.cache/lxsession/LXDE-pi&lt;/code&gt; directory
meant that it noticed the &lt;code&gt;autostart&lt;/code&gt; file that I added, as was using it.  That was
a useful piece of verification.&lt;/p&gt;
&lt;p&gt;When I started looking at that file, I was at first overwhelmed before I found a couple of
tricks to help me out.  The first trick was to look for a file that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;** Message: 17:00:16.917: autostart.vala:42: Autostart path : /home/pi/.config/lxsession/LXDE-pi/autostart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Everything before that point is just the other parts of LXDE getting set up, and it really
didn’t have any effect on what I was trying to do.  After that line were a series of lines that
began with &lt;code&gt;Launching&lt;/code&gt;, corresponding with each line of the &lt;code&gt;autostart&lt;/code&gt; file.  The next section
of lines complemented those lines, providing for the exit codes of each of the lines in that
file.  Finally, there is a section starting with &lt;code&gt;Connecting ...&lt;/code&gt; that signifies the section
of the log where the wired and wireless link status is logged.  While the link status is
important, the fact that it gets to this point successfully generally means that the display
is ready to go!&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article detailed the work that was needed to take my Raspberry Pi from a sufficiently
set up machine to fulfilling 2 out of the 3 requirements of my a glanceable display.  After
noting some simple requirements for my glanceable display, I proceeded to add some tools to
the machine that were needed for the configuration changes that followed.  In case someone is
following what I am doing for their own glanceable display, I detailed some of the debugging
steps that I used to check to make sure that my configuration changes were working.&lt;/p&gt;
&lt;p&gt;Administration was already
enabled by
&lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/#step-5-setting-up-ssh-access"&gt;setting up SSH access&lt;/a&gt;,
satisfying the first implementation requirements.  The big step forward in this article was
satisfying the second implementation requirements by automatically launching a web browser
pointing to a specific webpage after rebooting the glanceable display.  &lt;/p&gt;
&lt;p&gt;This leaves the final implementation requirement to be completed: generating the display’s
content without&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the final article in this series,
&lt;a href="https://jackdewinter.github.io/drafts/glanceable-displays-what-do-i-want-to-display.html"&gt;Glanceable Displays: What Do I Want To Display?&lt;/a&gt;
I walk through the steps I took to determine where to get finalized webpages to display
in my glanceable display, while adhering to the final implementation requirement of my
glanceable display.&lt;/p&gt;</content><category term="Glanceable Displays"></category></entry><entry><title>Glanceable Displays: Fine Tuning A Raspberry Pi Installation</title><link href="https://jackdewinter.github.io/2019/07/28/glanceable-displays-fine-tuning-a-raspberry-pi-installation/" rel="alternate"></link><published>2019-07-28T00:00:00-07:00</published><updated>2019-07-28T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-07-28:/2019/07/28/glanceable-displays-fine-tuning-a-raspberry-pi-installation/</id><summary type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the third article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/"&gt;previous …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the third article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/"&gt;previous article&lt;/a&gt;,
I detailed the steps required to get the Raspbian (Linux) operating system installed on a
Raspberry Pi with remote access through
SSH enabled.&lt;/p&gt;
&lt;p&gt;This article attempts to move the needle forward by tackling a number of the issues that I had
in getting necessary foundation services up and running on my Raspberry Pi.  The two services
that I had issues with were: ensuring that Wi-Fi was working properly and that the Raspberry
Pi clock was being set properly.  Until I was confident that these two issues were resolved,
I was not confident that I would be able to use my glanceable display in it’s intended
location, as that location does not have any wired network access.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;As the steps in the previous article concluded with providing SSH access to the Raspberry Pi, I performed all of the following configuration using an SSH client.  While you are welcome to enter them through a keyboard directly connected to the Raspberry Pi, I did not test any of the steps in that manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;From the experience of reviewing and retrying these steps, &lt;code&gt;sudo reboot&lt;/code&gt; is a good friend. If it looks like something didn’t work and you think it should, consider using &lt;code&gt;sudo reboot&lt;/code&gt; to reboot the machine and carry on from there.  This is very handy when changing configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="step-1-wi-fi-access"&gt;Step 1: Wi-Fi Access&lt;a class="headerlink" href="#step-1-wi-fi-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unless you have the fortune of having a wired network outlet available near your display AND
enjoy the aesthetic of having a network cable going into your display, you most likely want
to use Wi-Fi to access your display.  Here are the steps I went though to get wireless access
enabled.&lt;/p&gt;
&lt;h3 id="step-1a-searching-for-existing-wireless-access"&gt;Step 1a: Searching for Existing Wireless Access&lt;a class="headerlink" href="#step-1a-searching-for-existing-wireless-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first command that I used to check for wireless network access was the &lt;code&gt;ifconfig&lt;/code&gt; command.
This is a general command used to determine what network connections are available.   I had a
network cable running into the machine, but nothing else, so the following response&lt;sup id="fnref:ellipses"&gt;&lt;a class="footnote-ref" href="#fn:ellipses"&gt;1&lt;/a&gt;&lt;/sup&gt;
was expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        ...
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it looks like gibberish to some, it was what I expected.  Linux systems often use the
tag &lt;code&gt;eth0&lt;/code&gt; for the first wired connection and the tag &lt;code&gt;lo&lt;/code&gt; for the loopback connection.  The
important thing I noticed was that I didn’t see a &lt;code&gt;wlan0&lt;/code&gt; tag, typically used for the first
wireless connection.  The clear observation I had was that the system did not currently have
a capability to have a wireless connection.&lt;/p&gt;
&lt;p&gt;This observation on a normal computer running Linux might be farfetched, but from information
gained researching the Raspberry Pi on various forums, it is relatively normal for a Raspberry
Pi to not have any wireless capability built-in.  As wireless components have recently become
cheaper, it seems like it is only the latest versions of the Raspberry Pi 3 have wireless
access built in.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I have not repeated these steps on a newer Raspberry Pi, but I would expect that doing so would allow me to skip the next section on installing the adapter.  I will update the article once I have tested that scenario.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="step-1b-installing-a-wireless-adapter"&gt;Step 1b: Installing a Wireless Adapter&lt;a class="headerlink" href="#step-1b-installing-a-wireless-adapter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In my instance, the machine I was configuring did not have any wireless capabilities built in.
That was resolved in short order by noting down the connection requirements for the household
router (WPA2-PSK (AES)) and purchasing an inexpensive USB Wi-Fi adapter from a nearby store.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If possible, use that store’s online presence to inspect the possible adapters, verifying 1-3 choices for adapters that meet the router’s specifications.  While not necessary, it can avoid round trips to the store to try and find the right adapter.  Doing this, I found that my local store had a TP-Link TL WN823N USB Adapter that was right for the job for $15.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Returning home from the store with an inexpensive TP-Link TL WN823N adapter, I powered off the
Raspberry Pi, installed the Wi-Fi adapter in one of the open USB slots, and powered up the
Raspberry Pi.  Once Raspbian had booted up, I reconnected to the machine using SSH and entered
the &lt;code&gt;lsusb&lt;/code&gt; command.  This command is similar to the &lt;code&gt;ls&lt;/code&gt; command to list files, but is used
to list various USB components that the machine has recognized.  The response I received from
that command was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bus 001 Device 006: ID 2357:0109 TP-Link TL WN823N RTL8192EU
Bus 001 Device 005: ID 0461:4e26 Primax Electronics, Ltd
Bus 001 Device 004: ID 0461:4d64 Primax Electronics, Ltd
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. SMC9514 Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seeing as the adapter I bought was a TP-Link TL WN823N, I was relieved to see it listed as
device 06.  At this point it was clear to me that the Raspberry Pi recognized the adapter, and
it was time to install the required drivers.&lt;/p&gt;
&lt;h3 id="step-1c-installing-the-wi-fi-drivers"&gt;Step 1c: Installing the Wi-Fi Drivers&lt;a class="headerlink" href="#step-1c-installing-the-wi-fi-drivers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From a research point of view, this was the most frustrating part of getting wireless access
working.  In most of the articles I researched, the authors seemed to assume that the drivers
for a given adapter would already be installed in the Raspbian distribution.  The few articles
I found that handled missing drivers were very specific, and not very helpful.  They often
used the Raspbian &lt;code&gt;apt-get&lt;/code&gt; family of commands to look for an adapter, and each adapter
I found seemed to have a slightly different way of making sure it worked properly.  As I
was writing down notes to help other people, that experience was far from helpful.&lt;/p&gt;
&lt;p&gt;Everything changed when my research led me to a reference to the
&lt;a href="https://www.umpah.net/raspberry-pi-security-cam-installing-motioneye/"&gt;Fars Robotics&lt;/a&gt;
driver install script.  This breaks down the process into the following three commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget http://www.fars-robotics.net/install-wifi -O /usr/bin/install-wifi
sudo chmod +x /usr/bin/install-wifi
sudo /usr/bin/install-wifi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of playing around with &lt;code&gt;apt-get&lt;/code&gt; commands and looking for a specific driver, this
script automated the process, finding the correct driver and installing it.  The commands
first download the script into the &lt;code&gt;/usr/bin&lt;/code&gt; directory, set it to be executable, and then
execute the script.  Within 60 seconds, it had completed, and it’s output suggested that the
driver for my TP-Link TL WN823N had installed successfully.&lt;/p&gt;
&lt;p&gt;To double check that it worked properly, I resubmitted the &lt;code&gt;ifconfig&lt;/code&gt; command and got the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.2.3  netmask 255.255.255.0  broadcast 192.168.2.255
        ...
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        ...
wlan0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great!  Progress!  The new Wi-Fi adapter was installed, the driver was connected, and Raspbian
was reporting that it could talk with it!  From experience, I now had to configure the machine
to connect to the wireless network.  From the output, this was somewhat obvious.  For the
&lt;code&gt;eth0&lt;/code&gt; and &lt;code&gt;lo&lt;/code&gt; adapters, there was a line beginning with &lt;code&gt;inet&lt;/code&gt; that described the current
IPv4 setup for that adapter.  As the &lt;code&gt;wlan0&lt;/code&gt; adapter was missing the &lt;code&gt;inet&lt;/code&gt; line (and also the
&lt;code&gt;inet6&lt;/code&gt; line), Raspbian could talk to the adapter, but the adapter was not connected to the
local Wi-Fi network.&lt;/p&gt;
&lt;p&gt;Next, configuring Wi-Fi access.&lt;/p&gt;
&lt;h3 id="step-1d-configuring-wi-fi-access"&gt;Step 1d: Configuring Wi-Fi Access&lt;a class="headerlink" href="#step-1d-configuring-wi-fi-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similar to the previous section on Installing the Wi-Fi Drivers, I found many articles on how
to do this by hand, each with its own little twist on how to set things up better.  In my case,
I wanted to go for repeatable and easy, and the &lt;code&gt;sudo raspi-config&lt;/code&gt; command used
&lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/#step-5-setting-up-ssh-access"&gt;to set up SSH access&lt;/a&gt;
proved to be the best solution.&lt;/p&gt;
&lt;p&gt;From the main menu, I selected &lt;code&gt;2 network options&lt;/code&gt; and then &lt;code&gt;N2 WiFi&lt;/code&gt;.  As it was my first time
setting up the network on this machine, I was prompted for my country, which I entered.  Next I
was prompted with &lt;code&gt;Please enter SSID&lt;/code&gt;, and I responded with my router’s SSID.  This was
followed with the inevitable &lt;code&gt;Please enter passphrase.  Leave it empty if none.&lt;/code&gt;, to which I
responded with my router’s password.  Hoping everything would work out, I pressed the &lt;code&gt;Next&lt;/code&gt;
button.&lt;/p&gt;
&lt;p&gt;After waiting for approximately 30 seconds, focus was returned to the main configuration
screen.  Exiting out of that screen and back to the main screen, executing the &lt;code&gt;ifconfig&lt;/code&gt; now
had the following response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eth0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.2.3  netmask 255.255.255.0  broadcast 192.168.2.255
        ...
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        ...
wlan0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.2.67  netmask 255.255.255.0  broadcast 192.168.2.255
        ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was what I was waiting for!  At the moment, the &lt;code&gt;eth0&lt;/code&gt; wired connection had an address of
192.168.2.3 and the &lt;code&gt;wlan0&lt;/code&gt; wireless connection had an address of 192.168.2.67.  The address
192.168.2.3 is the one I had been SSHing into while fixing up the Wi-Fi, so that lined up.
Based on my router’s configuration, 192.168.2.67 was a likely address for a new machine, so
that lined up.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;If you have your wireless network secured, make sure you follow the normal steps for adding a new machine to your network.  In my case, forgetting my normal steps cost me over an hour trying to figure out why the Raspberry Pi would not connect to the network!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To verify things were working, I repeated the relevant portions of
&lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/#step-5-setting-up-ssh-access"&gt;Step 5: Setting Up SSH Access&lt;/a&gt;
from the previous article, using the new address 192.168.2.67, instead of the old one
192.168.2.3.  Once this succeeded, the final test was to disconnect the physical connection and
see if the wireless connection worked.&lt;/p&gt;
&lt;p&gt;It did take a lengthy bit of time, and one trip to a local store for hardware, but it was
very gratifying being able to talk to the glanceable display over a wireless connection!&lt;/p&gt;
&lt;h2 id="step-2-system-clock-synchronization"&gt;Step 2: System Clock Synchronization&lt;a class="headerlink" href="#step-2-system-clock-synchronization" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the Raspberry Pi is a useful little machine, it’s small form causes it to not have a
component that many machine take for granted: a system clock.  Not having this set up for your
glanceable display can cause any display of time to be extremely off.  In addition,
if the Raspberry Pi’s time is not decently close to the actual time, the downloading of extra
components through mechanisms such as the &lt;code&gt;apt-get&lt;/code&gt; commands may fail.  To avoid these issues,
setting up proper system clock synchronization is a must.&lt;/p&gt;
&lt;h3 id="pre-requisite"&gt;Pre-Requisite&lt;a class="headerlink" href="#pre-requisite" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The list of servers and download locations for the &lt;code&gt;apt&lt;/code&gt; family of commands has most likely
changed since the Raspbian image was constructed.  If this is the case, any &lt;code&gt;apt&lt;/code&gt; commands
that require any kind of package updates will most likely fail.  To solve this before it
becomes an issue, I issued the following command to update those tables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="step-2a-installing-the-ntp-service"&gt;Step 2a: Installing the NTP Service&lt;a class="headerlink" href="#step-2a-installing-the-ntp-service" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The quickest and most efficient solution to solve the synchronization issue was to install the
NTP time service.  In the distribution of Raspbian that I was using, the NTP service was not
installed.  When I entered the command &lt;code&gt;sudo systemctl status ntp&lt;/code&gt;, I saw the following
output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unit ntp.service could not be found.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on various articles, the clear solution was to install the NTP service using &lt;code&gt;apt-get&lt;/code&gt;
with the following command: &lt;code&gt;sudo apt-get install ntp&lt;/code&gt;.  Once that finished, when I repeated
the &lt;code&gt;sudo systemctl status ntp&lt;/code&gt; command, I then received the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;● ntp.service - Network Time Service
   Loaded: loaded (/lib/systemd/system/ntp.service; enabled; vendor preset: enabled)
   Active: active (running) since ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, I was satisfied that the NTP service was up and running, but not that it was
working correctly.&lt;/p&gt;
&lt;h3 id="step-2b-diagnosing-the-ntp-service-configuration"&gt;Step 2b: Diagnosing the NTP Service Configuration&lt;a class="headerlink" href="#step-2b-diagnosing-the-ntp-service-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once the service was loaded, I needed to confirm that the NTP service was working properly.
The easy way to do this was to reboot the machine using &lt;code&gt;sudo reboot&lt;/code&gt; and then use the
&lt;code&gt;date&lt;/code&gt; command to check the date.  When I followed that pattern, the date was over 2 weeks
off from the actual time.  Time to go into debug mode.&lt;/p&gt;
&lt;p&gt;The documentation on the NTP service mentions a useful command: &lt;code&gt;ntpq -p&lt;/code&gt;.  This command
lists information about what the current NTP service is doing.   Presented as a series of
columns, the important column was the number of seconds since the service successfully
contacted a specific NTP server.&lt;/p&gt;
&lt;p&gt;When I checked the output of the command, I was greeted with the following table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
 0.debian.pool.n .POOL.          16 p    -   64    0    0.000    0.000   0.004
 1.debian.pool.n .POOL.          16 p    -   64    0    0.000    0.000   0.004
 2.debian.pool.n .POOL.          16 p    -   64    0    0.000    0.000   0.004
 3.debian.pool.n .POOL.          16 p    -   64    0    0.000    0.000   0.004
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the when column, the issue seemed to be that it was not able to connect to those
servers and get information about them.  Doing a bit of research, it turned out that other
people have had problems with the default servers for the NTP server, and there were ways
to address that.&lt;/p&gt;
&lt;h3 id="step-2c-changing-the-ntp-service-configuration"&gt;Step 2c: Changing the NTP Service Configuration&lt;a class="headerlink" href="#step-2c-changing-the-ntp-service-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that I had the NTP service installed and had issues with the default configuration, it
was time to look at it.  The configuration for the service is located in the file
&lt;code&gt;/etc/ntp.conf&lt;/code&gt;.  As I had found issues with the default configuration, I needed to learn
more about this configuration file to fix the problem.&lt;/p&gt;
&lt;p&gt;Looking at the file using a command like &lt;code&gt;more /etc/ntp.conf&lt;/code&gt; was daunting.  There were a
number of 1-2 line sections with multiple lines of comments before them.  When I saw that,
I was concerned.  In my experience, a large comment to useful line ratio means they are
commenting the heck out of it, because people have done stupid things in the past.&lt;/p&gt;
&lt;p&gt;Learning more about the configuration, it turned out that I only needed to look at one
particular section.  The most important part of the configuration is a section that started
with the follow text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# pool.ntp.org maps to about 1000 low-stratum NTP servers.  Your server will
# pick a different set every time it starts up.  Please consider joining the
# pool: &amp;lt;http://www.pool.ntp.org/join.html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right after this text, there was a group of servers specified where the first part of the
server name was a number between 0 and 3, and the rest of the server name was the same.  Many
of the articles I found didn’t touch the rest of the file, but focused on that small set of
lines.&lt;/p&gt;
&lt;p&gt;A very useful page I found during my research was the
&lt;a href="http://support.ntp.org/bin/view/Servers/NTPPoolServers"&gt;NTP Pool Time Servers&lt;/a&gt;
page.  Near the bottom of that page is a table that lists the various geographic areas,
from which I selected the &lt;code&gt;North America&lt;/code&gt; selection.  At the top of the next page was a
clearly marked section of text, with clear instruction to add that text to the &lt;code&gt;ntp.conf&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Given that information, I went back to the Raspbian machine, entered &lt;code&gt;sudo nano /etc/ntp.conf&lt;/code&gt;
to edit the &lt;code&gt;/etc/ntp.conf&lt;/code&gt; file, and replaced the default &lt;code&gt;debian&lt;/code&gt; servers in that section
with the information from the clearly marked section of the NTP Pool Time Servers page.
Followed up with &lt;code&gt;Ctrl-X&lt;/code&gt; to save, &lt;code&gt;y&lt;/code&gt; to save the file, &lt;code&gt;enter&lt;/code&gt; to use the provided file
name, and it was changed.   Just to make sure, I did another &lt;code&gt;sudo reboot&lt;/code&gt; after verifying my
changes, and the &lt;code&gt;date&lt;/code&gt; command now returned the right date.&lt;/p&gt;
&lt;h3 id="step-2d-verify-that-the-ntp-service-is-working"&gt;Step 2d: Verify that the NTP Service is Working&lt;a class="headerlink" href="#step-2d-verify-that-the-ntp-service-is-working" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;As a number of Denial-Of-Service attacks have used the NTP port to return bad information, a number of routers come pre-configured with their firewalls set to block port 119 and 123, the NTP ports.  If you follow these instructions and are still having issues, check the firewall settings for your computer and your router.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Previously, when I had checked the status of the NTP service using the &lt;code&gt;ntpq -p&lt;/code&gt; command,
I did not seeing anything other than &lt;code&gt;-&lt;/code&gt; in the when column of the output.  If things were
working properly, I would expect that column to change.&lt;/p&gt;
&lt;p&gt;Submitting the &lt;code&gt;ntpq -p&lt;/code&gt; command once the system rebooted, I got the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
-grom.polpo.org  127.67.113.92    2 u   21   64    1   59.302    9.614   6.053
+199.180.133.100 140.142.234.133  3 u   17   64    1   26.382    5.225   3.611
+time1-inapsales 216.218.254.202  2 u   17   64    1   41.043   -2.463   4.417
*vps5.ctyme.com  216.218.254.202  2 u   18   64    1   36.759   -5.673   2.870
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Submitting the command multiple times, I observed the when column values increasing to
a certain point before starting over at a low single digit number.  From the documentation,
this was a good indication that each of those servers was being queried successfully, then
registering itself for the next time to check against that server.&lt;/p&gt;
&lt;p&gt;Seeing the successful connections with the NTP servers, the time synchronization issues
were cleared up!  Just to be sure, I did a couple of cycles of &lt;code&gt;sudo reboot&lt;/code&gt; and checking
the time, with no errors.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article detailed the steps taken to fix two of the major issues I had after installing
Raspbian on my Raspberry Pi: the Wi-Fi access and the system clock being out of sync.  I worked
through the various steps taken to ensure that the wireless access was up and running,
including the various checks I did throughout the process.  I then walked through the steps
I took to ensure that the time on the Raspberry Pi was reflecting actual time, despite not
having an onboard system clock.&lt;/p&gt;
&lt;p&gt;With this accomplished, I had confidence in having firm foundations on which to start building
the display part of my glanceable display.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the next article in this series,
&lt;a href="https://jackdewinter.github.io/2019/08/04/glanceable-displays-setting-up-our-display/"&gt;Glanceable Displays: Setting Up Our Display&lt;/a&gt;
I walk through the steps I took to setup the Raspberry Pi to start the display upon boot
for the glanceable display.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:ellipses"&gt;
&lt;p&gt;In any of these examples, a set of ellipses (“…”) are used to denote that content was removed that was either sensitive or not relevant to the example being presented. &lt;a class="footnote-backref" href="#fnref:ellipses" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Glanceable Displays"></category></entry><entry><title>Glanceable Displays: Installing Raspbian on a Raspberry Pi</title><link href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/" rel="alternate"></link><published>2019-07-21T00:00:00-07:00</published><updated>2019-07-21T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-07-21:/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/</id><summary type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the second article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The methods detailed …&lt;/p&gt;</summary><content type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the second article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The methods detailed in this article provide for simple installation of the Raspbian
operating system using the
&lt;a href="https://www.raspberrypi.org/documentation/installation/noobs.md"&gt;New Out Of Box Software (NOOBS)&lt;/a&gt;
installation method, as suggested for beginners by the
&lt;a href="https://www.raspberrypi.org"&gt;Raspberry Pi site&lt;/a&gt;.  While there are more direct methods
for experienced users, the NOOBs installation was selected for it’s simplicity and ease of
installation.&lt;/p&gt;
&lt;p&gt;Using the NOOBs installation, this article details the first steps I took in setting up one of
my Raspberry Pi systems to be a glanceable display for my family.  Those steps start with the
formatting of a MicroSD card and installation of the NOOBs installer on to that MicroSD card.
After installing that card into the Raspberry Pi, the steps continue with the installation
of a stock Raspbian distribution, detailing the a couple of questions that need to be answered
to complete the installation.  Finally, to enable remote access, the last step is to ensure
that I can access the Raspberry Pi using SSH for later configuration and control.&lt;/p&gt;
&lt;h2 id="requirements"&gt;Requirements&lt;a class="headerlink" href="#requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi, version 3.0 or later&lt;/li&gt;
&lt;li&gt;Power Supply for Raspberry Pi&lt;/li&gt;
&lt;li&gt;Keyboard and Mouse&lt;/li&gt;
&lt;li&gt;HDMI cable connected to monitor&lt;/li&gt;
&lt;li&gt;Cat5 Ethernet cable&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Please keep your own notes as you go, and refer back to them.  While I have tested the steps on my own Raspberry Pi machines, they were by no means exhaustive tests.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="step-1-interfacing-with-a-microsd-card"&gt;Step 1: Interfacing With a MicroSD Card&lt;a class="headerlink" href="#step-1-interfacing-with-a-microsd-card" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The configuration and main drive for a Raspberry Pi is a MicroSD card.  To get the card
ready for use, your computer must be able to interface with the card.  &lt;/p&gt;
&lt;p&gt;Most computers do not come with MicroSD slots, but there are a fair number with SD slots.&lt;br/&gt;
To make things easier for MicroSD buyers, some of the more high
end MicroSD makers include a MicroSD-to-SD adapter in their packaging, such as
&lt;a href="https://www.amazon.com/gp/product/B06XWN9Q99"&gt;this 32GB MicroSD card from Amazon&lt;/a&gt;.  I started
out using this, but found that the adapter was only good for 3-4 uses, not for continual use.&lt;/p&gt;
&lt;p&gt;An alternative is a more multi-purpose adaptor, such as
&lt;a href="https://www.amazon.com/gp/product/B01KFXS83W"&gt;this multi-adapter from Amazon&lt;/a&gt;.  As it is
made from a more durable material, it will survive more uses.  The one that I bought from
Amazon at 7.00 USD is still working after about 70+ uses, so at 0.10 USD per use, it has
already paid for itself.  Also, as it has a USB adapter, I can plug it into a USB extension
cable that I already have on my desk.&lt;/p&gt;
&lt;p&gt;Whichever way you decide to go, make sure to add the MicroSD card to the adapter before
plugging the adaptor into you computer.  Once it is securely in the adapter, make sure to
apply it to the relevant slot on your computer firmly, and make sure the connection is there.
On my Windows 10 machine, I can tell this happens as it will acknowledge the connection by
opening up an Explorer window, with either a “please format” instruction or a list of any
files in the directory.&lt;/p&gt;
&lt;h2 id="step-2-getting-the-microsd-card-ready"&gt;Step 2: Getting the MicroSD Card Ready&lt;a class="headerlink" href="#step-2-getting-the-microsd-card-ready" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Note that the steps that follow are for my Windows 10 machine.  The
&lt;a href="https://www.raspberrypi.org/documentation/installation/noobs.md"&gt;NOOBs site&lt;/a&gt;, has sections for installing on Mac and Linux, but I did not test them.  If they do not work,please Google/Bing &lt;code&gt;linux microsd card format&lt;/code&gt; and &lt;code&gt;linux microsd card mount&lt;/code&gt;. Feel free to replace the generic &lt;code&gt;linux&lt;/code&gt; in the searches with the name of the Linux distribution that you are using.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="step-2a-reformatting-a-used-microsd-card"&gt;Step 2a: Reformatting a Used MicroSD Card&lt;a class="headerlink" href="#step-2a-reformatting-a-used-microsd-card" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reusing old hardware is important, for many reasons such as the environment and cost. To make
sure that is possible, it took me a number of tries to create a solid recipe for reformatting
the MicroSD cards.  As I mention in the &lt;code&gt;Requirements&lt;/code&gt; section, keep good notes of what you
do, or if following a recipe like this one, what changes you made to the recipe.&lt;/p&gt;
&lt;p&gt;While there is a command line only tool that will also do the job, I found it clunky and hard
to use.  Instead, the Disk Management applet for the control panel was the tool I settled on.
This can be invoked by typing &lt;code&gt;partition&lt;/code&gt; in the search window on the tool bar and selecting
the &lt;code&gt;create and format hard disk partitions&lt;/code&gt; item.&lt;/p&gt;
&lt;p&gt;Selecting that item brought up the &lt;code&gt;Disk Management&lt;/code&gt; window, showing a break down of
every drive connected to my computer.  When the MicroSD card was properly connected to the
computer, it showed up as Removable media after all of my permanent drives.  Using the right
mouse button, I clicked on each of the blocks on my MicroSD card and selected the
&lt;code&gt;Delete Volume&lt;/code&gt; menu item until all of the volumes were gone.  When that was accomplished, I
was left with two blocks, and right clicking on the rightmost block presented me with a
&lt;code&gt;Delete Partition&lt;/code&gt; menu item, which consolidated all of the partitions into a single
unallocated block.&lt;/p&gt;
&lt;p&gt;From there, I was able to right click on the Unallocated partition to select the
&lt;code&gt;Create Volume&lt;/code&gt; menu item.  This started a simple wizard that quickly walked me through
the options for creating a new volume.  I used all defaults that were presented with the
exception of the &lt;code&gt;file system&lt;/code&gt; and &lt;code&gt;quick format&lt;/code&gt; settings.  I changed the &lt;code&gt;file system&lt;/code&gt;
setting to &lt;code&gt;FAT32&lt;/code&gt; and unchecked the &lt;code&gt;Use Quick Format&lt;/code&gt; checkbox, before clicking on
finish and waiting for about 30 minutes before the format was complete.&lt;/p&gt;
&lt;h3 id="step-2b-formatting-a-new-microsd-card"&gt;Step 2b: Formatting a New MicroSD Card&lt;a class="headerlink" href="#step-2b-formatting-a-new-microsd-card" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From a Windows 10 point of view, this was easy.  When the MicroSD card was properly connected
to my computer, it prompted me to format the card, presenting me with the format dialog
itself.  When formatting the MicroSD card, it was important to select &lt;code&gt;FAT32&lt;/code&gt; as the type
of format and to unselect &lt;code&gt;Quick Format&lt;/code&gt; on the dialog.  Once I clicked the format button,
it took a good while before it was completed.  As a rough estimate, I guessed that it was
roughly 1 minute per gigabyte on the MicroSD card, regardless of computer speed.&lt;/p&gt;
&lt;h2 id="step-3-install-raspbian-lite-using-noobs"&gt;Step 3: Install Raspbian Lite Using NOOBS&lt;a class="headerlink" href="#step-3-install-raspbian-lite-using-noobs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;When the format is finished from the previous step, it is important to go to your taskbar and eject the media from your computer.  I accomplished this by right clicking on the USB stick icon and selecting “Eject Mass Storage Device” from the menu.  At that point, I cleanly removed the adaptor and the MicroSD card from the computer to ensure the ejection was complete. When I tested various scenarios, any time that I forgot to eject the media at this point, it did not take later on.  &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The people behind the Raspberry PI made sure there is a simple to use installation system
that simplifies the task of installing operating systems on to the Raspberry Pi.  The
&lt;a href="https://www.raspberrypi.org/documentation/installation/noobs.md"&gt;New Out Of Box Software (NOOBS)&lt;/a&gt;
site aims to allow a fairly basic installation of Raspberry Pi operating systems with
little effort.  Unless you are familiar with Linux systems, their installation can be
very daunting, so it is best to keep the installation as simple as possible.&lt;/p&gt;
&lt;p&gt;To start that process, I downloaded the
&lt;a href="https://downloads.raspberrypi.org/NOOBS_latest"&gt;NOOBS zip file&lt;/a&gt; from their web site
to my computer.  After reinserting the MicroSD card and adapter to my computer, I then unzipped
the contents of the &lt;code&gt;NOOBS_V3_2_0.zip&lt;/code&gt; file to the root of the drive for the MicroSD card.
I had to take care to ensure that the contents were in the root of the drive, not in a
subdirectory of the drive.  This happened enough times that I actually unzipped the files to
a local directory and just used XCOPY to copy the files over, solving the placement problem
for myself.&lt;/p&gt;
&lt;p&gt;As with the note at the start of this section, once this action was done, I once again ejected
the USB device before disconnecting it from the computer, for the same reasons.&lt;/p&gt;
&lt;p&gt;Taking the MicroSD card, I found the MicroSD port on the Raspberry Pi.  The port is flat with
the motherboard of the Raspberry Pi, and the cases I have all have a hole in the case to
make it easy to find.  Inserting the card into the port, I then attached the other cables for
monitor (HDMI), ethernet (Cat5), keyboard (USB), and mouse (USB), with the 5V adapter cable
being last.&lt;/p&gt;
&lt;p&gt;Two minutes later, I was presented with a screen which prompted me to select the operating
system to install.  I tried a number of times to get the &lt;code&gt;Raspbian Lite&lt;/code&gt; install to work, but
encountered a number of issues, so I defaulted to the stock &lt;code&gt;Raspbian [RECOMMENDED]&lt;/code&gt; install.
Once I made this choice, I selected &lt;code&gt;Raspbian [RECOMMENDED]&lt;/code&gt; from the top of the list in the
NOOBs installation dialog, followed by pressing the &lt;code&gt;Install&lt;/code&gt; button at the top.  From there,
it took about 30 minutes or so before I was prompted with a dialog box that said:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OS(es) installed successfully
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I pressed the &lt;code&gt;OK&lt;/code&gt; button on that dialog, the system rebooted with first a rainbow
screen, then a screen with a big raspberry on it, then lots of text scrolling by quickly.
After a relatively small amount of action and a lot of waiting, it was now time to set up
the operating system for simple uses!&lt;/p&gt;
&lt;h2 id="step-4-initial-system-setup"&gt;Step 4: Initial System Setup&lt;a class="headerlink" href="#step-4-initial-system-setup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was a lot of text that scrolled by so quickly, I was unable to read it.  From what
I could see, there were a lot of green OK texts on the left side, so I guessed that the
installation had succeeded.  After a nice round of blinking lights from the Raspberry Pi,
the desktop showed up and proceeded to walk me through the setup configuration.&lt;/p&gt;
&lt;p&gt;The first dialog was pretty simple, with the title &lt;code&gt;Welcome to Raspberry Pi&lt;/code&gt;.  The important
thing to note off of this dialog is at the bottom right of the dialog is the IP address that
the system currently has assigned to it.  As this was important, I wrote it down, and
proceeded with the rest of the configuration.  &lt;/p&gt;
&lt;p&gt;The configuration is a series of simple dialogs, each giving a clear indication of what is
required.  Whenever I pressed the &lt;code&gt;Next&lt;/code&gt; button, it wrote the information to the system
configuration files.  As such, I expect delays between when I pressed the &lt;code&gt;Next&lt;/code&gt; button and
when the next dialog showed up.  Turns out that was a rather healthy expectation.&lt;/p&gt;
&lt;p&gt;Some of the things that were setup were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;li&gt;time zone&lt;/li&gt;
&lt;li&gt;setting a new password&lt;/li&gt;
&lt;li&gt;take care of black border&lt;/li&gt;
&lt;li&gt;update software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having tested this workflow, I knew that the next workflow for my glanceable display would
include updating existing packages and installing new packages.  As such, I skipped the
update software, knowing I would do it later.  Both paths produce the same results, so feel
free to skip it like I did, or update at a later point.  &lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;If you forget the password that you change it to, there is no easy way to recover what you changed the password to.  Consider creating a &lt;em&gt;fake&lt;/em&gt; entry in a password manager, like LastPass, and storing the password there for later use.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="step-5-setting-up-ssh-access"&gt;Step 5: Setting Up SSH Access&lt;a class="headerlink" href="#step-5-setting-up-ssh-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That being accomplished, the last thing to complete before stopping the installation of the
bare bones system was to enable SSH access. By enabling SSH access, I could sit at my
comfortable workspace, using my normal computer, chair, and desk instead of at the workbench
where I had the Raspberry Pi connected.  Frankly, the computer was connected in an almost
Frankenstein like mess of wires on an old desk with a chair that was normally reserved for
people visiting, not typing. My own workspace looked very inviting.&lt;/p&gt;
&lt;p&gt;To enable access, I entered the command &lt;code&gt;sudo raspi-config&lt;/code&gt;, selecting
&lt;code&gt;5. Interfacing Options&lt;/code&gt;, then selecting &lt;code&gt;P2 SSH&lt;/code&gt;, and finally answering Yes to the question
&lt;code&gt;Would you like the SSH server to be enabled?&lt;/code&gt;.  After this, the computer took about 30
seconds before being responsive again, with the text &lt;code&gt;The SSH server is enabled.&lt;/code&gt; appearing
on the screen.  Pressing the enter key, and then selecting &lt;code&gt;Finish&lt;/code&gt;, I was then back at the
command prompt.&lt;/p&gt;
&lt;p&gt;This was the moment I was working towards: being able to have a bare bones system to use that
I could access from my own computer.  Entering &lt;code&gt;sudo reboot&lt;/code&gt;, I waited about 45 seconds for
the system to reboot and to be greeted with the &lt;code&gt;raspberrypi login:&lt;/code&gt; prompt.  Looking just
above that text, I saw the text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ OK ] Started OpenBSD Secure Shell server.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gave me a bit of confidence to move forward.  At the very least, the operating system
was indicating that it should allow SSH access.  At the command line, I entered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh pi@192.168.2.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and with the exception of the input &lt;code&gt;yes&lt;/code&gt; to answer the question, the output was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The authenticity of host '192.168.2.3 (192.168.2.3)' can't be established.
ECDSA key fingerprint is SHA256:`some text here`.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.2.3' (ECDSA) to the list of known hosts.
...
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;After each repeated installation on the same Raspberry Pi, when I went back to open a new SSH connection, it would report the error &lt;code&gt;WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&lt;/code&gt;.  To allow access, I needed to edit the &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; file and remove the line for the IP address of the machine, as indicated at the end of the provided error message.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article detailed the steps taken to install the Raspbian operating system on a MicroSD
card.  It started by my formatting of the MicroSD card and copying the NOOBs installer onto
the card, followed by inserting it into the Raspberry Pi’s MicroSD slot.  The steps continued
with the largely automated installation of the operating system, only requiring the answers
to six questions on my part.  Finally, it concluded with the setup for SSH to allow me to
configure the Raspberry Pi remotely.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the next article in this series,
&lt;a href="https://jackdewinter.github.io/2019/07/28/glanceable-displays-fine-tuning-a-raspberry-pi-installation/"&gt;Glanceable Displays: Fine Tuning A Raspberry Pi Installation&lt;/a&gt;,
I walk through the steps I took to move the installation from a bare bones system, to one that
had Wi-Fi and time support set up properly.&lt;/p&gt;</content><category term="Glanceable Displays"></category></entry><entry><title>Glanceable Displays: What Are They?</title><link href="https://jackdewinter.github.io/2019/07/14/glanceable-displays-what-are-they/" rel="alternate"></link><published>2019-07-14T00:00:00-07:00</published><updated>2019-07-14T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-07-14:/2019/07/14/glanceable-displays-what-are-they/</id><summary type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the first article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article …&lt;/p&gt;</summary><content type="html">&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the first article in a series about Glanceable Displays and my efforts to create
one for my household.  For other articles in the series, click on the title of the article
under the heading “Glanceable Displays” on the right side of the webpage.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article, I will introduce the concept of glanceable displays and describe how they can
be used in an everyday office or home.  I will then discuss how the audience for the
display is important, including a side bar about my opinion on Spousal Acceptance Factor.
Understanding the limitations of your audience is also covered, leading up to developing a set
of definitions on what should be displayed.&lt;/p&gt;
&lt;p&gt;Finally, I will talk about how my family followed those steps to arrive at the requirements
for our glanceable display, which has buy in from every member of our household.&lt;/p&gt;
&lt;h2 id="what-are-glanceable-displays"&gt;What Are Glanceable Displays?&lt;a class="headerlink" href="#what-are-glanceable-displays" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;According to &lt;a href="https://www.dictionary.com/browse/glanceable"&gt;Dictionary.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 noting or relating to information on an electronic screen that can be understood quickly or at a glance:
glanceable data;
a glanceable scoreboard.&lt;/p&gt;
&lt;p&gt;2 enabling information on a screen to be quickly understood:
a glanceable design;
glanceable interfaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In essence, a glanceable display is a display that provides information that can be quickly
understood by people reading the display.  An important qualification of these displays is
that the information they display needs to have a broad degree of applicability without any
ability for a specific reader to customize the data to their needs.&lt;/p&gt;
&lt;p&gt;As the display must provide information with no personal customization, it is important to
think about various things up front.&lt;/p&gt;
&lt;h2 id="who-is-the-display-for"&gt;Who Is the Display For?&lt;a class="headerlink" href="#who-is-the-display-for" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The audience of the display will drive many of the other choices for the glanceable
display.  &lt;/p&gt;
&lt;p&gt;Be honest about who the real audience is for your glanceable display, and what benefits that
audience will gain from the display.   Negotiate with the audience members and make sure that
there is something on the display for each member.  If possible, engage with those members to
help with the display so their work becomes part of the display, fostering interest from the
beginning.  The key is for your project to make the jump from “my toy project” to
“our useful project”, solving real world issues with real world requirements.&lt;/p&gt;
&lt;p&gt;If you are not honest about your audience and communicated with them sincerely, you will
invariably end up missing your goals for the display.   Without these, your base requirements
will not be correct, and your final product will not be correct.  If you only want
the display for your personal office, it is perfectly acceptable for you to say that you are
the sole audience and geek out on the display.  That is, it is acceptable if you are honest
about that audience.  In that case, just be realistic and don’t expect people you didn’t
include in your original audience to appreciate your display.  After all, you made it just for
you!&lt;/p&gt;
&lt;h3 id="spousal-acceptance-factor"&gt;Spousal Acceptance Factor&lt;a class="headerlink" href="#spousal-acceptance-factor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As an aside, I have often heard of concerns from people about something they made having a
low SAF or Spousal Acceptance Factor.  I honestly think that is silly.  If there is a low SAF,
it probably means that someone did something where their spouse was either not consulted on not
considered in terms of requirements.  It is human to want to share your excitement with family
around you but remember that your excitement is not their excitement.  Unless you sincerely
include them in the audience, the chance of acceptance will remain low.&lt;/p&gt;
&lt;h2 id="how-are-you-going-to-display-it"&gt;How Are You Going To Display It?&lt;a class="headerlink" href="#how-are-you-going-to-display-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of deciding how to display the glanceable information, we really have only one
decision to make: are we going to ask the viewer to visit an online site with a device or are
we going to provide access to a device at a given location?&lt;/p&gt;
&lt;p&gt;If you decide on the visit paradigm, you don’t have any hardware concerns as the reader is
supplying the hardware.  With the viewer using their own device to view the display, another
decision must be made regarding whether to standardize on a single device type or to support
multiple device types.  If you decide to support multiple device types, you will probably need
to use an intermediate step where you start with support for only the most used device type.
Once that device type has been completed, you can then slowly adapt your display to the next
device type your viewers are using.  You will also need to ensure that you have a clear
definition on where your display can be accessed from.  If you have a web site for your
office that you display on phones or tablets, can it be viewed from anywhere, or just
within the office’s WiFi area?&lt;/p&gt;
&lt;p&gt;If you decide on the specific location paradigm, you limit your device type to one, but you
take on additional hardware concerns.  You get to focus on a single device type, but in
exchange, you need to provide for the setup and control of that device.  Consider the case
where the power goes off and then comes back.  How will your hardware solution handle that or
will someone need to reboot it?  Another important consideration is the cost of the hardware
and any needed peripherals.  Will you reuse existing hardware that you already have, or will
you require expenditures?&lt;/p&gt;
&lt;p&gt;The output from your evaluation of this section should be a choice of a single approach and a
list of reasons why the selected approach was chosen.  If possible, provide as many details as
possible as it will help you in other sections going forward.  Also, from your audience’s
point of view, it will help them understand the decisions that you have asked them to buy in
to.&lt;/p&gt;
&lt;h2 id="what-do-you-need-to-consider-up-front"&gt;What Do You Need To Consider Up Front?&lt;a class="headerlink" href="#what-do-you-need-to-consider-up-front" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the display is a glanceable display, this means that everyone should be able to view the
display with few issues, if any.  Common issues to think about are:&lt;/p&gt;
&lt;h3 id="near-and-far-sightedness"&gt;Near and Far Sightedness&lt;a class="headerlink" href="#near-and-far-sightedness" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A large segment of every population either wears glasses or contacts at some point in their
life.  Especially as people get older, their eyesight gets weaker and they rely on glasses
more frequently.&lt;/p&gt;
&lt;p&gt;Depending on the differing eyesight of your audience, you may want to consider using
larger fonts to enable them to see the screen more clearly.  In addition, you may want to
consider a high contract mode that includes fewer, but bolder colors to improve visibility.&lt;/p&gt;
&lt;h3 id="color-blindness"&gt;Color Blindness&lt;a class="headerlink" href="#color-blindness" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Color blindness, as shown in this article
&lt;a href="https://en.wikipedia.org/wiki/Color_blindness"&gt;on Wikipedia&lt;/a&gt;,
is an inability to see differences in either all colors or certain types of colors.  Keep in
mind that if you audience is not a family environment, the person with color blindness may not
disclose that they are color blind up front.&lt;/p&gt;
&lt;p&gt;If one of your audience is color blind, using colors on your display to indicate certain
things is a bad idea.  Use shapes or text instead of colors to denote differences in the
data being displayed.&lt;/p&gt;
&lt;h3 id="dyslexia-and-other-reading-disorders"&gt;Dyslexia and Other Reading Disorders&lt;a class="headerlink" href="#dyslexia-and-other-reading-disorders" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dyslexia, as shown in this article &lt;a href="https://en.wikipedia.org/wiki/Dyslexia"&gt;on Wikipedia&lt;/a&gt;, is
actually a family of similar disorders involving the brain and how numbers and letters are
processed when reading.  Other reading disorders, such as those mentioned in
&lt;a href="https://en.wikipedia.org/wiki/Reading_disability"&gt;this Wikipedia article&lt;/a&gt;, are often grouped
by people as dyslexia, when they are only related.  As with dyslexia, keep in
mind that if you audience is not a family environment, the person with dyslexia may not
disclose that they are color blind up front.&lt;/p&gt;
&lt;p&gt;Advances in research on reading issues have produced advances such as the
&lt;a href="https://www.dyslexiefont.com/en/typeface/"&gt;Dyslexie font&lt;/a&gt; which is specially made for people
with dyslexia.  Engage with your audience to determine if any such issues apply, what their
effects are, and talk with them and research with them on ways to adapt the display to make
it easier for them to comprehend.&lt;/p&gt;
&lt;h3 id="young-readers"&gt;Young Readers&lt;a class="headerlink" href="#young-readers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Young readers, due to their age, are either still learning how to read or are building their
vocabulary as the grow.&lt;/p&gt;
&lt;p&gt;To assist any young readers that are going to use your display, consider replacing some of
the objects that you want to display with pictures that indicate the object’s meaning.  For
‘older’ young readers, keep in mind that their vocabulary is different than yours, and change
you designs for the display accordingly.&lt;/p&gt;
&lt;h2 id="what-are-you-going-to-display"&gt;What Are You Going To Display?&lt;a class="headerlink" href="#what-are-you-going-to-display" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you have all the other sections taken care of, the decision of what to put on the
display is almost anti-climactic.  After going through the process of identifying your
audience, the type of display to use, and any considerations for your audience, you have
probably defined at least one or two things to display along the way.  At the very least,
armed with the information above, you can engage with your audience in a brainstorming session
that will allow you to get buy-in from them.&lt;/p&gt;
&lt;p&gt;Two important things to remember at this stage: soliciting help and iterative development.&lt;/p&gt;
&lt;p&gt;Don’t be afraid to ask your audience to help you in the design for the display.  That can
take any form you want, from design the information for the display with them there to asking
them to create the displays and presenting them to the entire audience.  Remember, for the
glanceable display to be successful, you will need buy-in from your audience.  Having them
help with the work will do that.&lt;/p&gt;
&lt;p&gt;Iterative development means that you and your audience are going to try and make something
that works, but you do not expect it to be perfect on the first try.  You and your audience may
be confident think something works when you look at it initially, but over time that
confidence may change.  Don’t be afraid to iterate on the design, keeping the things that work
and changing the things that don’t work.&lt;/p&gt;
&lt;h2 id="our-discussion-about-our-glanceable-display"&gt;Our Discussion About Our Glanceable Display&lt;a class="headerlink" href="#our-discussion-about-our-glanceable-display" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Understanding that any decision would affect my entire family, I asked if we could talk
about it after dinner one night.  In discussing the possibility of a display, we all agreed
that there were common things that it would be nice to see.  These things came down to 3
categories: calendar related, weather related, and other.&lt;/p&gt;
&lt;p&gt;As we all have busy lives, the calendar was a slam dunk.  Our whiteboard calendar didn’t get
updated when it should, which left us looking at our online calendars on our phones.  But even
with our online calendars, it was a pain to remember to invite other family members to any
events we had, regardless of whether or not they were part of the event.  Having a single place
to display that information keyed to a given individual would clear things up and simplify
things a lot.&lt;/p&gt;
&lt;p&gt;Information on the weather was another category, mostly due to the Seattle weather.  While my
son wears the same type of clothes every day, my wife and I vary our clothing by the type of
weather and activities we have planned.  Having that advance knowledge of weather would cut
down on having to actively seek that information from a number of online sources.  &lt;/p&gt;
&lt;p&gt;After those two big categories, there were also some other little things brought up.  Not
having a good place to put them, the “others” category was formed.&lt;/p&gt;
&lt;p&gt;The discussion then moved to decide which class of glanceable display to use, and our family
made a simple decision to go with a monitor driven by a web page hosted on a Raspberry Pi.  We
all agreed that we wanted something that would replace a seldom updated whiteboard calendar in
our kitchen.  It needed to be big enough to show several weeks’ worth of calendar at a time, to
allow us to plan that far out.  We also wanted to make sure we kept each other honest, so we
explicitly wanted it not tied to any of our personal computers and tied to a location that we
know we all frequent: the kitchen.&lt;/p&gt;
&lt;p&gt;The choice of the Raspberry Pi satisfied these concerns pretty easily.  From a hardware point
of view, I had a spare one at home from a project I had wanted to do, but never started.  From
an operating system point of view, I have enough knowledge of Linux systems that I was
confident that I would be able to handle the configuration.  Finally, I was prepared to take
the challenge on of setting up the system and working with my family to define the elements
of the display with their input at ever step.&lt;/p&gt;
&lt;h2 id="the-decisions-for-our-glanceable-display"&gt;The Decisions for Our Glanceable Display&lt;a class="headerlink" href="#the-decisions-for-our-glanceable-display" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, from those discussions, I arrived at the following.  &lt;/p&gt;
&lt;h3 id="audience"&gt;Audience&lt;a class="headerlink" href="#audience" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The audience was our family.&lt;/p&gt;
&lt;h3 id="display"&gt;Display&lt;a class="headerlink" href="#display" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The display itself would be a simple Raspberry Pi with a monitor that was left from a project
that I had (almost) worked on.  The display would be located in the kitchen in a location that
would be visible to family members, but not visible outside of the house.&lt;/p&gt;
&lt;h3 id="considerations"&gt;Considerations&lt;a class="headerlink" href="#considerations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In our family, we don’t have any members that have vision issues other than needing glasses.
As such, the primary concern is that we can all ready the text on the display from 2 meters or
6 feet away.&lt;/p&gt;
&lt;h3 id="what-to-display"&gt;What To Display?&lt;a class="headerlink" href="#what-to-display" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The primary two goals for the display were to display our calendars and the weather for the
next 5 days.  Any enhancements of those two goals were fine, as long as the primary goals
were not ignored.&lt;/p&gt;
&lt;p&gt;Some of the other ideas that were floated may seem funny, but they nicely fit into our other
category:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chore lists from Trello&lt;/li&gt;
&lt;li&gt;quote of the day&lt;/li&gt;
&lt;li&gt;number of days until Christmas&lt;/li&gt;
&lt;li&gt;number of people on the International Space Station&lt;/li&gt;
&lt;li&gt;current exchange rates&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wrapping-it-up"&gt;Wrapping It Up&lt;a class="headerlink" href="#wrapping-it-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The rest of the articles in this series will detail my family and I worked on our
glanceable display.  Based on the information from above, we have had good success with
our display. Most of the fixes to the display were tweaks to the information being displayed,
rather than the Raspberry Pi itself.&lt;/p&gt;
&lt;p&gt;I emphatically stand by the previous sections about and making sure you understand and engage
your audience.  I credit my family, the audience for our glanceable display, with having an
honest conversation on what would help, and getting the buy in from them from the beginning.  &lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished?&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article presented a set of things to consider when creating a glanceable display,
followed by notes on how my family followed that pattern to arrive at our requirements
for our glanceable display.  Those considerations started with defining your audience,
proceeded to understanding your audience, and finally arriving at a set of things that
you and your audience want to display.&lt;/p&gt;
&lt;p&gt;I cannot promise that if you follow these considerations that your journey will be as
successful as ours.  However, I believe I can say with some certainty that it will help you
along the way with your own journey.  To succeed, you need information to help guide you, and
each of the considerations above will help you inch closer to that success.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s Next?&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the next article in this series,
&lt;a href="https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/"&gt;Glanceable Displays: Installing Raspbian on a Raspberry Pi&lt;/a&gt;,
I walk through the steps I took to set up a Raspberry Pi as our glanceable display of choice.
It documents the journey from installation on to a blank MicroSD card to a bare bones
installation that enabled remote SSH access.&lt;/p&gt;</content><category term="glanceable"></category><category term="glanceable displays"></category></entry><entry><title>Starting With GitHub: Setting Up Credentials For My Personal Website</title><link href="https://jackdewinter.github.io/2019/07/07/starting-with-github-setting-up-credentials-for-my-personal-website/" rel="alternate"></link><published>2019-07-07T00:00:00-07:00</published><updated>2019-07-07T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-07-07:/2019/07/07/starting-with-github-setting-up-credentials-for-my-personal-website/</id><summary type="html">&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of any project I do, private or open-source, is setting up a version control system and
securing access to that version control system.  In addition, it is always a high priority for
me to make sure that any Git access is secure and follows best common practices on …&lt;/p&gt;</summary><content type="html">&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of any project I do, private or open-source, is setting up a version control system and
securing access to that version control system.  In addition, it is always a high priority for
me to make sure that any Git access is secure and follows best common practices on security.
To allow me to write articles with little or no changes to my normal workflow, it made logical
sense to make my website platform of choice GitHub Pages&lt;sup id="fnref:GitHubPages"&gt;&lt;a class="footnote-ref" href="#fn:GitHubPages"&gt;3&lt;/a&gt;&lt;/sup&gt;.
As such, in setting up this website I needed to make sure I had Git&lt;sup id="fnref:Git"&gt;&lt;a class="footnote-ref" href="#fn:Git"&gt;1&lt;/a&gt;&lt;/sup&gt; and
more specifically GitHub &lt;sup id="fnref:GitHub"&gt;&lt;a class="footnote-ref" href="#fn:GitHub"&gt;2&lt;/a&gt;&lt;/sup&gt; setup, and setup securely.&lt;/p&gt;
&lt;p&gt;This article details the actions and choices I made in setting up my access to GitHub for my
blog.  It details how I followed the GitHub Pages instructions for creating a personal website
and creating a personal repository on GitHub to achieve that.  Then it describes the two modes
of accessing GitHub, SSH and HTTPS, and why I chose SSH.  Finally, it provides detailed notes
on how I generated a SSH keypair specifically for GitHub, and configured both my local Git and
the remote GitHub to use them.&lt;/p&gt;
&lt;h2 id="getting-started-with-github"&gt;Getting Started With GitHub&lt;a class="headerlink" href="#getting-started-with-github" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many good articles out there on how to install Git for different operating systems,
so I feel it is safe to assume that anyone reading this can do the research needed to install
Git for their operating system.  Setting up access to GitHub is even easier, as the folks at
GitHub have provided excellent instructions.  Start the setup by simply going to the
&lt;a href="https://github.com/"&gt;GitHub Home Page&lt;/a&gt; and follow the instructions.
The workflow will either allow you to login, if you already have an account, or create a new
account, if you don&amp;rsquo;t have an account.  Having already dealt with a couple of open source
projects, I logged on to my account &lt;code&gt;jackdewinter&lt;/code&gt; without any issues.&lt;/p&gt;
&lt;p&gt;After I logged in, the browser deposited me on my home page.  From there I was able to see
any projects that I had either contributed to or filed an issue against.  Just starting in my
Open Source journey, the contents were only a couple of projects that I had filed issues with.
Prior to this point, I had no need to authenticate my Git client with GitHub as I was just
downloading from public repositories.  Having done some research on GitHub Pages, I knew that
setting up my own website with GitHub would require me to create my own repositories.  As
such, my next task was to create that repository.&lt;/p&gt;
&lt;h2 id="creating-my-first-github-repository"&gt;Creating My First GitHub Repository&lt;a class="headerlink" href="#creating-my-first-github-repository" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://pages.github.com/"&gt;GitHub Pages home page&lt;/a&gt; has a really simple formula on their
webpage for setting up personal webpages.  The first step is pretty easy: make sure that
that the name of the repository is my GitHub user id (in my case &lt;code&gt;jackdewinter&lt;/code&gt;) followed by
&lt;code&gt;.github.io&lt;/code&gt;.  When the creation of my repository finished, GitHub deposited my browser
at the base of my new repository: &lt;code&gt;jackdewinter/jackdewinter.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The remaining steps in the formula dealt with cloning the repository, defining a sample
&lt;code&gt;index.html&lt;/code&gt; file for the website, and pushing that code back to the repository.  While I was
familiar with those concepts, I wasn&amp;rsquo;t shy about checking back with the
&lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository"&gt;Git Basics documentation&lt;/a&gt;
on the Git website when I forgot something.  From there I was able to find the correct helper
article on what I need to accomplish within 2-3 clicks.&lt;/p&gt;
&lt;p&gt;In GitHub, unless you mark a repository as private, everyone can see that
repository and read from that repository.  As my website&amp;rsquo;s repository is public, reading
wasn&amp;rsquo;t a problem.  However, pushing the code back to my repository would be writing, and that
was a problem. Each GitHub project has a list of who can write to it and the creator of the
project is on that list by default.  But to write to the project, I needed my local Git tool
to login to GitHub when needed and authenticate itself.  To do this securely, I was going to
have to dive into credentials.&lt;/p&gt;
&lt;h2 id="github-authentication-ssh-vs-https"&gt;GitHub Authentication: SSH vs HTTPS&lt;a class="headerlink" href="#github-authentication-ssh-vs-https" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any time you log in to a website or to a program to gain specific privileges, you establish
your credentials by supplying your user id and password.  You tell the website or program &amp;ldquo;I
can prove I am me, let me see my stuff!&amp;rdquo;.  The GitHub website is no different that any of
those sites.  If you want to be able to see any of your private stuff or write to your stuff,
it needs to verify who you are.&lt;/p&gt;
&lt;p&gt;Going to the
&lt;a href="https://help.github.com/en/articles/set-up-git#next-steps-authenticating-with-github-from-git"&gt;Authenticating with GitHub from Git&lt;/a&gt;,
there are two choices that allow us to connect to GitHub: HTTPS and SSH.  Both of these are
valid options, allowing for enhanced security when Git connects to GitHub.  Each of these
options has different things going for and against it.  After doing some
research, it seemed to me to break down to the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SSH&lt;/th&gt;
&lt;th&gt;HTTPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;set up keys&lt;/td&gt;
&lt;td&gt;set up credential manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup is more involved&lt;/td&gt;
&lt;td&gt;easy setup&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;more secure&lt;/td&gt;
&lt;td&gt;less likely blocked by firewall&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Looking at this information, I decided to go with SSH as I wanted to opt for more security.&lt;/p&gt;
&lt;h2 id="ssh-access-to-github"&gt;SSH Access to GitHub&lt;a class="headerlink" href="#ssh-access-to-github" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During my research at the GitHub site, I found this very good page on
&lt;a href="https://help.github.com/en/articles/using-ssh-over-the-https-port"&gt;SSH over the HTTPS port&lt;/a&gt;.
In it, they explain that there is a simple test to see if SSH will work from your system to
GitHub.  When you execute the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -T git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it will either return one of two responses.  If it returns with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Hi *username*! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then you can access GitHub via SSH without any issues.  If you see the other response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; ssh: connect to host github.com port 22: Connection timed out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then you have to setup SSH to connect to GitHub over the HTTPS port.  This access can be
verified with a small modification to the above command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -T -p 443 git@ssh.github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command is now trying to establish a SSH session over port 443, and if you get the
&lt;code&gt;You've successfully...&lt;/code&gt; response, it&amp;rsquo;s working fine.  Running these tests myself, I found
that I got a timeout on the first command and a success on the second command.  Following
the article, it recommends changes to &lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;sup id="fnref:SSH_CONFIG"&gt;&lt;a class="footnote-ref" href="#fn:SSH_CONFIG"&gt;4&lt;/a&gt;&lt;/sup&gt; to include the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  Hostname ssh.github.com
  Port 443
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next time, when I executed the &lt;code&gt;ssh -T git@github.com&lt;/code&gt; command, the response was
the &lt;code&gt;You've successfully&lt;/code&gt; response.  Now I was ready to set up the SSH keys.&lt;/p&gt;
&lt;h2 id="unique-ssh-keys"&gt;Unique SSH Keys&lt;a class="headerlink" href="#unique-ssh-keys" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Going back to the &lt;a href="https://help.github.com/en/articles/set-up-git#next-steps-authenticating-with-github-from-git"&gt;Authenticating with GitHub from Git&lt;/a&gt;,
the next step was to generate a new SSH key pair and add it to the local SSH keyring.  The page
that points to
&lt;a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;generating a new key&lt;/a&gt;
is pretty detailed, so I won&amp;rsquo;t try and improve over GitHub&amp;rsquo;s work.  On my reading of the page,
it seems to assume that if you will only have 1 key pair&lt;sup id="fnref:keypair"&gt;&lt;a class="footnote-ref" href="#fn:keypair"&gt;5&lt;/a&gt;&lt;/sup&gt; generated and that you will
reuse that key pair for GitHub.  I have issues with that practice, so I want to talk about it.&lt;/p&gt;
&lt;p&gt;Having a bit of a security background from my day job, I want to limit exposure if something
gets broken.  Just from a quick search, there are articles by
&lt;a href="https://askleo.com/why-is-it-so-important-to-use-a-different-password-on-every-site/"&gt;Leo Notenboom&lt;/a&gt;,
&lt;a href="https://blog.malwarebytes.com/101/2017/05/dont-need-27-different-passwords/"&gt;Malware Bytes Labs&lt;/a&gt;, and
&lt;a href="https://www.wikihow.com/Have-Many-Different-Passwords-for-Many-Different-Websites"&gt;WikiHow&lt;/a&gt;
that all describe how you should have different passwords for each account, and in many cases,
use a password manager.  And to be honest, that was just the first 3 that I clicked on.  There
were a lot more.  &lt;/p&gt;
&lt;p&gt;I can sum up and paraphrase the justification raised in each of those articles by posing a
single question: If someone breaks your password on one site, what is your exposure?  If you
have one password for all sites, then whoever breaks your password has access to that one
site.  If you have a different password for each site, the damage is limited to one site,
instead of all sites using that password.&lt;/p&gt;
&lt;p&gt;In my mind, using a key pair for credentials is a similar concept to using a user-id and
password for credentials.  Therefore, it followed that if I follow good security practices for
passwords, I should also follow the same practices for key pairs as credentials.&lt;/p&gt;
&lt;h2 id="generating-a-new-key-for-github"&gt;Generating a New Key For GitHub&lt;a class="headerlink" href="#generating-a-new-key-for-github" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure I have secure access to GitHub, I followed the instructions
&lt;a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;for generating a new key&lt;/a&gt;.
To generate a distinct key pair for GitHub, I made one small modification to the instructions:
I saved the new key pair information with the filename &lt;code&gt;github-key&lt;/code&gt; instead of the default
&lt;code&gt;id_ras&lt;/code&gt;.  This resulted in the files &lt;code&gt;~/.ssh/github-key&lt;/code&gt; and &lt;code&gt;~/.ssh/github-key.pub&lt;/code&gt;
being created as the key pair.  With those files created, I followed the remaining
instructions for setting up ssh-agent and uploading the key information to GitHub, replacing
any occurrence of &lt;code&gt;id_ras&lt;/code&gt; with &lt;code&gt;github-key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With that accomplished, I had a specific key pair specifically for GitHub and it was
registered locally.
I also had setup GitHub with the public portion of the credentials using the contents of
&lt;code&gt;~/.ssh/github-key.pub&lt;/code&gt;, as instructed.  The only remaining step was ensure that any SSH
connections to GitHub would use the GitHub credentials. Doing a bit more research on the SSH
configuration files, I quickly found that there was built in support for this by adding the
following to my &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  User git
  PreferredAuthentications publickey
  IdentityFile /c/Users/jackd/.ssh/github-key
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The location of &lt;code&gt;~/&lt;/code&gt; on my Windows machine is &lt;code&gt;%HOMEDRIVE%%HOMEPATH%\&lt;/code&gt; or &lt;code&gt;c:\Users\jackd\&lt;/code&gt;.  The format for the &lt;code&gt;IdentityFile&lt;/code&gt; property is a standard Unix path format.  This requires a translation from the Windows path format &lt;code&gt;C:\Users\jackd\.ssh\github-key&lt;/code&gt; to the Unix path format of &lt;code&gt;/c/Users/jackd/.ssh/github-key&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Combined with the change from earlier in this article, my &lt;code&gt;~/.ssh/config&lt;/code&gt; file now looked like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  Hostname ssh.github.com
  Port 443
  User git
  PreferredAuthentications publickey
  IdentityFile /c/Users/jackd/.ssh/github-key
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="testing-against-github-github-pages"&gt;Testing Against GitHub: GitHub Pages&lt;a class="headerlink" href="#testing-against-github-github-pages" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having performed a number of thorough tests of the above steps, everything passed without any
issues!  Now it was time to try and push some commits for the blog to GitHub.&lt;/p&gt;
&lt;p&gt;To create a directory for the GitHub project, I largely followed
&lt;a href="static-2.md#Create a Project Directory For The Site"&gt;these instructions&lt;/a&gt;
detailed in the companion article on setting up your own static website.  I then followed
&lt;a href="static-5.md### Attaching Remote Repositories to Local Repositories"&gt;these instructions&lt;/a&gt;,
adding the remote repository to my local configuration with the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin jackdewinter/jackdewinter.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Having associated the directory with the remote repository, the final test was to make a
change to the directory, commit it, and push it to the remote.  For this test, I used a
very simple &lt;code&gt;index.html&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
Hello world!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding the file to the directory, I staged the file and committed it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add index.html
git commit -m &lt;span class="s2"&gt;&amp;quot;new files&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then pushed it to the remote repository with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-agent
git push origin master --force
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Crossing my fingers, I waited until I got a response similar to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(virtualenv) XXXX&amp;gt;
...
To blog:jackdewinter/jackdewinter.github.io.git
   7d1c73d..be136e5  master -&amp;gt; master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With no error messages, I double checked the repository at 
&lt;code&gt;https://github.com/jackdewinter/jackdewinter.github.io&lt;/code&gt; and was able to see the &lt;code&gt;index.html&lt;/code&gt;
file present in the repository.  Following through with the instructions for GitHub Pages, I
then went to &lt;code&gt;https://jackdewinter.github.io&lt;/code&gt; and was able to see the text &amp;ldquo;Hello world!&amp;rdquo; on
in the browser.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article started with my creation of a GitHub repository to contain
the files for my personal website using GitHub Pages.  To securely access the repository, I
chose the SSH protocol and discovered that I needed to employ SSH over HTTP.  For enhanced
security, I described a solid reason for wanting a unique SSH key for GitHub.  Following that
advice, I generated a new key and then changed the &lt;code&gt;~/.ssh/config&lt;/code&gt; file to use SSH over HTTPS
and to point to that newly generated keypair.  Finally, I committed a sample file to the
project and was able to see it pushed successfully to the remote repository, and displayed as
my personal home page.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:Git"&gt;
&lt;p&gt;Git is an open-source source control tool.  For more information, &lt;a href="https://git-scm.com/"&gt;look here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:Git" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:GitHub"&gt;
&lt;p&gt;GitHub is a common repository for open-source projects.  For more information, &lt;a href="https://help.github.com/en/articles/set-up-git"&gt;look here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:GitHub" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:GitHubPages"&gt;
&lt;p&gt;GitHub Pages are a feature of GitHub that allow people to host their personal websites on GitHub.  For more information, &lt;a href="https://pages.github.com/"&gt;look here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:GitHubPages" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:SSH_CONFIG"&gt;
&lt;p&gt;My primary system is a Windows 10 machine, so instead of modifying the &lt;code&gt;~/.ssh/config&lt;/code&gt; file, I modified the &lt;code&gt;%HOMEDRIVE%%HOMEPATH%\.ssh\config&lt;/code&gt; file.  On my system, that file is the &lt;code&gt;c:\Users\jackd\.ssh\config&lt;/code&gt; file.&amp;#160;&lt;a class="footnote-backref" href="#fnref:SSH_CONFIG" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:keypair"&gt;
&lt;p&gt;When a SSH key is generated, it comes in two parts.  The private part is kept on the user&amp;rsquo;s system while the public part can be distributed to any interested parties.  Together they are referred to as a key pair.&amp;#160;&lt;a class="footnote-backref" href="#fnref:keypair" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="GitHub"></category></entry><entry><title>Extended Markdown Examples</title><link href="https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/" rel="alternate"></link><published>2019-06-30T00:00:00-07:00</published><updated>2019-06-30T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-06-30:/2019/06/30/extended-markdown-examples/</id><summary type="html">&lt;p&gt;This is a continuation of the &lt;a href="https://jackdewinter.github.io/2019/06/29/standard-markdown-examples/"&gt;previous cheat sheet&lt;/a&gt; for
my website.  This article specifically addresses any extensions that are not part of the
base Markdown specification.&lt;/p&gt;
&lt;p&gt;Each section here represents an extension that I have enabled on my website.  The formatting
from the previous page is continued, with one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a continuation of the &lt;a href="https://jackdewinter.github.io/2019/06/29/standard-markdown-examples/"&gt;previous cheat sheet&lt;/a&gt; for
my website.  This article specifically addresses any extensions that are not part of the
base Markdown specification.&lt;/p&gt;
&lt;p&gt;Each section here represents an extension that I have enabled on my website.  The formatting
from the previous page is continued, with one small exception.  The title of each section
specifies the name of the extension instead of the name of the feature being documented (see
&lt;a href="#admonitions"&gt;Admonitions&lt;/a&gt;).  If an extension contains more than one feature, such as the
Extra extension, the title specifies the name of the extension, a dash, and the name of the
feature (see &lt;a href="#extra-footnotes"&gt;Footnotes&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The authors of the &lt;a href="https://python-markdown.github.io/"&gt;Python Markdown Package&lt;/a&gt;
anticipated the addition of extra features.  To ensure people would have choice, the base
package can be &lt;a href="https://python-markdown.github.io/extensions"&gt;extended using configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Markdown extensions have been activated on my website by inserting the following text into
my peliconconf.py:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'extension_configs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.extra'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.admonition'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.codehilite'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'css_class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'highlight'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.meta'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'smarty'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'smart_angled_quotes'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.toc'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'permalink'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;hr/&gt;
&lt;h2 id="table-of-contents"&gt;Table Of Contents&lt;a class="headerlink" href="#table-of-contents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[TOC]
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table Of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#codehilite-code-blocks-with-line-numbers"&gt;CodeHilite - Code Blocks With Line Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extra-footnotes"&gt;Extra - Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extra-abbreviations"&gt;Extra - Abbreviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extra-definition-lists"&gt;Extra - Definition Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smartypants"&gt;Smartypants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#admonitions"&gt;Admonitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="codehilite-code-blocks-with-line-numbers"&gt;CodeHilite - Code Blocks With Line Numbers&lt;a class="headerlink" href="#codehilite-code-blocks-with-line-numbers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```
#!python
    # Code goes here ...
```
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Code goes here ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;hr/&gt;
&lt;h2 id="extra-footnotes"&gt;Extra - Footnotes&lt;a class="headerlink" href="#extra-footnotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Here's a simple footnote,[^1] and here's a longer one.[^bignote]

[^1]: This is the first footnote.

[^bignote]: Here's one with multiple paragraphs and code.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s a simple footnote,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; and here’s a longer one.&lt;sup id="fnref:bignote"&gt;&lt;a class="footnote-ref" href="#fn:bignote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="extra-abbreviations"&gt;Extra - Abbreviations&lt;a class="headerlink" href="#extra-abbreviations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The HTML specification is maintained by the W3C.

*[HTML]: Hyper Text Markup Language
*[W3C]:  World Wide Web Consortium
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title="World Wide Web Consortium"&gt;W3C&lt;/abbr&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="extra-definition-lists"&gt;Extra - Definition Lists&lt;a class="headerlink" href="#extra-definition-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Apple
:   Pomaceous fruit of plants of the genus Malus in
    the family Rosaceae.

Orange
:   The fruit of an evergreen tree of the genus Citrus.
&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;Apple&lt;/dt&gt;
&lt;dd&gt;Pomaceous fruit of plants of the genus Malus in
the family Rosaceae.&lt;/dd&gt;
&lt;dt&gt;Orange&lt;/dt&gt;
&lt;dd&gt;The fruit of an evergreen tree of the genus Citrus.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr/&gt;
&lt;h2 id="smartypants"&gt;Smartypants&lt;a class="headerlink" href="#smartypants" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;advantage is that code blocks are unaffected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- apostrophe ' by itself
- apostrophe as in 'quote me'
- quotations mark " by itself
- quotations mark as in "quote me"
- replacement of multi-character sequences with Unicode: &amp;lt;&amp;lt; ... -- &amp;gt;&amp;gt; ---
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;apostrophe ‘ by itself&lt;/li&gt;
&lt;li&gt;apostrophe as in ‘quote me’&lt;/li&gt;
&lt;li&gt;quotations mark ” by itself&lt;/li&gt;
&lt;li&gt;quotations mark as in “quote me”&lt;/li&gt;
&lt;li&gt;replacement of multi-character sequences with Unicode: « … – » —&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="admonitions"&gt;Admonitions&lt;a class="headerlink" href="#admonitions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;broken down into section by the way that the Elegant theme colors the admonitions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! note
    You should note that the title will be automatically capitalized.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! important "Replacement Title"
    You should note that the default title will be replaced.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Replacement Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! hint
    You should note that the title will be automatically capitalized.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;Hint&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! tip "Replacement Title"
    You should note that the default title will be replaced.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Replacement Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! warning
    You should note that the title will be automatically capitalized.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! caution "Replacement Title"
    You should note that the default title will be replaced.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition caution"&gt;
&lt;p class="admonition-title"&gt;Replacement Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! attention ""
    You should note that this will have no title due to the empty title.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition attention"&gt;
&lt;p&gt;You should note that this will have no title due to the empty title.&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! danger
    You should note that the title will be automatically capitalized.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Danger&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! error "Replacement Title"
    You should note that the default title will be replaced.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition error"&gt;
&lt;p class="admonition-title"&gt;Replacement Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is the first footnote. &lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:bignote"&gt;
&lt;p&gt;Here’s one with multiple paragraphs and code. &lt;a class="footnote-backref" href="#fnref:bignote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="markdown"></category></entry><entry><title>Standard Markdown Examples</title><link href="https://jackdewinter.github.io/2019/06/29/standard-markdown-examples/" rel="alternate"></link><published>2019-06-29T00:00:00-07:00</published><updated>2019-06-29T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-06-29:/2019/06/29/standard-markdown-examples/</id><summary type="html">&lt;p&gt;As I started writing my articles for my blog, I realized I needed something.  To help me
write articles using this flavor of Markdown&lt;sup id="fnref:Markdown"&gt;&lt;a class="footnote-ref" href="#fn:Markdown"&gt;1&lt;/a&gt;&lt;/sup&gt;, I needed my own cheat sheet.  My
hope is that it provides clear guidance on which aspects of the various forms of Markdown
worked for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I started writing my articles for my blog, I realized I needed something.  To help me
write articles using this flavor of Markdown&lt;sup id="fnref:Markdown"&gt;&lt;a class="footnote-ref" href="#fn:Markdown"&gt;1&lt;/a&gt;&lt;/sup&gt;, I needed my own cheat sheet.  My
hope is that it provides clear guidance on which aspects of the various forms of Markdown
worked for me, and which didn’t.&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-break"&gt;Horizontal Break&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#headings"&gt;Headings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#text-emphasis"&gt;Text Emphasis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#numbered-lists"&gt;Numbered lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bulleted-list"&gt;Bulleted List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#block-quote"&gt;Block quote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-block"&gt;Code Block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tables"&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#local-links"&gt;Local Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remote-links"&gt;Remote Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#download-links"&gt;Download Links&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#images"&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am writing articles and pages on Pelican 4.0.1&lt;sup id="fnref:Pelican"&gt;&lt;a class="footnote-ref" href="#fn:Pelican"&gt;2&lt;/a&gt;&lt;/sup&gt; using the Elegant&lt;sup id="fnref:Elegant"&gt;&lt;a class="footnote-ref" href="#fn:Elegant"&gt;3&lt;/a&gt;&lt;/sup&gt; theme, therefore
I want to
make sure I have a cheat sheet that is specific to this dialect of Markdown. The base Markdown
used for Pelican uses the &lt;a href="https://python-markdown.github.io/"&gt;Python Markdown Package&lt;/a&gt; which
(with 3 exceptions) follows
&lt;a href="https://daringfireball.net/projects/markdown/syntax"&gt;John Gruber’s Markdown definition&lt;/a&gt;
very literally.  Pelican configuration also supports providing Markdown with additional
configuration that enables other features.  Those features are documented separately in
&lt;a href="https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/"&gt;the next page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The format of this cheat sheet is simple.  Each section is separated from the next with a
horizontal break and the name of the section.  Any notes regarding that section are placed
at the top of the section in point form, to ensure they are brief.  Then a
&lt;a href="#code-block"&gt;Code Block&lt;/a&gt; section is used to show the literal code used to produce the effects
that are presented right after the code block.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="horizontal-break"&gt;Horizontal Break&lt;a class="headerlink" href="#horizontal-break" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A horizontal break occurs after 3 or more hyphens.

---
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A horizontal break occurs after 3 or more hyphens.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="headings"&gt;Headings&lt;a class="headerlink" href="#headings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Heading Level 1

## Heading Level 2

### Heading Level 3
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="heading-level-1"&gt;Heading Level 1&lt;a class="headerlink" href="#heading-level-1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="heading-level-2"&gt;Heading Level 2&lt;a class="headerlink" href="#heading-level-2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="heading-level-3"&gt;Heading Level 3&lt;a class="headerlink" href="#heading-level-3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;hr/&gt;
&lt;h2 id="text-emphasis"&gt;Text Emphasis&lt;a class="headerlink" href="#text-emphasis" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;two spaces at the end of a line will be equivalent to &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This text is **bold** and this text is also __bold__.  
This text is *italic* and this text is also _italic_.  
This text is **_italic and bold_**, but no two spaces at end.
Single ```line``` block.  
Inline `code` has ```back-ticks like this ` around``` it.  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This text is &lt;strong&gt;bold&lt;/strong&gt; and this text is also &lt;strong&gt;bold&lt;/strong&gt;.&lt;br/&gt;
This text is &lt;em&gt;italic&lt;/em&gt; and this text is also &lt;em&gt;italic&lt;/em&gt;.&lt;br/&gt;
This text is &lt;strong&gt;&lt;em&gt;italic and bold&lt;/em&gt;&lt;/strong&gt;, but no two spaces at end.
Single &lt;code&gt;line&lt;/code&gt; block.&lt;br/&gt;
Inline &lt;code&gt;code&lt;/code&gt; has &lt;code&gt;back-ticks like this ` around&lt;/code&gt; it.  &lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="numbered-lists"&gt;Numbered lists&lt;a class="headerlink" href="#numbered-lists" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to maintain the indentation, place 4 spaces at the start of the line&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. One  

    New para.  

    Blah

2. Two
    - unordered
    - list
3. Three
    1. ordered
    2. list
        - unordered
        - list
    3. items
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;One  &lt;/p&gt;
&lt;p&gt;New para.  &lt;/p&gt;
&lt;p&gt;Blah&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Three&lt;ol&gt;
&lt;li&gt;ordered&lt;/li&gt;
&lt;li&gt;list&lt;ul&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;items&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h2 id="bulleted-list"&gt;Bulleted List&lt;a class="headerlink" href="#bulleted-list" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to maintain the indentation, place 4 spaces at the start of the line&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

- Another item in the same list.
    - Bulleted item
    - Bulleted item
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is a list item with two paragraphs.&lt;/p&gt;
&lt;p&gt;This is the second paragraph in the list item. You’re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another item in the same list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bulleted item&lt;/li&gt;
&lt;li&gt;Bulleted item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="block-quote"&gt;Block quote&lt;a class="headerlink" href="#block-quote" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; This is the first paragraph of a blockquote with two paragraphs.
&amp;gt; Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt;
&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt;
&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the first paragraph of a blockquote with two paragraphs.
Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;
&lt;p&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;
&lt;p&gt;This is the first level of quoting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is nested blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the first level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h2 id="code-block"&gt;Code Block&lt;a class="headerlink" href="#code-block" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;line numbers can be added
&lt;a href="https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/#codehilite-code-blocks-with-line-numbers"&gt;via extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```text
Make things only as complex as they need to be.
```

```Python
# Blogroll
LINKS = (
            ('Pelican', 'Pelican', 'http://getpelican.com/'),
         )
```
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Make things only as complex as they need to be.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="tables"&gt;Tables&lt;a class="headerlink" href="#tables" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;colons can be used to align columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Column1 | Column 2 | Column 3
|---|---|---|
| Value 1 | Value 2 | Value 3 |
| Value 4 | Value 5 | Value 6 |
| Value 7 | Value 8 | Value 9 |

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column1&lt;/th&gt;
&lt;th&gt;Column 2&lt;/th&gt;
&lt;th&gt;Column 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Value 1&lt;/td&gt;
&lt;td&gt;Value 2&lt;/td&gt;
&lt;td&gt;Value 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value 4&lt;/td&gt;
&lt;td&gt;Value 5&lt;/td&gt;
&lt;td&gt;Value 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value 7&lt;/td&gt;
&lt;td&gt;Value 8&lt;/td&gt;
&lt;td&gt;Value 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align="center"&gt;Are&lt;/th&gt;
&lt;th align="right"&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td align="center"&gt;right-aligned&lt;/td&gt;
&lt;td align="right"&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td align="center"&gt;centered&lt;/td&gt;
&lt;td align="right"&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td align="center"&gt;are neat&lt;/td&gt;
&lt;td align="right"&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr/&gt;
&lt;h2 id="links"&gt;Links&lt;a class="headerlink" href="#links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="local-links"&gt;Local Links&lt;a class="headerlink" href="#local-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{filename}&lt;/code&gt; tag indicates location in the content folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[About Page]({filename}/pages/about.md)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://jackdewinter.github.io/drafts/pages/about-me.html"&gt;About Page&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="remote-links"&gt;Remote Links&lt;a class="headerlink" href="#remote-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;proper URL indicates a remote website&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Python Package Index](https://pypi.org)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://pypi.org"&gt;Python Package Index&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="download-links"&gt;Download Links&lt;a class="headerlink" href="#download-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;download links are not natively supported in Markdown&lt;/li&gt;
&lt;li&gt;must explicitly create HTML text inline to achieve that
Creating a link to a file to download, not display, is not natively supported in markdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Pelican Brag Document (display)]({filename}/images/markdown-1/pelican.txt)  
&amp;lt;a href="{filename}/images/pelican.txt" download&amp;gt;Pelican Brag Document (download)&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://jackdewinter.github.io/images/markdown-1/pelican.txt"&gt;Pelican Brag Document (display)&lt;/a&gt;&lt;br/&gt;
&lt;a download="" href="https://jackdewinter.github.io/images/markdown-1/pelican.txt"&gt;Pelican Brag Document (download)&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="images"&gt;Images&lt;a class="headerlink" href="#images" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{filename}&lt;/code&gt; tag indicates location in the content folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![python logo]({filename}/images/markdown-1/python_icon.png)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="python logo" src="https://jackdewinter.github.io/images/markdown-1/python_icon.png"/&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:Markdown"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; allows for HTML pages to be written using a simple text editor with no knowledge of HTML. &lt;a class="footnote-backref" href="#fnref:Markdown" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Pelican"&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; is a Static Site Generator written in Python. &lt;a class="footnote-backref" href="#fnref:Pelican" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Elegant"&gt;
&lt;p&gt;The Elegant theme’s repository &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;is here&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:Elegant" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="markdown"></category></entry><entry><title>My Gallery Article</title><link href="https://jackdewinter.github.io/2010/12/06/my-gallery-test/" rel="alternate"></link><published>2010-12-06T10:20:00-08:00</published><updated>2010-12-06T19:30:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2010-12-06:/2010/12/06/my-gallery-test/</id><summary type="html">&lt;p&gt;Short version of short for index and feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="python logo" src="https://jackdewinter.github.io\photos\dragondance/photo-1556592538-e29ac3307863a.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jackdewinter.github.io\photos\dragondance/photo-1557162472-6b5c6729b7e6.jpg" data-lightbox="dragondance"&gt;&lt;img alt="python logo" src="https://jackdewinter.github.io\photos\dragondance/photo-1557162472-6b5c6729b7e6t.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer malesuada sed tortor et pulvinar. Donec a vehicula ligula. Quisque porta erat vitae lectus lacinia varius. Integer sed lacus in libero volutpat lobortis ac vitae velit. Praesent rutrum turpis sem, id mattis sem pulvinar id. Morbi leo felis, facilisis in ex a, viverra placerat justo. Donec ac risus non sapien feugiat malesuada.&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry><entry><title>My Long Article</title><link href="https://jackdewinter.github.io/2010/12/03/my-super-long-post/" rel="alternate"></link><published>2010-12-03T10:20:00-08:00</published><updated>2010-12-05T19:30:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2010-12-03:/2010/12/03/my-super-long-post/</id><summary type="html">&lt;p&gt;Short version of long for index and feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer malesuada sed tortor et pulvinar. Donec a vehicula ligula. Quisque porta erat vitae lectus lacinia varius. Integer sed lacus in libero volutpat lobortis ac vitae velit. Praesent rutrum turpis sem, id mattis sem pulvinar id. Morbi leo felis, facilisis in ex a, viverra placerat justo. Donec ac risus non sapien feugiat malesuada.&lt;/p&gt;
&lt;h2 id="para-1"&gt;Para 1&lt;a class="headerlink" href="#para-1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Donec quam neque, vulputate quis purus at, tempus tincidunt neque. Sed posuere eros eu massa lobortis varius. Ut condimentum elit eros. Sed vel nunc vitae nibh aliquet vestibulum vitae quis justo. Sed vel ligula turpis. Aliquam et mi mollis, suscipit sapien vel, molestie enim. Morbi sodales, dui nec congue tristique, risus mi luctus nulla, vel egestas sem nulla quis augue. Nulla vitae efficitur odio, quis egestas ex. Pellentesque a est viverra, fringilla dui ac, laoreet purus. Suspendisse porta aliquet nunc et pulvinar. Integer ante felis, tincidunt eu ipsum a, imperdiet convallis augue. Cras vulputate sapien sit amet metus placerat, sed congue turpis tempus. Nunc pretium ac dolor eget tincidunt.&lt;/p&gt;
&lt;h2 id="para-2"&gt;Para 2&lt;a class="headerlink" href="#para-2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nunc id tortor lectus. Quisque fermentum sem ut elit ultricies sollicitudin. Curabitur blandit, elit at suscipit mattis, purus lectus eleifend felis, id rutrum neque sapien vitae arcu. Aenean elementum lacus tristique purus facilisis placerat. Nunc pharetra lorem ut finibus blandit. Aenean scelerisque elit nec malesuada accumsan. Proin eu orci eget odio scelerisque viverra a ac nulla. Vestibulum elementum lobortis quam. Morbi porta rutrum mi, quis laoreet nunc dictum at. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Ut in lobortis massa.&lt;/p&gt;
&lt;h3 id="para-2a"&gt;Para 2a&lt;a class="headerlink" href="#para-2a" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Phasellus et leo in nunc fermentum vulputate. Nullam sed interdum augue. Duis eu dignissim eros. Mauris pretium turpis non purus porta, non consequat enim rutrum. Fusce dui odio, consequat in rhoncus sed, interdum vulputate quam. Nullam nec dolor ex. Curabitur dapibus vestibulum odio at sodales.&lt;/p&gt;
&lt;h3 id="para-2b"&gt;Para 2b&lt;a class="headerlink" href="#para-2b" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;
&lt;p&gt;Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry><entry><title>My Short Article</title><link href="https://jackdewinter.github.io/2010/12/03/my-super-short-post/" rel="alternate"></link><published>2010-12-03T10:20:00-08:00</published><updated>2010-12-05T19:30:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2010-12-03:/2010/12/03/my-super-short-post/</id><summary type="html">&lt;p&gt;Short version of short for index and feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer malesuada sed tortor et pulvinar. Donec a vehicula ligula. Quisque porta erat vitae lectus lacinia varius. Integer sed lacus in libero volutpat lobortis ac vitae velit. Praesent rutrum turpis sem, id mattis sem pulvinar id. Morbi leo felis, facilisis in ex a, viverra placerat justo. Donec ac risus non sapien feugiat malesuada.&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry></feed>