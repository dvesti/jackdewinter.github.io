<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2020-03-02T00:00:00-08:00</updated><entry><title>Markdown Linter - Taking Time to Refactor -- Post-Easy Inlines</title><link href="https://jackdewinter.github.io/2020/03/02/markdown-linter-taking-time-to-refactor-post-easy-inlines/" rel="alternate"></link><published>2020-03-02T00:00:00-08:00</published><updated>2020-03-02T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-03-02:/2020/03/02/markdown-linter-taking-time-to-refactor-post-easy-inlines/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was working on implementing the
&lt;a href="https://jackdewinter.github.io/2020/02/24/markdown-linter-starting-inline-processing/#code-spans"&gt;inline code spans&lt;/a&gt;,
as detailed in the last article,
I performed
a thorough scan of the scenario tests and their source data, noting down any issues I
found.  I knew that I had missed the mark on how to internally represent Atx …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I was working on implementing the
&lt;a href="https://jackdewinter.github.io/2020/02/24/markdown-linter-starting-inline-processing/#code-spans"&gt;inline code spans&lt;/a&gt;,
as detailed in the last article,
I performed
a thorough scan of the scenario tests and their source data, noting down any issues I
found.  I knew that I had missed the mark on how to internally represent Atx Headers,
and I was curious about how many other things I had missed.  Having found a
decent handful of issues to fix,  I decided to spend some time to address those issues
before adding more of the inline processing.  In my mind, it was
better to take a week and try and keep the issue count low than to continue forward,
possibly compounding the cost of fixing those issues.  As I am in a somewhat ideal
scenario, with nobody pressuring me for features or issue fixes, I figured it was best
if I took advantage of that to the best of my abilities and “do it right”.&lt;/p&gt;
&lt;p&gt;The full record of the work detailed in this article is documented in the
project’s GitHub repository in the commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5102bfd8a3b2616eb6c3147f9416e3d7b308e523"&gt;14 February 2020&lt;/a&gt; and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/62127eb46d5b03a781ba85fbcf3a397221716eb2"&gt;20 February 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-refactor-now"&gt;Why Refactor Now?&lt;a class="headerlink" href="#why-refactor-now" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the owner and sole developer on the project, my decision to stop and refactor was
any easy one to make.  It also didn’t escape my attention that making a decision like
that isn’t always that simple for larger projects.  If this was a work project
or a team project, the group working on the project would have to meet to figure things
out. The team itself usually plays a critical role in assessing the cost and benefit of
each task, but
in the end it is a balancing act for managers and directors to figure out which tasks
are the best ones to focus on at any given time. As it’s only me on the PyMarkdown
project, I get to conveniently shortcut those conversations in favor of simple
decisions based on my own experience.&lt;/p&gt;
&lt;p&gt;From my years of experience, I find that there are usually two driving forces that make
me support a decision to refactor a project.  The first driving force is the cost of
any applicable technical
debt on product code.  As I consider tests integral to a project’s quality, my
definition of the term “product code” includes all source code and resources required
to execute the project normally and to perform testing used to certify that same
project as shippable.  With almost 700 scenario tests for
PyMarkdown’s parser, even a small change can generate large ripples through the
code base, especially the scenario tests.  As the scenarios for a feature are only added
when that feature itself is added, each feature added therefore adds a significant
amount of product code for any change to ripple through.  It also follows that each
extra test impacted by an issue means an increased cost to fix that issue before
proceeding.  Therefore, if the goal is to keep overall costs down, refactoring more
frequently during development seems logical.&lt;/p&gt;
&lt;p&gt;The second driving force is less quantifiable, but equally important to any type of
project.  That force is the flow of the team working on the project.  Based on past
projects, I know that I work more efficiently if
I focus on a group of similar things for a while, then shift to another group when done.
The larger the difference is in the skill sets between the two groups of work, the more
relaxed I feel about the work.  This sense of relaxation allows me to get into a better
flow.  As this project is being
written by me in the evenings and on the weekends, keeping a good flow for the project
keeps me focused and energized about the project.  As I am the sole developer on the
project at the time, keeping myself motivated in a necessity!&lt;/p&gt;
&lt;p&gt;While one force is more empirical and the other is more feelings based, both of these
forces worked together to convince me that it was yet again time to refactor the
PyMarkdown project.&lt;/p&gt;
&lt;h2 id="issue-1-setext-headers-paragraphs-and-block-quotes"&gt;Issue 1:  SetExt Headers, Paragraphs, and Block Quotes&lt;a class="headerlink" href="#issue-1-setext-headers-paragraphs-and-block-quotes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I needed one of the smaller issues to get me warmed up, so after looking over the list
of possible issues to work on, I decided on
this one.  During the review of active scenario tests, I noticed that the text &lt;code&gt;===&lt;/code&gt;
was in the paragraph tags for the specification’s example, but the tokens that the
parser were omitting had them outside of the paragraph.  It seemed simple enough,
but looks were deceiving.&lt;/p&gt;
&lt;p&gt;It took me a bit of digging to find two possible reasons for the string &lt;code&gt;===&lt;/code&gt; to be kept
inside of the paragraph: laziness and non-interrupts.  Working backwards, the
concept of laziness with block quotes and list items is that you can omit any of
the leading characters if the next non-whitespace character after the omitted
characters is text that continues the paragraph.  In essence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That got me halfway there, but there was still the question of how the &lt;code&gt;===&lt;/code&gt; would be
kept as part of the paragraph and not as an SetExt header indicator.  I read the
section on SetExt a couple of times before the following lines clicked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, it cannot interrupt a paragraph, so when a setext heading comes after a paragraph, a blank line is needed between them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bingo!  I wish it didn’t take multiple reads through that part of the specification,
but specifications are sometimes like that.  Based on those discoveries, I temporary
rewrote the scenario for scenario 63 to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The goal of this was to remove the laziness out of the equation while working on the
interrupt issue.  When I reran scenario test 63, I correctly got a single paragraph
with 3 lines in it.  So whatever the issue was, it was not just simple parsing of
paragraphs.  Taking a step forward, I added the block quotes back into the picture,
changing that scenario text to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was at this point that the scenario broke, apparently thinking that the third line
was a
SetExt header, and should close off the paragraph.  Issue reproduced!  To be sure, I
applied the laziness concept to the block quote, reverting the scenario back to
its original text of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and validated that the behavior was the same.&lt;/p&gt;
&lt;p&gt;Armed with a good reproduction case for the issue, good debug output, and a general
area in the source code for the cause of the issue, the issue was identified and
fixed in quick order.  This issue was very specific, so only the one scenario test
was impacted, which was a good thing.  The problem was that during the development
of block quotes, something made me think that anything looking like a
SetExt header should close off a paragraph, hence I added code to do just that. I
checked the code a couple of times, and that was the only scenario test referencing
that code, so I just deleted it.&lt;/p&gt;
&lt;p&gt;While the research on the issue was
a bit more effort than I originally thought, fixing this issue was a great warm up
to the next couple of issues.  One issue, one scenario test impacted, and I was
refactoring.&lt;/p&gt;
&lt;h2 id="issue-2-python-markdown-and-line-continuation-characters"&gt;Issue 2: Python, Markdown, and Line Continuation Characters&lt;a class="headerlink" href="#issue-2-python-markdown-and-line-continuation-characters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next issue for me to work on was a subtle copy-and-paste error, one that flew
under my radar until I took a solid look at it.  This issue didn’t show any indications
of failure until I started my scan of the scenario tests.  In essence, the only
reason I found this one was that I went looking for any error, not something specific.&lt;/p&gt;
&lt;p&gt;In Markdown, the &lt;code&gt;\&lt;/code&gt; character at the end of the line is used to denote a hard line
break, not yet to be implemented in the PyMarkdown project.  In Python, the &lt;code&gt;\&lt;/code&gt;
character at the end of the line is used as a line continuation character, telling the
Python interpreter to treat the text before the character and the text after the
character as a single line.  Hopefully any readers see where I am going with this.&lt;/p&gt;
&lt;p&gt;When I added the scenario test for
&lt;a href="https://github.github.com/gfm/#example-60"&gt;scenario 60&lt;/a&gt;,
I did a copy-and-paste on the Markdown input to the new scenario test, a process I
have done for 99% of the scenario tests in the project.  To accomplish this, I pasted
the following Markdown text between the &lt;code&gt;"""&lt;/code&gt; characters denoting the Markdown to use
as input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;
&lt;span class="c1"&gt;----&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;resulting in the Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""Foo&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;----"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After pasting each scenario’s Markdown into the scenario test, I try to ensure that
I replace every instance of the &lt;code&gt;\&lt;/code&gt; character with the &lt;code&gt;\\&lt;/code&gt; characters to properly
represent the backslash character in a Python string.  As I am
only human, there are times that I forget to do this.  Luckily for me, if a &lt;code&gt;\&lt;/code&gt;
character is not paired up with a valid character to escape, the Python interpreter
will generate a warning similar to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;======================================================== warnings summary ========================================================
test\test_markdown_setext_headings.py:346
  C:\old\enlistments\pymarkdown\test\test_markdown_setext_headings.py:346: DeprecationWarning: invalid escape sequence \&amp;gt;
    expected_gfm = """&amp;lt;h2\&amp;gt;Foo\\&amp;lt;/h2&amp;gt;"""

-- Docs: https://docs.pytest.org/en/latest/warnings.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the backslash character in Markdown is used with punctuation characters and the
backslash character in Python is used with alphabetic characters, this is usually a
very solid detection scheme for finding copy-and-paste misses.  In this case, that
check failed.&lt;/p&gt;
&lt;p&gt;The good news here is two-fold: an easy fix and a very localized fix.  This fix was
easy as I just had to apply the missed substitution.  It was localized mainly because
I had not yet implemented hard line breaks.  And yes, it meant that when I did implement
hard line breaks, I triple checked my line endings to avoid this issue showing up again.&lt;/p&gt;
&lt;p&gt;Momentum was increasing, so it was time to step things up!&lt;/p&gt;
&lt;h2 id="issue-3-code-blocks-indenting-and-blank-lines"&gt;Issue 3: Code Blocks, Indenting, and Blank Lines&lt;a class="headerlink" href="#issue-3-code-blocks-indenting-and-blank-lines" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having resolved a couple of warm-up issues, I felt it was time to tackle some larger
issues.  Each issue in
this group either deals with vertical space issues or leading space issues within a code
block.  The vertical space issue was that blank lines were not being folded into the
text blocks properly, causing foreseeable issues with  parsing complete blocks of text
in the near future.  Given some Markdown text, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="n"&gt;abc&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I expected that the output tokens would include a fenced code block with a single text
block inside of it with three lines present.  Instead, there were three tokens present,
the first and last were text tokens with strings and the token in the middle was a blank
line token.  While the token representation was technically correct, parsing it would
be awkward.  For the specific case of blank lines within a code block, it made sense to
merge the blank line tokens into the surrounding text tokens.&lt;/p&gt;
&lt;p&gt;The leading space issue was a bit more subtle but equally simple.  To properly parse
text blocks within a code block, an appropriate amount of whitespace may need to be
removed from each line as it is combined together.  As always, it is the details that
matter, and it is easy to gloss over them.  In the opening part of the indented code
block section of the specification, the following line is present:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The contents of the code block are the literal contents of the lines, including trailing line endings, minus four spaces of indentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The similar line for fenced code blocks reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the leading code fence is indented N spaces, then up to N spaces of indentation are removed from each line of the content (if present).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, this means that the following indented code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;fred&lt;/span&gt;
     &lt;span class="n"&gt;frank&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should produce a code block with the text &lt;code&gt;fred&lt;/code&gt; on the first line and the text
&lt;code&gt;&amp;lt;space&amp;gt;frank&lt;/code&gt;&lt;sup id="fnref:Space"&gt;&lt;a class="footnote-ref" href="#fn:Space"&gt;1&lt;/a&gt;&lt;/sup&gt; on the second line, having had the first 4 spaces removed.  The fenced
code blocks are
a bit more nuanced, in that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt;
  &lt;span class="n"&gt;fred&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is parsed as &lt;code&gt;&amp;lt;space&amp;gt;&amp;lt;space&amp;gt;fred&lt;/code&gt;&lt;sup id="fnref2:Space"&gt;&lt;a class="footnote-ref" href="#fn:Space"&gt;1&lt;/a&gt;&lt;/sup&gt; and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="o"&gt;```&lt;/span&gt;
  &lt;span class="n"&gt;fred&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is parsed as &lt;code&gt;fred&lt;/code&gt;, based on the extra indenting of the fenced code block start.
While the line containing the text &lt;code&gt;fred&lt;/code&gt; is the same in both cases, the number of
leading spaces before the fenced code block are different, resulting in the different
outputs.&lt;/p&gt;
&lt;p&gt;Prior to fixing this issue, text lines were combined in a simple manner and no
whitespace was removed from the start of any lines within code blocks.  To properly
address this issue, not only did these two rules need to be followed, but the existing
code to properly remove leading spaces for each line within a normal paragraph needed
to be preserved.  It took a bit to get it right, but with a good number of scenario
tests to keep things honest, it was easy to get it right quickly.&lt;/p&gt;
&lt;p&gt;My original estimates for the impact of this issue was 15-20 tests, and it thankfully
remained within that range.  While the initial number of scenarios covered by these
issues was 15, I expected other scenarios to use code blocks to show how their feature
worked with code blocks, adding another 3-7 scenario tests in the process.  Looking
back, I think I got off pretty nicely with the scope of these changes.&lt;/p&gt;
&lt;h2 id="issue-4-paragraphs-and-indenting"&gt;Issue 4: Paragraphs and Indenting&lt;a class="headerlink" href="#issue-4-paragraphs-and-indenting" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feeling energized from fixing the issues documented in the previous sections, I decided
to keep with the theme and attack the issue with leading spaces in normal paragraphs.
Similar in essence to the prior issue, the rule for normal paragraphs is that all
leading whitespace is
removed as the text for the paragraph is pasted together.  While it is hard to point
to an exact quote from the specification for this rule&lt;sup id="fnref:Missing"&gt;&lt;a class="footnote-ref" href="#fn:Missing"&gt;2&lt;/a&gt;&lt;/sup&gt;,
&lt;a href="https://github.github.com/gfm/#example-192"&gt;example 192&lt;/a&gt; clearly shows this as the
Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;aaa&lt;/span&gt;
 &lt;span class="n"&gt;bbb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is translated into the HTML text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;aaa
bbb&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fix for this was similar to the change made for the code blocks issue, but instead
of specifying a fixed number of whitespace to remove, the &lt;code&gt;combine&lt;/code&gt; function was
changed to accept a value that indicates the removal of all whitespace.  The original 9
cases were quickly tested with the fix, and things looked solid.&lt;/p&gt;
&lt;p&gt;Originally, it looked like the changes would be confined to the original 9 cases, but
I suspected that the number would at least be double that, as this fix would affect any
scenario involving a paragraph with multiple lines. While an number of the cases were
simple cases, when all was said and done, there were 59 changes to scenario
tests in the commit for this issue.  Even so, those changes were quickly made and the
scenario tests were re-verified.&lt;/p&gt;
&lt;p&gt;While this took a lot of work to get right, it felt good to get this one resolved.  It
was hard for me to quantify this to myself, but the parsing of the paragraphs always
looked like they had too many spaces.  It was nice to finally figure out why!&lt;/p&gt;
&lt;h2 id="issue-5-trailing-spaces-in-scenarios"&gt;Issue 5: Trailing Spaces in Scenarios&lt;a class="headerlink" href="#issue-5-trailing-spaces-in-scenarios" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the early development phase of the project, I wanted to get going with the
scenarios as quickly
as possible, so I copied each scenario’s Markdown text from the GFM specification
exactly as-is.  This wasn’t a
problem, except that in a small number of cases, there were lines in the scenarios that
ended in one or more whitespaces.  These trailing whitespaces raised the
&lt;code&gt;trailing-whitespace&lt;/code&gt; warning when I ran the PyLint program over the project’s
code base, as I do with each set of changes. Determined to deal with the issue later,
I added a number of comments like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pylint: disable=trailing-whitespace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to disable the Pylint warnings that occurred, knowing I would have to fix
them later.  At this point in the project, it seemed like a good time to deal with this.&lt;/p&gt;
&lt;p&gt;As this issue was largely out of sight, everything was fine.   That is, everything was
fine until I hit a
number of problems in a row that did involve these scenarios.  Instead of immediately
noticing the trailing whitespace and the comment, I started debugging each issue
without noticing either the comment or the whitespace, and was dumfounded by why the
parsing was not as was suggested
by the Markdown text that was clearly visible.
When I took a step back to really read the scenario tests, I then noticed
the comment at the top of each of the problem test functions, and then it clicked.  But
it took a lot longer than it should have.  Instead of “just dealing with it”, I decided
that refactoring was a better solution.&lt;/p&gt;
&lt;p&gt;The fix was an easy one too, something I should have thought of earlier.  The ASCII BELL
character is represented by &lt;code&gt;\a&lt;/code&gt; in Python strings, and to the best of my knowledge is
seldom used in most Python programs or Markdown text.  As it has a very low probability
of being used in any scenarios, I replaced the
terminating whitespace characters with &lt;code&gt;\a&lt;/code&gt; characters, then added &lt;code&gt;.replace("\a", " ")&lt;/code&gt;
at the end of the sample string.  It was then a simple matter of going through the
other 6 scenarios with trailing whitespaces and repeating this fix.&lt;/p&gt;
&lt;p&gt;While issues like this may seem small, having to disable a PyLint warning didn’t feel
right, even if it helped me maintain momentum at the time.  It just felt really good
to solve this issue properly.&lt;/p&gt;
&lt;h2 id="issue-6-getting-atx-headers-right"&gt;Issue 6: Getting Atx Headers Right&lt;a class="headerlink" href="#issue-6-getting-atx-headers-right" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last article, I started looking for issues after wondering if a code span
could work within an Atx Header, realizing that the specification allowed it but
my current implementation did not allow it. As stated in the preamble for
&lt;a href="https://github.github.com/gfm/#example-36"&gt;scenario 36&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The raw contents of the heading are stripped of leading and trailing spaces before being parsed as inline content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, my decision was based on my usage patterns, not the specification.
In my experience, I have only ever done Atx Headers in the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;###&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so when I read the specification, I glossed over that section, only thinking
of Atx Headers as containers for normal text.  However, based on the specification,
the following text is also allowed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;### This *is* `my` header&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a result, instead of the header text &lt;code&gt;This is my header&lt;/code&gt; being generated by the
first sample, I can use the second sample to generate the header text of
&lt;code&gt;This &amp;lt;em&amp;gt;is&amp;lt;/em&amp;gt; &amp;lt;code&amp;gt;my&amp;lt;/code&amp;gt; header&lt;/code&gt;.  Neat!&lt;/p&gt;
&lt;p&gt;The change itself was pretty simple, and confined to the &lt;code&gt;parse_atx_headings&lt;/code&gt; function.
As it was a simple change, the accompanying change in each test was also pretty
simple:  take a single Atx Header token with text, replace it with an Atx Header token
without the text, a Text token with the text, and an End token for the Atx Header.&lt;/p&gt;
&lt;p&gt;While I was concerned that the fix for this issue was going to be more widespread,
it was confined to 22 scenario tests, and was really easy to verify.&lt;/p&gt;
&lt;h2 id="issue-7-bringing-the-tabs-back"&gt;Issue 7:  Bringing The Tabs Back&lt;a class="headerlink" href="#issue-7-bringing-the-tabs-back" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking for something to finish the refactoring session with, I decided to tackle one
of the longstanding fixes that I had some reservations about: the bulk conversion
of tabs to spaces.  While it was a good fix at the time, I suspected that there
might be problems with the code blocks where all text is supposed to be preserved
literally, including tab characters.&lt;/p&gt;
&lt;p&gt;In a stroke of luck, all of the affected scenario tests are in the
&lt;code&gt;test_markdown_tabs.py&lt;/code&gt; file
and the places where tabs are important can be grouped into 2 distinct groups.
In the Markdown specification, there is a distinction between whether there is enough
whitespace for an indented code block with 4 spaces, or not with less then 4 spaces.
To address those cases, I simply added the &lt;code&gt;is_length_greater_than_or_equal_to&lt;/code&gt; and
&lt;code&gt;is_length_less_than_or_equal_to&lt;/code&gt; functions.  While I could have simply used a &lt;code&gt;not&lt;/code&gt;
modifier to get the same effect, I thought it was more readable to simply spell it
out.  For cases where the actual length was needed, the &lt;code&gt;calculate_length&lt;/code&gt; function
determines the length of the string, allowing for the length of a tab to be 4
characters while every other character is assigned a length of 1.&lt;/p&gt;
&lt;p&gt;While this wasn’t a very technical issue to fix, it helped me return things to a known
good state, with confidence that tabs were being treated properly.  Before this fix,
I was always concerned that the bulk translation of tab characters to spaces would
introduce a hard to diagnose issue.  With that translation removed, that concern went
away.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At various points in the development of PyMarkdown, I have wondered if my thinking
should be more realistic with a “two steps forward, one step back” feel to it.  Maybe
it’s just who I am, but with a few exceptions, I see almost all of this development as
stepping forward with quality, and hence, all positive.  I actually like the fact that
I am implementing some new features, then doing some refactoring, and repeating.  It
gives me a solid perception that the project is on stable footing at every stage,
accumulating little technical debt along the way.&lt;/p&gt;
&lt;p&gt;Something that struck me at this point was how easily I seemed to fall into a rhythm
that works well for me and the project:  implementing a couple of features, noting down
any issues as I implement, and then fixing a couple of the more pressing issues before
repeating the pattern.  I am not sure if that kind of a pattern that everyone else
works well with, but it seems to work well for me.  To a certain extent, it also helps
me write these articles, as writing about quality software is very different than
the development of that software.  For me, I find that they compliment each other
very well.&lt;/p&gt;
&lt;p&gt;In terms of energy, keeping that rhythm going and writing these articles is
helping to keep me charged up about the project.  While I have written my share of
parsers in my career, they have almost always been for work projects with a specific
goal and deadline to achieve.  Being freed from those restrictions does come with
it’s benefits, but not having someone looking over your shoulder means that you have
to take on that role yourself.  These articles, while initially created to talk about
my approach in creating quality software, also server the purpose of keeping me
honest and responsible to any readers.  Call it a backup plan, but it seems to be
working well!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Going back to the specification for features to implement, I decided to start at the
end and get the line breaks, autolinks, and raw html inline processing taken care of.
While I don’t use them frequently myself, they are interesting aspects to the
GFM specification, and perhaps learning about them will increase my use of them in
my everyday Markdown usage.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:Space"&gt;
&lt;p&gt;The string &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; represents a space character, which by it’s very nature, is invisible. &lt;a class="footnote-backref" href="#fnref:Space" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:Space" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Missing"&gt;
&lt;p&gt;The specification states “The paragraph’s raw content is formed by concatenating the lines and removing initial and final whitespace.”  This is the closest reference that I could find to removing whitespace.  Perhaps initial means per line? &lt;a class="footnote-backref" href="#fnref:Missing" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Starting Inline Processing</title><link href="https://jackdewinter.github.io/2020/02/24/markdown-linter-starting-inline-processing/" rel="alternate"></link><published>2020-02-24T00:00:00-08:00</published><updated>2020-02-24T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-02-24:/2020/02/24/markdown-linter-starting-inline-processing/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maybe it’s just me, but I love the feeling of completing a good round of refactoring
where I really get to focus on making sure that the foundations of the project are
stable.  If it helps any readers, I imagine it as a spa day for your project …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maybe it’s just me, but I love the feeling of completing a good round of refactoring
where I really get to focus on making sure that the foundations of the project are
stable.  If it helps any readers, I imagine it as a spa day for your project where the
project just gets some personalized attention and cleaning up.  While the project isn’t
in a perfectly clean state, I know that I performed a decent amount of tidying up in
that direction, work that will help the project as it grows.&lt;/p&gt;
&lt;p&gt;With the project cleaned up, and with the new changes to make the text blocks
continuous, it was time to start on
the inline processing.  The first three inline elements to be implemented were the
first three elements in the
&lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown (GFM) Specification&lt;/a&gt;:
backslashes, character references, and code spans.  These elements allow Markdown to
escape certain characters, replace a text sequence with a single Unicode character,
or indicate that some text is literal code.  Each of these elements has it’s own
special use, and are used very frequently when writing Markdown documents.  And if those
reasons weren’t good enough, they just happen to be the first three sections in the
specification’s inline processing section.&lt;/p&gt;
&lt;p&gt;The full record of the work detailed in this article is documented in the
project’s GitHub repository in the commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/5c175f68fbe182d052a83d43061443921aae7bc9"&gt;08 February 2020&lt;/a&gt; and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/235c0c63f6ee5cb41e1f8e71fa4081b36ba1beef"&gt;14 February 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="inline-processing"&gt;Inline Processing&lt;a class="headerlink" href="#inline-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Markdown processing, there are two main types of processing that occur: processing
to sort the text into blocks and the processing of the contents for those blocks.
Courtesy of
&lt;a href="https://github.github.com/gfm/#blocks-and-inlines"&gt;the specification&lt;/a&gt;,
another good explanation is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can think of a document as a sequence of blocks — structural elements like paragraphs, block quotations, lists, headings, rules, and code blocks. Some blocks (like block quotes and list items) contain other blocks; others (like headings and paragraphs) contain inline content — text, links, emphasized text, images, code spans, and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While it was not readily apparent on my first read of the specification, inline
processing occurs only on the content of leaf blocks that do not strictly govern their
content.  As code blocks contain the literal content for their output and HTML blocks
contain the literal HTML content for their output, inline processing is not applied to
those blocks.  Inline processing is applied to the content of the remaining blocks, the
headings blocks and the paragraph blocks, which just happen to be the most frequently
used blocks in most Markdown documents.&lt;/p&gt;
&lt;h3 id="backslash-escapes"&gt;Backslash Escapes&lt;a class="headerlink" href="#backslash-escapes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having completed most of the processing required for the leaf blocks and container
blocks, it was
time to move on to the inline processing of the content within those blocks.
The first of the inline processes to be worked on: the backslash escapes.&lt;/p&gt;
&lt;p&gt;For readers familiar with backslashes in modern programming languages, Markdown’s
usage of backslashes are similar, but with a twist.  In modern programming languages,
a backslash character is used in strings to escape the character following the
backslash, using that next character to denote a special character. For each special
character to be represented, a distinct backslash escape sequence is used to represent
it.  For example, most languages include the escape sequence &lt;code&gt;\n&lt;/code&gt; for a line feed or
end-of-line character.  This backslash escape is used so often that many programmers
use the terms “slash-en” or “backslash-en” instead of referring to the &lt;code&gt;\n&lt;/code&gt; character
sequence as the new-line character it represents.&lt;/p&gt;
&lt;p&gt;The twist that I mentioned earlier is that Markdown, unlike programming languages,
uses backslash escapes to only escape the following ASCII punctuation characters with
themselves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!"#$%&amp;amp;'()*+,-./:;&amp;lt;=&amp;gt;?@[\]^_`{|}~
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, the string &lt;code&gt;\!&lt;/code&gt; will emit the sequence ‘!’, but the string &lt;code&gt;\a&lt;/code&gt; will emit
the sequence &lt;code&gt;\a&lt;/code&gt;.  Coming from a programming background, this took a bit of getting
used to, but it makes sense.  As Markdown is used to create a human readable document,
authors should not be concerning themselves with control characters, but with how the
content is organized.  From that point of view, escaping the punctuation characters
used to denote organization makes a lot of sense.&lt;/p&gt;
&lt;p&gt;It then follows that each processing character is included in that string of
characters, and that the most prominent use of backslash escapes in Markdown is to
avoid block and inline processing.  Because a backslash escaped character is emitted as
part of the backslash processing in the parser, any other processing of that character
by the parser is effectively short-circuited. This simply allows the punctuation
character to be represented without the parser mistaking it for any kind of processing
instruction.&lt;/p&gt;
&lt;p&gt;For
example, to include the text &lt;code&gt;&amp;amp;amp;&lt;/code&gt; in your document the sequence &lt;code&gt;\&amp;amp;amp;&lt;/code&gt; can be
used to escape the ‘&amp;amp;‘ character.&lt;sup id="fnref:escapingAmp"&gt;&lt;a class="footnote-ref" href="#fn:escapingAmp"&gt;1&lt;/a&gt;&lt;/sup&gt;  Another example is that the
following text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will generate the text &lt;code&gt;- this is a paragraph&lt;/code&gt; as part of a paragraph, instead of
creating a list item containing the paragraph &lt;code&gt;this is a paragraph&lt;/code&gt;.  In both cases,
the backslash escapes are used to tell the parser to just treat the escaped character
as itself and not to perform any further processing.  As useful as that
is, backslashes escapes cannot be used in code blocks, which have been covered
previously, code spans, which are covered later in this article, or autolinks and raw
HTML, which are covered in a future article.&lt;/p&gt;
&lt;p&gt;Implementing support for backslash escapes was pretty easy, as it just required a
change in how the characters were interpreted.  As the text was still contained within
a single text block, it was just a matter of making sure the right characters were
emitted.  This was relatively easy as the processing was easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the next character a backslash?&lt;/li&gt;
&lt;li&gt;if not, emit a backslash and resume normal processing&lt;/li&gt;
&lt;li&gt;if so, check to see what character follows&lt;ul&gt;
&lt;li&gt;if that character is not in the escape list above, emit a backslash and resume normal processing&lt;/li&gt;
&lt;li&gt;if so, consume that character and emit that character&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, if there is a valid backslash sequence, emit the second character and consume
it, otherwise, emit first character (the backslash character) and continue.  The limits
on where backslashes can be used was pretty easy to implement, as there were only a few
places where they were not allowed.&lt;/p&gt;
&lt;h3 id="character-references"&gt;Character References&lt;a class="headerlink" href="#character-references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Character references are an important part of HTML, and as such, Markdown has solid
support for them built in.  Character references allow for the
inclusion of special characters into the document, without the need to rely on the
file editor to support Unicode characters.  In addition, the document’s writability and
readability is often enhanced by presenting the reader with the text &lt;code&gt;&amp;amp;copy;&lt;/code&gt; instead
of the symbol ‘©‘.&lt;/p&gt;
&lt;p&gt;Think about it this way. As a document author, you want to add the copyright symbol to
your document. Where do you find it on your keyboard?  If it is not there,
what is the clearest and easiest way to add it to the document that is not tied to a
specific editor?  Markdown addresses this issue by reusing the HTML5 method of
specifying character references.&lt;/p&gt;
&lt;p&gt;For each character reference, it starts with the ‘&amp;amp;‘ character
and ends with the ‘;’ character, with characters between to denote the type of
character to reference and what the actual reference is.  Named character entity
references are the easiest to
read, as they contain some form of the name of the character they represent, such as
&lt;code&gt;&amp;amp;copy;&lt;/code&gt; for the copyright symbol.  The full list of
named character references that are supported is at the
&lt;a href="https://html.spec.whatwg.org/multipage/entities.json"&gt;HTML5 entity names document&lt;/a&gt;. &lt;sup id="fnref:namedEntities"&gt;&lt;a class="footnote-ref" href="#fn:namedEntities"&gt;2&lt;/a&gt;&lt;/sup&gt;
As an alternative to the &lt;code&gt;&amp;amp;copy;&lt;/code&gt; named reference, the equivalent numeric references
&lt;code&gt;&amp;amp;#169;&lt;/code&gt; or &lt;code&gt;&amp;amp;#x00A9&lt;/code&gt; may be used instead.  While the end result on the rendered page
is the same, I feel that the named references are more readable than the numeric
references.
However, in cases where there is no named reference for a given Unicode character, the
numeric references are very handy.&lt;/p&gt;
&lt;p&gt;Similar to the way in which backslash escapes are
handled, there are certain blocks that the character references cannot be used in.  In
particular, they are not recognized in code blocks and code spans, but are recognized
in most other locations.  For example&lt;sup id="fnref:refExample"&gt;&lt;a class="footnote-ref" href="#fn:refExample"&gt;3&lt;/a&gt;&lt;/sup&gt;, given the following Markdown text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;```&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ouml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ouml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ouml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ouml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the character references in the fenced blocks’s info string are recognized, but the
character references within the code block are not recognized.  As such, after
translating this Markdown into HTML, the following HTML is expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"language-föö"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;f&lt;span class="ni"&gt;&amp;amp;ouml;&amp;amp;ouml;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example, as expected, the character references that feed the &lt;code&gt;class&lt;/code&gt; attribute
for the &lt;code&gt;code&lt;/code&gt; tag were translated, while the character references within the bounds of
the &lt;code&gt;code&lt;/code&gt; tag, which are used to denote a code block, are left alone.&lt;/p&gt;
&lt;p&gt;Similar to my experience in processing the backslashes, the implementation for all
three character references were processed in roughly the same manner.  Instead of a
single character to look for with backslash escapes, character references have a
set of allowable character sequences, but otherwise the processing is the same.  Once
again, the processing was really simple, just follow simple rules.&lt;/p&gt;
&lt;p&gt;However, while it was not particularly difficult in itself, determining the proper
handling of the &lt;code&gt;entities.json&lt;/code&gt; file used as a reference for HTML named entities took a
bit of thinking to get right.  The main decision was whether or not to download it
each time, cache it somewhere once downloaded, or just do a “one-time” include of it
into the project as a resource.  In the end, I
decided to take the later path, placing the file in the &lt;code&gt;pymarkdown/resources/&lt;/code&gt;
directory.  My assumption is that file does not change that often, perhaps once a month
at it’s worst.  As I added the file exactly as it was downloaded from the source at
&lt;a href="https://html.spec.whatwg.org/entities.json"&gt;the HTML5 home page&lt;/a&gt;, I believe I can check
on it from time to time, updating the file when required.  With that decision made, I
just needed to do some research on the best way to include resources into a project,
and the rest was once again just following well documented instructions.&lt;/p&gt;
&lt;h3 id="code-spans"&gt;Code Spans&lt;a class="headerlink" href="#code-spans" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code spans are similar to code blocks, in that they both protect the characters that are
within their confines.  However, while code blocks are designed to protect multiple
lines of text, such as source code examples, code spans are designed to protect text
within a single paragraph.  To create
a code span, the text to be protected is simply surrounded by one or more backtick (‘`’)
characters on each side, making sure that the number of starting backticks and closing
backticks are the same.&lt;/p&gt;
&lt;p&gt;As a simple example, the Markdown &lt;code&gt;`foo`&lt;/code&gt; produces the text &lt;code&gt;foo&lt;/code&gt; within a special
HTML tag that has special styling associated within it. Similar to how code blocks
protect blocks of text that are already formatted in a specific way,  these code spans
use that styling  are used to specify targeted text that
already has meaning attached to it.  In my articles, as with other blog authors that
I have read, I use code spans to indicate that certain strings have literal meaning to
them, such as the literal text to type in at a keyboard.&lt;/p&gt;
&lt;p&gt;One good example of this from the previous section are the examples of the various
Markdown sequences needed to produce the copyright symbol.  If I had simply added
the text &lt;code&gt;&amp;amp;copy;&lt;/code&gt; to the Markdown document, it will be interpreted as a character
sequence, and the ‘©‘ symbol will be generated.  By placing backticks around
that text, such as &lt;code&gt;`&amp;amp;copy;`&lt;/code&gt;, those characters are contained within a code span
and the text is preserved literally.  And for that last sentence where I needed to
include the literal text including backticks, I just made sure to include more
backticks around the text than were contained within the text,
such as &lt;code&gt;`` `&amp;amp;copy;` ``&lt;/code&gt;.&lt;sup id="fnref:doubleBacktick"&gt;&lt;a class="footnote-ref" href="#fn:doubleBacktick"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I knew that the parsing and rendering of the tokens was about to get more complex in
order to properly implement the code span processing.  To keep the code span, the
text before it, and the text after it in the right order, I changed the inline parsing
to allow for a markdown token to be emitted.  When the new code span Markdown token is
emitted, the surrounding code first adds a new text block containing any text
collected up until that point, emits the new token, and then resets the
collected text back to the empty string.  This correctly ordered the tokens, and
is generic enough to hopefully future-proof similar parsing in the future.&lt;/p&gt;
&lt;p&gt;There were only a small number of issues with the existing scenarios that needed to be
addressed, now that code spans were handled properly.  Fixing those tests was simple
and just required resampling the parser’s output.  But during that testing, I realized
I had made a mistake with the handling of one of the header blocks.  When I wrote the
original code for the Atx Header blocks, as documented in the article on
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/#group-2-headers"&gt;Parsing Normal Markdown Blocks&lt;/a&gt;,
I hadn’t thought about code spans or other more complex inline elements as part of an
Atx header.  As such, I therefore I wrote a simple implementation that represented the
header text as a simple string within the token.&lt;/p&gt;
&lt;p&gt;Double checking the specification, I verified that there were no restrictions on using
code spans within a SetExt or Atx header block.  As such, I needed to rewrite the
parsing code to support having Atx header blocks contain text blocks, instead of
simply including the enclosed text in the Atx Markdown token.  Instead of tackling
that as part of this group of code, I decided to look to see if there were any other
“little” things that I missed, and I found a number of them.&lt;/p&gt;
&lt;p&gt;Basically, of the issues that I found, most of them were small variations of the
scenarios, things that just got lost in the shuffle or lost in the translation.  As
such, I thought it would be best to take some time, try and note them all down, and
then tackle them together before continuing.  As the only scenario test that was
affected was example 339, I believe that temporarily skipping that test and taking the
time to fix those issues was the right call.  It would mean that I would have to
wait a bit before I could say that code spans were done, but when they were done, I
would know that I did them the right way.  That was, and still is, important to me.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I usually read a specification thoroughly and identify most of the edge cases on my
first pass.  However, I must admit that I dropped the ball with that on this project.
And to be totally honest, I don’t expect that it will be the last time either.  It’s
a big specification, and there are going to be hits and misses along the way.  What
matters to me is not whether I make the mistakes, but that I don’t have enough use
cases, scenarios, and tests to help me identify any mistakes.  With 673 scenarios
already identified in the specification, I know the coverage for scenario will be good,
but there will be gaps that I will still need to address.  So whether it is my dropping
the ball or the specification dropping the ball, the work on the these three inline
elements has improved my confidence that I am prepared to deal with any such issues
that come up.&lt;/p&gt;
&lt;p&gt;A good example of this is my reading of the specification around the use of Atx headers.
I know I missed the part where the specification, in the preamble to
&lt;a href="https://github.github.com/gfm/#example-36"&gt;example 36&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Contents are parsed as inlines:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In retrospect, not only is this one of the few times inlines with Atx headers was
mentioned, but there is also only one scenario that covers them, example 36. So, from
one point of view, the specification could have more scenarios dealing with inlines
and Atx headers.  From an additional point of view, it was mentioned and I just
missed it.  From my personal point of view, it doesn’t matter either way.  What matters
is that I had sufficient process and tools in place to catch it.  And once I saw that
issue, it helped me take a deeper look at some of the other tests, finding small issues
with the output from those tests.&lt;/p&gt;
&lt;p&gt;From a quality point of view, my confidence was actually holding steady or increasing.
As I mentioned a couple of paragraph ago, I don’t expect to be perfect, I just hope
to have the right tools and processes in place to help me figure out when I miss
something or get something wrong.  Sure, I realized that taking some time to work on
fixing these issues was going to put my work on the linter on hold for another week.
But my confidence that the linter was on solid footing actually increased because I
found some issues.&lt;/p&gt;
&lt;p&gt;For me, quality is not about being perfect, it’s about movement in the right direction.
And finding those issues, was a step in that right direction.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After documenting those issues at the end of the &lt;code&gt;test_markdown_list.py&lt;/code&gt; file, I
thought it was best to do a quality pass and resolve those issues before moving on to
other inline processes.  As such, the next article focuses on what bugs I found in the
scenario tests, and how I addressed them.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:escapingAmp"&gt;
&lt;p&gt;Just to be complete, the character escapes in the next section also provide a way to include the ‘&amp;amp;‘ sequence in Markdown.  Using character references, this is by using the text &lt;code&gt;&amp;amp;amp;amp;&lt;/code&gt; instead of &lt;code&gt;\&amp;amp;amp;&lt;/code&gt;.  While both produce identical output, I prefer the first for it’s clarity.  Your mileage may vary. &lt;a class="footnote-backref" href="#fnref:escapingAmp" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:namedEntities"&gt;
&lt;p&gt;To keep things simple for parsers, this file is maintained as a JSON file that is easily interpreted with a small amount of code in most current languages. &lt;a class="footnote-backref" href="#fnref:namedEntities" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:refExample"&gt;
&lt;p&gt;Note that this example is a slightly modified version of &lt;a href="https://github.github.com/gfm/#example-330"&gt;example 330&lt;/a&gt; from the GFM specification. &lt;a class="footnote-backref" href="#fnref:refExample" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:doubleBacktick"&gt;
&lt;p&gt;For a good example of this, see &lt;a href="https://github.github.com/gfm/#example-339"&gt;example 339&lt;/a&gt; in the GFM specification. &lt;a class="footnote-backref" href="#fnref:doubleBacktick" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Taking Time to Refactor -- Post-Block Implementation</title><link href="https://jackdewinter.github.io/2020/02/17/markdown-linter-taking-time-to-refactor-post-block-implementation/" rel="alternate"></link><published>2020-02-17T00:00:00-08:00</published><updated>2020-02-17T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-02-17:/2020/02/17/markdown-linter-taking-time-to-refactor-post-block-implementation/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The title of the article is not very glamorous, but it describes the changes I made to
the project after the block processing and before the inline processing.  From a project
completeness viewpoint, all of the block elements were done except for table blocks and
link reference definitions, and …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The title of the article is not very glamorous, but it describes the changes I made to
the project after the block processing and before the inline processing.  From a project
completeness viewpoint, all of the block elements were done except for table blocks and
link reference definitions, and those were temporarily shelved.  The big decision before
me was whether or not to plow ahead with inline processing or take some time to clean
things up before continuing.&lt;/p&gt;
&lt;p&gt;After weighing the options in my head for a while, I decided to take some time to tidy
up my work on my PyScan script and document it in
&lt;a href="https://jackdewinter.github.io/2020/01/13/measuring-testing-in-python-scripts/"&gt;this article&lt;/a&gt;.
Part of that decision was based on the time of year (it was the holiday season) and the
other part of the decision was based on timing for the PyMarkdown project.  At this
point, the blocks were mostly finished and the inline processing was the next feature
to be implemented.  To me, it just made good sense to clean up the PyScan tool, write
an article or two on it, and refactor some of the PyMarkdown project before moving
forward with inline processing.&lt;/p&gt;
&lt;p&gt;The full record of the work detailed in this article is documented in the
project’s GitHub repository in the commits between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/98b479816d74d04715a1f2c23c6941836ad1a70c"&gt;20 December 2019&lt;/a&gt; and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/eebbf07d72836f14fb3b20ef2d3c1e0139e942a2"&gt;31 January 2020&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="refactor-1-extracting-function-groups"&gt;Refactor #1: Extracting Function Groups&lt;a class="headerlink" href="#refactor-1-extracting-function-groups" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first things that I wanted to refactor were the generic helper functions used for
parsing and the helper functions used for dealing with HTML.  While the parsing helper
functions were already at the end of the &lt;code&gt;tokenized_markdown.py&lt;/code&gt; file, it made sense to
move the HTML helper functions down to the same location at the end of the file.  Once
that was accomplished, it took me about 2 milliseconds to figure out that they should
be in their own modules.  Hence, the parsing helper functions were moved out into the
&lt;code&gt;parser_helper.py&lt;/code&gt; file and the HTML helper functions were moved out into the
&lt;code&gt;html_helper.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Along the way, proper unit tests were added for these functions.  As part of the normal
process of parsing the Markdown document, they had been battle tested by their usage,
but having their own dedicated unit tests was the right thing to do.  The unit tests
for the parsing helper functions were all added with filenames that are the string
&lt;code&gt;test_&lt;/code&gt; followed by the name of the distinct function that they test.  As the HTML
helper functions more tightly coupled that the parser functions, I kept their unit
tests coupled by added all of them to the &lt;code&gt;test_html_tags.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;This refactoring was performed to reduce the complexity and maintenance of the main
module.  By moving these functions to well-defined modules of their own, I instantly
found that it was easy to find functions in either module, instead of search for them
at the end of the main file.  For me, that feedback is always a good sign that the
refactor was the right thing to do.&lt;/p&gt;
&lt;h2 id="refactor-2-reducing-complexity-with-is_character_at_index_one_of"&gt;Refactor #2: Reducing Complexity with &lt;code&gt;is_character_at_index_one_of&lt;/code&gt;&lt;a class="headerlink" href="#refactor-2-reducing-complexity-with-is_character_at_index_one_of" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I was looking through the code for the previous refactoring, I noticed that there
were a number of functions that were “too big”.  From experience, I find that these
type of functions usually have more than one responsibility, and reducing those
responsibilities reduces their complexity.  The first example of this that I found was
the &lt;code&gt;is_fenced_code_block&lt;/code&gt; function, which included the following series of lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;skip_whitespace_check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"~"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"`"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the first two lines were specific to the function, the last two lines followed a
pattern that happened again and again in that module.  Because those last two lines are
really checking to see if the next character is one of the two values, I extracted
that logic into a new &lt;code&gt;is_character_at_index_one_of&lt;/code&gt; function for the &lt;code&gt;ParserHelper&lt;/code&gt;
module, and added tests into &lt;code&gt;test_is_character_at_index.py&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;This refactoring had a noticeable impact on the complexity of each of the modules that
used the new function.  This impact was a reduction in the number of branches in each
function, with each count decreasing by one for each character to look for.  As an
example, the &lt;code&gt;is_fenced_code_block&lt;/code&gt; code above went from the snippet above to the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extracted_whitespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;skip_whitespace_check&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_one_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fenced_code_block_start_characters&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is a reduction from 5 branches down to 3 branches, making that function and that
module less complex in the process.  In addition, instead of reading those two lines
and trying to figure out what they are doing, the function call to the
&lt;code&gt;is_character_at_index_one_of&lt;/code&gt; function eliminates the “what is it doing” step, making
it easier for someone reading the code to understand those lines.&lt;/p&gt;
&lt;h2 id="refactor-3-simplifying-the-close_open_blocks-function"&gt;Refactor #3: Simplifying The &lt;code&gt;close_open_blocks&lt;/code&gt; Function&lt;a class="headerlink" href="#refactor-3-simplifying-the-close_open_blocks-function" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This refactoring was a simple one, but for me it had a noticeable impact on helping
me get a clearer understanding of the function.  Prior to the change, the
&lt;code&gt;close_open_blocks&lt;/code&gt; function had 2 distinct responsibilities: determine if the element
on the top of the stack needed to be closed, and if so, remove that element from the
top and close the block. While I was able to read the function and use it properly,
I often had a little question in my head about whether or not I was using the
function properly.&lt;/p&gt;
&lt;p&gt;After the refactoring, the code containing the first responsibility remained in the
&lt;code&gt;close_open_blocks&lt;/code&gt; function and the code for the second responsibility was placed in
the new &lt;code&gt;remove_top_element_from_stack&lt;/code&gt; function.  When I looked at those two functions
during the writing of this article, I was able to see a very clear picture of what each
function is doing, with clear delineations of those responsibilities.  The
&lt;code&gt;close_open_blocks&lt;/code&gt; implements a while loop with 4 distinct ways to exit out of the
loop, and the &lt;code&gt;remove_top_element_from_stack&lt;/code&gt; function remove the top element, adding
the appropriate tokens to the document’s token stream.  Clear and concise, hence easy
to read.&lt;/p&gt;
&lt;p&gt;This function is core to the processing of the blocks, and making it clearer was
important to me.  While it was a small refactor, it increased my confidence that the
function, and any functions that called it, were operating properly.  I believe that my
confidence increased because it went from one “messy” function to two separate
functions with very clear intentions.  By rewriting the code into two functions and
keeping each function simple, the messiness vanished.&lt;/p&gt;
&lt;h2 id="refactor-4-cleaning-up-the-determine_html_block_type-function"&gt;Refactor #4: Cleaning Up the &lt;code&gt;determine_html_block_type&lt;/code&gt; Function&lt;a class="headerlink" href="#refactor-4-cleaning-up-the-determine_html_block_type-function" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ll admit, the next candidate, the &lt;code&gt;determine_html_block_type&lt;/code&gt; function was a mess.
At 88 lines long and 24 branches, it was definitely a function with too many
responsibilities.  Similar to the work documented in the previous section, I started to
take a look at this function and try and figure out what it was doing.  When I finished,
I came away with three responsibilities that the function was performing:
handling the special case (html block types 1 to 5), handling the normal cases (html
block types 6 and 7), and some cleaning up of the results for html block type 7.  That
was two responsibilities too many.&lt;/p&gt;
&lt;p&gt;Similar in essence to the work above, the &lt;code&gt;determine_html_block_type&lt;/code&gt; function was
broken up along the identified lines of responsibility.  The
&lt;code&gt;check_for_special_html_blocks&lt;/code&gt; function was created to handle the special cases, the
&lt;code&gt;check_for_normal_html_blocks&lt;/code&gt; function was created to handle the normal cases, and the
&lt;code&gt;determine_html_block_type&lt;/code&gt; function contained orchestration logic for calling those
two functions, plus the special cleaning up for the html block type 7 logic.&lt;/p&gt;
&lt;p&gt;While this function isn’t as core to the parser as the &lt;code&gt;close_open_blocks&lt;/code&gt; function,
its refactoring had a similar effect.  Each of the added functions contained a single
responsibility, this making the usage of all three functions together easy to determine.
For me, that was good progress.&lt;/p&gt;
&lt;h2 id="refactor-4-clearing-pylint-warnings"&gt;Refactor #4: Clearing PyLint warnings&lt;a class="headerlink" href="#refactor-4-clearing-pylint-warnings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the writing of this article, the first thought that came to mind when writing
this section was that I should be ashamed that it took me until this point to address
the PyLint warnings on the project.  Taking a bit of a deeper look into how I
felt about this, I believe it had to do with where I draw the line between
“just playing around” and “real code”.  For me, I believe this transition is when a
project moves from a Proof-Of-Concept project to a Real™ project.  I am not 100%
sure, but I believe that it was at this point, give or take a couple of days, that I
felt that this was a real project.  While it is hard to pin down why, I believe that
having the block section of the specification done helped my mind crystalize that
the project is going to happen.  It was as if someone had whispered “This is going
to happen” in my ear, and that I needed to tidy things up.  Once I figured that out,
it just felt like a natural transition, nothing to be ashamed about.&lt;/p&gt;
&lt;p&gt;Now that this was a Real™ project, I needed to ensure that any PyLint
warnings were addressed or suppressed.  While I prefer to address these issues, some of
the warnings, such as the &lt;code&gt;too-many-arguments&lt;/code&gt; warning, occupy one of my grey areas.
Especially
with parsers, a lot of state information needs to be passed around, to ensure the
parsing is performed properly.  This often results in functions that take too many
arguments.  At this stage of the project, I decided to suppress those warnings, with a
number of &lt;code&gt;too-many-locals&lt;/code&gt; warnings until later in the project, when I have a better
sense of how to optimize those function calls for this parser.&lt;/p&gt;
&lt;p&gt;This refactoring helped me remember an old adage a friend taught me about software:
“It isn’t if there is a problem with your code, it is a question of how often the
problems within your code occur.”  More of a realist than a pessimist, he figured that
each line of code brought a new set of issues and bugs with it, and it was our job to
discover and handle those issues that our users would find before they found them.
For me, it was a good refresher in humility when developing software.&lt;/p&gt;
&lt;h2 id="refactor-5-reducing-complexity-with-the-92at_index92-functions"&gt;Refactor #5: Reducing Complexity with the \&lt;em&gt;at_index\&lt;/em&gt; Functions&lt;a class="headerlink" href="#refactor-5-reducing-complexity-with-the-92at_index92-functions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ever since the section above on
&lt;a href="https://jackdewinter.github.io/2020/02/17/markdown-linter-taking-time-to-refactor-post-block-implementation/#bob"&gt;parser functions&lt;/a&gt;,
I had been slowly searching for other patterns that I could refactor.  In the process, I
found a group of patterns that weren’t complex, but would benefit from a small
refactor.  Basically, a refactoring of that pattern wouldn’t make a lot of
difference in reducing the number of branches, but it would reduce the complexity of
the functions by making them easier to read.&lt;/p&gt;
&lt;p&gt;The group of patterns that I found all centered around finding out whether or not a
character or a string was at a given location in the string.  Specifically, the parser
contained three of these patterns that I felt were worth extracting into their own
functions: &lt;code&gt;is_character_at_index&lt;/code&gt;, &lt;code&gt;are_characters_at_index&lt;/code&gt;, and
&lt;code&gt;is_character_at_index_not&lt;/code&gt;.  None of these functions would facilitate a large
improvement, but the change from the following text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;start_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s2"&gt;"9"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ParserHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_character_at_index_one_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;line_to_parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;produces more readable code by simply stating the intent of those lines, instead of
leaving the reader to interpret them.&lt;/p&gt;
&lt;p&gt;While I admit that it wasn’t a big change, to me this refactoring provided some extra
confidence that the project was getting to a cleaner place.  Sometimes refactoring
produces big, measurable impacts, and sometimes they produce little ripples that are
barely noticeable.  However, sometimes those little ripples can mean a lot, and worth
a lot.&lt;/p&gt;
&lt;h2 id="refactor-6-increasing-code-coverage"&gt;Refactor #6: Increasing Code Coverage&lt;a class="headerlink" href="#refactor-6-increasing-code-coverage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a number of refactors to do with parsing, I noticed that the PyScan numbers
for code coverage were in the high nineties, which is very good for a number of
projects.  However, in a project that was designed from the ground up for high
code coverage numbers, such as the PyMarkdown project, there is almost always room
to do a bit better.&lt;/p&gt;
&lt;p&gt;In the case of the implementation of the HTML blocks, I implemented defensive
programming to try to ensure that edge cases were protected against.  In re-reading
the HTML block specification a couple of times, the focus of the specification seemed
to be focused on the main use cases, not the edge cases.  As such,
the code coverage report gave me good input on how to add 4 new use cases that helped
ensure that the edge cases for HTML blocks were fully covered.&lt;/p&gt;
&lt;p&gt;This type of refactoring is a difficult one for me to justify to some people, but I
feel strongly about it.  The justification centers around what level of code coverage
is considered “good enough”.  For myself, there are 2 main factors that weigh into my
decision on what is good enough with code quality: was the project designed with
testing in mind and what is the effort required to address the next issue.  In this
case, as minimal effort was required to add the 4 simple scenario tests to address the
issue, I would easily argue that it wasn’t good enough.  From my point of view, the
small cost easily justified the benefit.&lt;/p&gt;
&lt;h2 id="refactor-7-translating-token-strings-to-actual-tokens"&gt;Refactor #7: Translating Token Strings to Actual Tokens&lt;a class="headerlink" href="#refactor-7-translating-token-strings-to-actual-tokens" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having made the jump in my head from a Proof-of-Concept project to a Real™
project, I decided it was time to change the stack tokens and Markdown tokens from
simple text strings to actual token objects.  Up to this point, I was more concerned
that the tokens looked right in the output stream, and there were only a relatively few
number of cases where that output needed to be interrogated later.  With inline
processing on the horizon, which would heavily make use of token content, it made sense
to me to undergo this change before the inline processing started.&lt;/p&gt;
&lt;p&gt;The two places where I had made this tradeoff were the stack tokens and the Markdown
document tokens.  The stack tokens denote where in the processing the parser is and
the Markdown document tokens denote what was found during the processing.  In both
cases, it was more important to me to see the right patterns being parsed than to tie
them down to a given structure.  Based on experience, I wanted to do the least possible
work to get to this point, and then have the structure for each object emerge.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;StackToken&lt;/code&gt; object, the structure that emerged was pretty simple.  Each class
is responsible for any of it’s own variables, but also for providing a read-only, text
version of these variables, assigned to the base class’s &lt;code&gt;extra_data&lt;/code&gt; variable.  In this
way, the base class can include a number of the useful functions without requiring any
knowledge about the child classes.  By implementing the &lt;code&gt;__str__&lt;/code&gt;, &lt;code&gt;__repr__&lt;/code&gt;, &lt;code&gt;__eq__&lt;/code&gt;,
and &lt;code&gt;generate_close_token&lt;/code&gt; in this way, each child class was kept very simple and
straightforward.  In addition, instead of using Python’s &lt;code&gt;isinstance&lt;/code&gt; function to figure
out the type of token, I added &lt;code&gt;is_*&lt;/code&gt; methods for each token type to make the code
referencing the tokens more readable.&lt;/p&gt;
&lt;p&gt;The refactoring for the &lt;code&gt;MarkdownToken&lt;/code&gt; object was almost the same as for the
&lt;code&gt;StackToken&lt;/code&gt; object, but with a couple
of key differences.  With the &lt;code&gt;StackToken&lt;/code&gt;, the token itself was the main focus of the
object, whereas with the &lt;code&gt;MarkdownToken&lt;/code&gt;, it is the data contained within the token
that is key.  The other big difference is that &lt;code&gt;MarkdownToken&lt;/code&gt; objects are the artifacts
that will be consumed and analyzed by the PyMarkdown project, not just an internal
representation.  As I had a lot of positive success with the design and use of the
&lt;code&gt;StackToken&lt;/code&gt; class, I modelled the &lt;code&gt;MarkdownToken&lt;/code&gt; class in a similar fashion, keeping
in mind the differences and altering the design to properly accommodate them.  From a
design point of view, things didn’t change things that much, but I needed to make sure
those objects look and function right, as they are very visible.&lt;/p&gt;
&lt;p&gt;This refactor was a long time coming, but I felt that it was the right time to do it.
As I mentioned in previous sections, the project felt more like a Real™ project
and not a proof of concept.  With a good bulk of the parsing completed, and with a
solid opinion of how I was going to orchestrate the remaining pieces, it was the right
time to nail down how those tokens would look to users of the project.  While I could
have done that earlier in the project, I believe that I wouldn’t have been able to
do so with the same confidence that I made the right choice.  For this project, I
believe that leaving the tokens in the raw form to this point was the best move
possible.&lt;/p&gt;
&lt;h2 id="refactor-8-consolidating-text-blocks"&gt;Refactor #8: Consolidating Text Blocks&lt;a class="headerlink" href="#refactor-8-consolidating-text-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of all the refactors that I have talked about in this article, this refactor was the
one that I really needed to do.  Inline processing addresses the group of features that
expand on Markdown text within the blocks, and a lot of those processes assume that the
text within their blocks is one long string to process.  Currently, the text tokens
were distinct and disjoint, each one added in the order they were processed.  To get
ready for inline processing, those text tokens needed to be consolidated.&lt;/p&gt;
&lt;p&gt;There were two possible paths to take to accomplish this:  deal with the processing as
the text tokens were added or deal with them in a subsequent processing step.  As I want
to keep the processing logic as simple as possible, I decided that a follow-up step to
consolidate those tokens was the best course of action.  To accommodate this change, I
added the &lt;code&gt;coalesce_text_blocks&lt;/code&gt; function to simply go through the document tokens,
look for 2 text tokens beside each other, and append the second token’s text to the
first token.  Then, in the &lt;code&gt;transform&lt;/code&gt; function, instead of just returning the results
from the &lt;code&gt;parse_blocks_pass&lt;/code&gt; function, those results were passed to the
&lt;code&gt;coalesce_text_blocks&lt;/code&gt; and those were returned.&lt;/p&gt;
&lt;p&gt;While this change was a relatively small change, it impacted the token output for a lot
of the test cases.  In a meaningful way, that impact increased my confidence that
tackling it was the right choice to complete before inline processing started.  The
impact of the change on the test cases validated that it was a far reaching change,
one that was better to have happen before the next stage of processing.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike the other articles in this series, this article was about how I took a bit
of a breather and focused on improving the quality of the PyMarkdown project.  As
the next set of features involves inline processing of text blocks, I believe
whole heartedly that taking that break to focus on refactoring increased my confidence
that I was on the right track with the parser.  &lt;/p&gt;
&lt;p&gt;Why do I feel that way?&lt;/p&gt;
&lt;p&gt;Looking into the near future, I know that inline processing will increase the
complexity to the project, and any effort to reduce the project’s complexity ahead of
that will directly help reduce the complexity of the inline processing.  Further into
the future, there are extensions to
Markdown that I will need to add that will also increase the complexity of the
project.  Add to that my plans to comply with other Markdown specifications, such as
the CommonMark specification, which will also increase the complexity.&lt;/p&gt;
&lt;p&gt;Why refactor? I want to keep the project simple and uncomplicated.  From a software
quality point of view, each refactor makes the project more simple and more
uncomplicated.  While some of the changes didn’t move the needle on the software
quality meter much, each change helps.&lt;/p&gt;
&lt;p&gt;In the end, I refactor projects to keep them simple.  As Einstein said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make everything as simple as possible, but not simpler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having teased the addition of inline processing to the project for most of this
article, the next article will be on the implementation of the first 3 aspects of
inline processing that I tackled.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Adding HTML Blocks</title><link href="https://jackdewinter.github.io/2020/02/10/markdown-linter-adding-html-blocks/" rel="alternate"></link><published>2020-02-10T00:00:00-08:00</published><updated>2020-02-10T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-02-10:/2020/02/10/markdown-linter-adding-html-blocks/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed most of the Markdown block elements, as documented
in the last two articles on
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;leaf blocks&lt;/a&gt; and
&lt;a href="https://jackdewinter.github.io/2020/02/03/markdown-linter-adding-block-quotes-and-lists/"&gt;container blocks&lt;/a&gt;,
I wanted to go back and revisit the HTML blocks that I deferred.  For anyone following
this series, in the
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/#group-4-stopping-at-a-good-place"&gt;Stopping At A Good Place section&lt;/a&gt;
of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having completed most of the Markdown block elements, as documented
in the last two articles on
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;leaf blocks&lt;/a&gt; and
&lt;a href="https://jackdewinter.github.io/2020/02/03/markdown-linter-adding-block-quotes-and-lists/"&gt;container blocks&lt;/a&gt;,
I wanted to go back and revisit the HTML blocks that I deferred.  For anyone following
this series, in the
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/#group-4-stopping-at-a-good-place"&gt;Stopping At A Good Place section&lt;/a&gt;
of the “Parsing Normal Markdown Blocks” article, I determined that there were 3 types
of leaf blocks that would be difficult to implement, so I deferred them.  Between
my lack of use most of those deferred features and my distinct status as the first
user of the parser, I thought this was a decent trade off in the short run.  With
increased confidence from implementing the other block types, I thought it was
a good time to deal with this block type.&lt;/p&gt;
&lt;p&gt;Before continuing, I believe it is important for me to highlight some information about
HTML blocks in Markdown.  I have never needed to use HTML
blocks or raw HTML (covered in a later article) in any of my own Markdown documents.
Quick research revealed that there are some interesting cases where injecting HTML
blocks is a benefit.  However, that same research also noted that allowing either type
of HTML in Markdown is a potential security issue, and as such, may be disabled for a
given Markdown-to-HTML generator.  Regardless of my usage patterns or security patterns,
I wanted to be sure to include it in the PyMarkdown project for completeness.&lt;/p&gt;
&lt;p&gt;The full record of the work detailed in this article is documented in the
project’s GitHub repository in the commit for
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/24fd972aef725bc55659ad3c2e7c1b93737a1874"&gt;20 December 2019&lt;/a&gt;.
This work includes implementing the parsing logic for the HTML Blocks as documented in
the GFM specification and implementing the parsing to pass all of the scenario tests
for HTML blocks that were previous entered.&lt;/p&gt;
&lt;h2 id="why-did-i-defer-html-blocks"&gt;Why Did I Defer HTML Blocks?&lt;a class="headerlink" href="#why-did-i-defer-html-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The HTML blocks were one of those 3 deferred types because a quick reading of the
specification lead me to believe the HTML block implementation would be tricky.&lt;/p&gt;
&lt;p&gt;Why?  Take a minute and read or browse the
&lt;a href="https://github.github.com/gfm/#html-blocks"&gt;HTML blocks section&lt;/a&gt; of the
GitHub Flavored Markdown (GFM) Specification.  Don’t worry, I’ll wait while you do that.&lt;/p&gt;
&lt;p&gt;Done?  What did you think?  My initial read of the specification made me think that it
was going to be a complete mess to figure out properly.  After a walk to clear my head,
I took another look at the section.  When I factored in the work I did to implement the
container blocks, this section looked like it would be tedious, but not too bad.  After
handling container blocks within container blocks, the straight parsing of a leaf block
wouldn’t be too bad. Right?&lt;/p&gt;
&lt;p&gt;I admit, it still looked kind of daunting to me.  From my observations, the 42 use
cases for
the HTML blocks was far more than the count for all of the other block groups
&lt;sup id="fnref:countScenarios"&gt;&lt;a class="footnote-ref" href="#fn:countScenarios"&gt;1&lt;/a&gt;&lt;/sup&gt; except for the list items group, at 47 use cases. And yes, the count
is mostly larger than the count for container blocks (with block quotes at 22 use
cases) and one half of the use cases for list blocks (with lists at 25 use cases and
list items at 47 use cases).  The data
backed my daunting feeling up, which was a relief.  Thinking about how I got to that
feeling, I realized that in reading the specification, I was telling myself a
story about how hard it would be to implement based on the sheer number of use cases.
So how was I going to change that narrative I was telling myself?&lt;/p&gt;
&lt;h2 id="changing-the-narrative"&gt;Changing The Narrative&lt;a class="headerlink" href="#changing-the-narrative" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In &lt;a href="https://jackdewinter.github.io/2020/02/03/markdown-linter-adding-block-quotes-and-lists/#what-was-my-experience-so-far"&gt;the last article&lt;/a&gt;,
I mentioned that one of my family’s favorite sayings is: “Stuff happens, pick yourself
up, dust yourself off, and figure out what to do next.”  “Stuff happens” was the
decision to defer the HTML blocks, “pick yourself up” was the decision to pick them up
again, “dust yourself off” was figuring out why I deferred the blocks, leaving the
“figure out what to do next” part.  One of my favorite tools to figure out what to do
next is to see if I am able to change the narrative, or story, with whatever it is that
I am doing.&lt;/p&gt;
&lt;p&gt;Why is this important?&lt;/p&gt;
&lt;p&gt;There are facts and opinions
that are part of every story.  Did the main character go to the cantina before boarding
the freighter with the smuggler?  That is a fact.  Whether or not the captain of that
freighter is a smuggler can be an opinion, depending on supporting facts.  How much
trust the main character had in that smuggler when boarding the freighter is mostly an
opinion.  The closer something is to a fact, the harder it is to change. Opinions can
be changed in many cases, if you can find the right story to tell.&lt;/p&gt;
&lt;p&gt;The HTML blocks having 42 use cases to define it’s behavior is a fact, and facts do not
change easily.  Taking a deeper look at the 7 categories at the
start of the specification’s section on HTML blocks, I can make a good argument that
there are 3 sets of HTML tags instead of the 7 presented:  the meta tags, the special
tags, and everything else.  Furthermore, the first 20 use cases present general cases
while the next 18 use cases, and the last 4 use cases talk about specific rules and why
they were specified.&lt;/p&gt;
&lt;p&gt;Given this information, I can change the story I am telling myself by breaking down
the previous story into smaller stories, each with a specific focus.  Instead of one
group of 42 use cases, I can
have 3 smaller groups: 1 for general HTML blocks with 20 use cases, 1 for specific
HTML blocks with 18 use cases, and finally a “wrap-up” group of 4 use cases that better
explains why the specified rules are important.&lt;/p&gt;
&lt;p&gt;Why is this better?&lt;/p&gt;
&lt;p&gt;At 42 use cases for HTML blocks, it is the second biggest block
of use cases, and is somewhat scary.  Breaking that group up into 2 groups of about 20
use cases followed by a small group with 4 example use cases is something I can
comprehend better, implement better, therefore removing my concerns about the large
scope.&lt;/p&gt;
&lt;p&gt;In addition, experience has taught me that when translating use cases to scenario tests,
the last 2 to 3 translations are frequently show stoppers or require major reworking to
properly translate and get working.
With a big group of 42 use cases, I know I would be expecting that behavior to happen,
with a large amount of rework to do when it happened.  After breaking down the problem
into the 3 smaller groups, I was fairly confident that if the same situation occurs, the
amount of rework will be limited to approximately 20 scenario tests.  For me, reducing
that perceived effort helped me keep my confidence up instead of having it take a hit.
Instead of “when it happens” with the 42 use cases, it became “if it happens” with the
smaller groups of 20 use cases.&lt;/p&gt;
&lt;h2 id="let-the-implementation-begin"&gt;Let The Implementation Begin!&lt;a class="headerlink" href="#let-the-implementation-begin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a boost to my confidence in place, I was able to get a decent amount of work
completed on the HTML blocks, wedged between shopping and work during the end of the
holiday season.  Despite my initial concerns
about the size and complexity of this feature, the development went pretty smoothly.
Given how it went, I believe it lends support to my opinion that breaking down the use
cases into the 3 groups was definitely the right thing to do.&lt;/p&gt;
&lt;p&gt;For those not familiar with Markdown and HTML, there some basic rules for HTML blocks,
and then the 3 categories of HTML blocks themselves: the meta tags, the special tags,
and everything else.  The basic rules are pretty simple.  HTML blocks are always
started with tags that start at the beginning of a new line, and once the start
condition is met for one of the 7 block types, only the matching end condition finishes
off the HTML block.  In some cases, the end conditions can be met on the same line, and
in some cases, the end conditions make sense… and in some they don’t. At least not
without understanding the rules!&lt;/p&gt;
&lt;h3 id="meta-tags"&gt;Meta Tags&lt;a class="headerlink" href="#meta-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Block type 1 contains what I refer to as the “meta tags”, because those tags usually
contain information that is at a higher level than normal tags, such as script
information or style information.  For anyone familiar with authoring HTML, the
Markdown interpretation of these tags is almost the same as in a raw HTML document.
The start
condition is that one of the strings &lt;code&gt;&amp;lt;script&lt;/code&gt;, &lt;code&gt;&amp;lt;pre&lt;/code&gt;, or &lt;code&gt;&amp;lt;style&lt;/code&gt; are present,
followed by whitespace, the string &lt;code&gt;&amp;gt;&lt;/code&gt; or the end of the line.  The end condition is
that one of the strings &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;/style&amp;gt;&lt;/code&gt; are present, though the
tags specified in the start condition and end condition do not need to match each
other.&lt;/p&gt;
&lt;p&gt;As such, the following text is considered a complete HTML block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
h1 { font-size: 140%; font-weight: bold; border-top: 1px solid gray; padding-top: 0.5em; }
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in the last example, while the Markdown specification considers it a complete
HTML block, it is not a valid HTML snippet.  The Markdown specification does not
specify any validation of the produced output, so beware of garbage-in, garbage-out.&lt;/p&gt;
&lt;p&gt;This HTML block type was pretty easy to figure out, hence it was easy to implement.
Pretty straight forward: Look for one of the start strings, capture everything until
we find one of the end strings.  Quick and painless.&lt;/p&gt;
&lt;h3 id="special-tags"&gt;Special Tags&lt;a class="headerlink" href="#special-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Block types 2 to 5 are what I refer to as the special tags.  In order, the HTML
specification refers to these as the comment tag, the processing instruction tag,
the declaration tag, and the CDATA tag.  Each of these tags is authored exactly as
would be expected in a normal HTML document, and has it’s own distinct purpose.  In
each case, the start condition is a simple string, and the end condition is the
inversion of that string.&lt;/p&gt;
&lt;p&gt;While most of these tags have seldom used or esoteric purposes, the comment tag is used
frequently in HTML code, and is common in HTML documents.  Similar to block type 1
above, the following text is considered a complete HTML block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class="c"&gt;    style type="text/css"&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;h1 { font-size: 140%; font-weight: bold; border-top: 1px solid gray; padding-top: 0.5em; }&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;-- this is a comment --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to the previous HTML block type, these HTML block types were also easy to
figure out and implement.  Just like before: look for one of the start strings, capture
everything until we find one of the end strings.  Just as quick and just as painless.&lt;/p&gt;
&lt;h3 id="everything-else-tags"&gt;“Everything Else” Tags&lt;a class="headerlink" href="#everything-else-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With block types 1 to 5 out of the way, the work focused in on the remaining
block types 6 and 7.  These two block types are different than the other blocks, with
their most prominent difference being that their end condition is a simple blank line.
Another difference is that there is a long list of tag names that are eligible for block
type 6, while any other tag is relegated to block type 7.  This becomes important as the
start conditions of block type 6 are the string &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;lt;/&lt;/code&gt;, followed by the tag name,
and then followed by whitespace, the string &lt;code&gt;&amp;gt;&lt;/code&gt;, the string &lt;code&gt;/&amp;gt;&lt;/code&gt; or the end of the line.
In contrast, the start conditions for block type 7 are that the HTML must either be a
complete open tag or a complete close tag, followed by optional whitespace and the end
of the line.  As an additional requirement, a block type 7 HTML block cannot interrupt
a paragraph.&lt;/p&gt;
&lt;p&gt;To me, these rules are confusing to anyone authoring even a small piece of HTML in
Markdown, adding to the reasons for me to suggest to people not to use HTML in Markdown.
While this confusion is not evident in the examples for the block types 1 to 5,
consider this sample:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-canvas"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
**Hello**,

_world_.
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this sample:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
**Hello**,

_world_.
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without looking at the information in the specification, how easy is it to tell what the
output of each sample is?  To be honest, I had to refer back to the
&lt;a href="https://github.github.com/gfm/#html-blocks"&gt;HTML block definitions&lt;/a&gt; in the GFM
specification twice when I was writing these samples and three times when I was
verifying the samples before publishing this article.  That doesn’t bode well, does it?&lt;/p&gt;
&lt;p&gt;For the first example, the &lt;code&gt;canvas&lt;/code&gt; tag name is not in the list for block type 6, and a
block type 7 evaluation fails as the tag is neither a complete start tag nor a complete
end tag.  As such, the &lt;code&gt;canvas&lt;/code&gt; start tag ends up being normal text, to be wrapped in a
paragraph.  The next tag, the &lt;code&gt;pre&lt;/code&gt; start tag, gets identified as a block type 1 start,
finishing at it’s own &lt;code&gt;pre&lt;/code&gt; end tag, with the remaining &lt;code&gt;canvas&lt;/code&gt; end tag going into it’s
own paragraph.  I know that wasn’t what I expected at first glance.&lt;/p&gt;
&lt;p&gt;The second example has different issues.  Because the &lt;code&gt;table&lt;/code&gt; tag name is in the block
type 6 list of allowable tag names, the start conditions only state that it needs to
start with the first part of a start tag or end tag, which the string &lt;code&gt;&amp;lt;table&lt;/code&gt;
satisfies.  However, as the end condition for block type 6 HTML blocks is a blank
line, the HTML block ends after &lt;code&gt;**Hello**,&lt;/code&gt; and before &lt;code&gt;_world_.&lt;/code&gt;.  At this point,
the text &lt;code&gt;_world_.&lt;/code&gt; is parsed as normal text, and the text &lt;code&gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; is interpreted as
a complete end tag by the block type 7 rules, carrying a block type 7 HTML block to
the end of the sample.  When reading a similar example as part of
&lt;a href="https://github.github.com/gfm/#example-118"&gt;example 118&lt;/a&gt;, it did take several tries
to figure out what was going on.&lt;/p&gt;
&lt;p&gt;These block types provided a bit of complexity that was different than the previous
blocks.  As such, I hit a couple of road blocks that I had to work through.  It wasn’t
that the implementation was much more complicated than the previous HTML block types,
they weren’t.  It’s
almost the same process: find one of the start conditions, and capture everything
until a blank line.  Sure, the start conditions were a bit more meaty, but other than
that, it was relatively simple.  It was that they start conditions and end conditions
were different for these 2 HTML block types that made me look back at the use cases and
scenario tests with a couple of “huh”s until I that difference registered in my head.
And that list separating HTML block type 6 from 7… sheesh.&lt;/p&gt;
&lt;h2 id="my-recommendation"&gt;My Recommendation&lt;a class="headerlink" href="#my-recommendation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes to HTML blocks, I implemented them as part of the parser because they
are part of the specification.  But because of the complexity in understanding
HTML blocks, I whole heartedly recommend avoiding using HTML blocks if at all possible.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I took my time with the implementation for HTML blocks due to the complexities stated
above.  For the most part, the code I implemented worked on the first or second try,
with few cases where it took more tries and debugging than that.  I believe the key
to the relatively easy implementation was breaking the groups and tasks down into
multiple, smaller groups and smaller tasks.  In retrospect, I believe this enabled me to
more readily get my mind around the task to accomplish, and not get overwhelmed by
the size of the problem.&lt;/p&gt;
&lt;p&gt;Implementing that thinking for the project, while not concrete, helped me see other
things for the project in a better perspective. Most of the things I initially thought
would be complex turned out to not be that complex.  The long list of tag names for
block type 6?  Strings in a list object. The end conditions?  Either looking for a
blank line or one of a set of strings in one of the following lines.  Getting the use
cases right in the scenario tests?  Really simple.  I still contend that authoring HTML
in Markdown is complex, but the implementation was pretty easy.&lt;/p&gt;
&lt;p&gt;Another boost to my confidence was tackling the HTML blocks and getting them out of
my “technical debt column”.  While I believe that I made the right decision to defer
the HTML blocks for the right reasons, it still felt good to get them dealt with.
Similar to my experience with translating the last 2-3 uses cases into scenario
tests, thinking about revisiting any technical debt also triggers similar expectations
of the reworking of existing code, if that revisiting is actually possible at all.
Taking something out of technical debt and being able to remove that uncertainty
definitely helped my confidence towards the completion of the parser for this project.&lt;/p&gt;
&lt;p&gt;All in all, I believe things are still headed in the right direction!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the implementation of the PyMarkdown parser, I have been using my PyScan script
to great benefit.  As such, I decided to take the time to polish it up a bit and
document it in
&lt;a href="https://jackdewinter.github.io/2020/01/13/measuring-testing-in-python-scripts/"&gt;this article&lt;/a&gt; on Software Quality.
While doing that, I took some time to refactor the PyMarkdown code to make it easier to
work with, preparing it for the inline processing that was to come next.  The
next article will go over the refactoring that I did, and how it helped the project.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:countScenarios"&gt;
&lt;p&gt;The totals are as follows: paragraphs (9), tabs (11), indented code blocks (15), atx headings (18), thematic breaks (19), block quotes (22), lists (25),setext headings (27), and fenced code blocks (29). &lt;a class="footnote-backref" href="#fnref:countScenarios" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Adding Block Quotes and Lists</title><link href="https://jackdewinter.github.io/2020/02/03/markdown-linter-adding-block-quotes-and-lists/" rel="alternate"></link><published>2020-02-03T00:00:00-08:00</published><updated>2020-02-03T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-02-03:/2020/02/03/markdown-linter-adding-block-quotes-and-lists/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having the leaf blocks mostly in place, as documented
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;in the last article&lt;/a&gt;, the next items
on the implementation list were the list blocks and the block
quote blocks.  These Markdown blocks, referred to as Container Blocks in the
&lt;a href="https://github.github.com/gfm/#container-blocks"&gt;GitHub Flavored Markdown (GFM) Specification&lt;/a&gt;,
are the more complicated blocks …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having the leaf blocks mostly in place, as documented
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;in the last article&lt;/a&gt;, the next items
on the implementation list were the list blocks and the block
quote blocks.  These Markdown blocks, referred to as Container Blocks in the
&lt;a href="https://github.github.com/gfm/#container-blocks"&gt;GitHub Flavored Markdown (GFM) Specification&lt;/a&gt;,
are the more complicated blocks to deal with, as they are capable of containing other
blocks.  As there are
&lt;a href="https://github.github.com/gfm/#phase-1-block-structure"&gt;specific suggestions&lt;/a&gt;
on how to parse these blocks, my confidence took a hit when I started looking at this
section. My viewpoint: if the specification writers thought it was difficult to
implement that they wrote suggestions on how to handle it, it must not be as easy as
the leaf blocks!&lt;/p&gt;
&lt;p&gt;The full record of the work detailed in this article is documented in the
project’s GitHub repository in the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/49407f86564479934ee92fb59597ba830a46fde8"&gt;08 December 2019&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/00bbef09eba4fd5d7c663ca6e991b48e5b96c60e"&gt;15 December 2019&lt;/a&gt;.  This work includes creating the
scenario tests for all of the Container Blocks as documented in the GFM specification
and implementing the parsing to pass most those tests except for the nested cases.&lt;/p&gt;
&lt;h2 id="container-blocks-leaf-blocks-and-interactions-oh-my"&gt;Container Blocks, Leaf Blocks, and Interactions (Oh My!)&lt;a class="headerlink" href="#container-blocks-leaf-blocks-and-interactions-oh-my" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before container blocks, parsing was easy.  A block starts, and when the parser
encounters the termination conditions, it ends.  There are a few rules about when
blocks can start and end, such as
&lt;a href="https://github.github.com/gfm/#example-83"&gt;“An indented code block cannot interrupt a paragraph.”&lt;/a&gt;,
but for the most part, there is little interaction between the leaf blocks.  The leaf
blocks are clean and tidy.  Not so much with container blocks.&lt;/p&gt;
&lt;p&gt;Container blocks, by their very definition, contain other blocks, namely leaf blocks and
container blocks.  While this makes certain visual elements easier, this also means
specific rules about what interactions are allowed between the blocks.  On top of that,
as container blocks can contain other container blocks, testing is required to ensure
that an arbitrary number of nested containers is properly supported.&lt;/p&gt;
&lt;p&gt;A great example of nesting container blocks is the Markdown implementation of sublists.
A list containing a list containing a list is simple in Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;second&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That example is not a single list, but 3 separate lists.  The &lt;code&gt;first level&lt;/code&gt; list is the
first level list, containing the list &lt;code&gt;second level&lt;/code&gt;, which contains the list
&lt;code&gt;third level&lt;/code&gt;.  And while sublists are a simple case of container blocks, more complex
cases are possible, such as this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
    &lt;span class="o"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This list is similar to the first list, except it contains a fenced code block as the
contained block.  Both of these examples are just a few of the possibilities of how
container blocks can contain other blocks.  Looking through the specification, I
quickly lost count of the number of combinations possible.&lt;/p&gt;
&lt;h2 id="enter-lazy-continuations"&gt;Enter Lazy Continuations&lt;a class="headerlink" href="#enter-lazy-continuations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the interactions between container blocks and the blocks they contain wasn’t a fun
enough exercise in mental agility, enter lazy continuations.  From the GitHub Flavored
Markdown (GFM) Specification’s
&lt;a href="https://github.github.com/gfm/#block-quotes"&gt;block quotes section&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Laziness&lt;/strong&gt;. If a string of lines Ls constitute a block quote with contents Bs, then the result of deleting the initial block quote marker from one or more lines in which the next non-whitespace character after the block quote marker is paragraph continuation text is a block quote with Bs as its content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and from the &lt;a href="https://github.github.com/gfm/#list-items"&gt;list items section&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Laziness&lt;/strong&gt;. If a string of lines Ls constitute a list item with contents Bs, then the result of deleting some or all of the indentation from one or more lines in which the next non-whitespace character after the indentation is paragraph continuation text is a list item with the same contents and attributes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, what they are both saying is that if a paragraph has been started with block
quotes or within a list AND if a line is clearly a continuation of a paragraph, then it
is valid to remove some or all of the container block markers.  For a more concrete
example, &lt;a href="https://github.github.com/gfm/#example-211"&gt;example 211&lt;/a&gt; has the following
Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="n"&gt;baz&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is parsed the same as if the following Markdown was written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After reading those sections and letting them sink in, my confidence took a dip.  This
was not going to be an easy concept to get right.  But the sooner I dealt with those
scenarios, the sooner I could try and implement them the right way.  So I went forward
with the implementation phase of the container blocks.&lt;/p&gt;
&lt;h2 id="getting-down-to-work-the-easy-scenarios"&gt;Getting Down to Work - The Easy Scenarios&lt;a class="headerlink" href="#getting-down-to-work-the-easy-scenarios" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I often recommend to friends and
co-workers that taking a break and doing something unconnected to the “chore” helps
your mind get things together.  As such, before getting started on this work, I
decided to walk our dog for a while and let some of these concepts mull around in my
head. I am not sure if it was the exercise or the change in scenery, but it helped to
clear the cobwebs from my head and helped me to see things about the project more
clearly.&lt;/p&gt;
&lt;p&gt;The big thing that it accomplished was to help me cleanly separate out the easy tasks
from the more difficult tasks. The easy tasks? Simple block quotes and simple lists,
including sub-lists.  The difficult tasks?  Lazy continuations and mixed container
types.  I remember feeling that taking this time helped my confidence on the project,
as I was taking simple steps to understand where the difficulties were most likely to
show up.  This process also allowed me to think about those hard issues a bit while
implementing the easier features.  While I wasn’t devoting any serious time to the
more complicated features, it was good to just have my mind aware of which sections of
code that I was going to need to keep flexible going forward.&lt;/p&gt;
&lt;p&gt;Keeping this in mind, I started with block quotes, adding the block quote test cases to
&lt;code&gt;test_markdown_block_quotes.py&lt;/code&gt;, disabling any tests that I figured were not in the
easy category.  I then proceeded to implement the code, in the same way as detailed in
the
&lt;a href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/"&gt;prior article on leaf blocks&lt;/a&gt;.
Implementing the easy scenario tests for the block quotes was a decent sized task,
mostly completed during two days on a weekend where I had some time.  This also included
fixing scenario tests in 6 other test files that has block quotes in their scenarios.&lt;/p&gt;
&lt;p&gt;Working on the basic list items over the next week, by the middle of the next weekend
they were completed, in a similar fashion to how the block quotes were completed: new
scenario tests were added, the easy ones were then tested, enabled, and verified for
completion, and the more difficult ones were disabled.  Similar to the block quotes,
getting these right took roughly a week, and that work also had impact on scenario
tests other than the ones I added.&lt;/p&gt;
&lt;p&gt;During this process, I believed I found the parsing of lists more difficult.  Thinking
about the
implementation in hindsight, I believe it was mostly due to their parsing requirements.
The fact is that block quotes have a single character &lt;code&gt;&amp;gt;&lt;/code&gt; to consider for parsing,
while the lists can be unordered and start with the &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; character or the
lists can be ordered and start with a number and the &lt;code&gt;)&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; or character.  In
addition, for ordered lists, there is also the parsing of the start number and how to
interpret it.  Looking at the two blocks that way, block quote blocks seem a lot easier
to me.&lt;/p&gt;
&lt;p&gt;However, now that I have had a bit of time since that code was written, I believe that
those two features were more closer in difficulty that I initially thought.  Having
implemented both block quotes and lists, I think that they both had something that was
difficult that needed overcoming.  Since I have done a lot of parsers in my past, the
number of variations in parsing the lists were immediately noticeable to me, while the
block quotes were pretty easy to parse.  Balancing that out, once parsed the lists were
easy to coordinate, while the block quotes took a bit more finessing to get right.
In the end, I believe it was a pretty event effort to get both done properly.&lt;/p&gt;
&lt;p&gt;At least until nested mixed container blocks.&lt;/p&gt;
&lt;h2 id="nested-and-mixed-containers"&gt;Nested and Mixed Containers&lt;a class="headerlink" href="#nested-and-mixed-containers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nested container blocks, specifically mixed nested container blocks, is where things
got messy.  To be 100% honest, I am pretty sure I didn’t get everything right with the
implementation, and I already have plans to rewrite this logic. More on that later.&lt;/p&gt;
&lt;p&gt;I started implementing these features knowing that they probably made up the remaining
10% of the scenarios. I also figured that to handle these specific scenarios properly
would require as much time and effort as the prior 90% of the scenarios.  This was not
really a surprise, as in software development getting a project to the 70-90% finished
mark is almost always the easy part.&lt;/p&gt;
&lt;p&gt;Over the next week’s work, I reset my fork of the code back to it’s initial state 3 or 4
times.  In each case, I just got to a point where I either hit a block in going forward,
I wasn’t happy and confident about the solution, or both.  In one of those cases, the
code was passing the scenario tests that I was trying to enable, but it just didn’t feel
like I could extend it to the next scenario.  I needed to be honest with myself and
make an honest determination of how good the code I just wrote was.&lt;/p&gt;
&lt;p&gt;In the end, I completed some of the sublists and nested block quotes, requiring only 4
scenario tests to be disabled or skipped.  The ones that were disabled were the 10% of
the 10%, the cases where there were 3 or more levels of block quotes and lists mixed
together. I was not really happy with it, but after a week, I knew I needed to move on
with the project.  Grudgingly, I acknowledged that I would need to rewrite this later.&lt;/p&gt;
&lt;h2 id="why-rewrite-already"&gt;Why Rewrite Already?&lt;a class="headerlink" href="#why-rewrite-already" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am very confident that I coded the easy level cases correctly, as I have solid
scenario tests, and a decent volume of them, to test the various use cases.  For the
medium difficulty cases, such as a container within a container, I have a decent amount
of confidence that the scenario tests are capturing most of the permutations.  It is
the more complicated cases that I really am not confident about.  And when I say I am
not confident, it is not that I am not sure if it is handling the test properly: that
is a binary thing.  The test is passing, or the test is failing, and thus disabled.  I
m not confident that all of those tests work for all use cases like that the scenario
tests represent.&lt;/p&gt;
&lt;p&gt;Part of any project is learning what works and what doesn’t work.  As I started
looking at implementing
&lt;a href="https://github.github.com/gfm/#example-237"&gt;example 237&lt;/a&gt;, I read the
following paragraph located right before the example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is tempting to think of this in terms of columns: the continuation blocks must be indented at least to the column of the first non-whitespace character after the list marker. However, that is not quite right. The spaces after the list marker determine how much relative indentation is needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was then that I was pretty sure I had coded the container blocks in terms of columns
instead of spaces.  Add that to the list of rewrites needed.&lt;/p&gt;
&lt;p&gt;The other category where my confidence is not high is with multiple levels of mixed
container blocks.  Once I complete the rewrite above, I can properly evaluate how well
I can nest the containers, but at the moment, that is not high.  At that point,
example 237 will be a good scenario test to determine how well I have those set up.
Having taken some time to really evaluate the code and the scenario tests, I just have
a suspicion that there is at least 1-2 bugs in the code that I wrote.  For now, that is
on my list of possible rewrites, with a medium to high probability of being needed.&lt;/p&gt;
&lt;p&gt;The saving grace for both of these scenarios that I believe need rewrites?  Their
frequency.  The scenarios for blocks, leaf blocks and container blocks, comprise
about half of the specification, ending with
&lt;a href="https://github.github.com/gfm/#example-306"&gt;example 306&lt;/a&gt;.  According to my test failure
report, only 4 of the list block tests had to be marked as skipped, hence they were not
passing.  At approximately 1.3% of the total scenarios, it is not a big impact.  In
writing this block, I have used lists frequently, block quotes sporadically, and block
quotes with lists even less.  I am not sure if my writing is representative of
everyone’s writing, but at least at the moment, &lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All of the leaf blocks were finished in about a week.  The easy and medium cases for
the container blocks were finished about a week.  The hard cases for the container
blocks… not finished after a week, but close.&lt;/p&gt;
&lt;p&gt;Was I disappointed?  Sure.  But in comparison to other issues I have had with projects,
this was not even near the top 20 in terms of disappointment.  To be honest, in terms
of how projects have gone for me over the years, this has been a decent project to
work on.  Every project has it’s issues, and this was just the set of issues that
happened to occur on this project.&lt;/p&gt;
&lt;p&gt;I know it may sound a bit silly, but me and my immediate family have a saying we like
to repeat when things get tough: “Stuff&lt;sup id="fnref:notStuff"&gt;&lt;a class="footnote-ref" href="#fn:notStuff"&gt;1&lt;/a&gt;&lt;/sup&gt; happens, pick yourself up, dust
yourself off, and figure out what to do next.”  The disabled tests happened, so I took
some time to find my focus, and came up with a plan to deal with it.  Not a great
plan, but it meant I could go forward with the remaining scenarios and circle back
once I accumulated more experience with the parser.&lt;/p&gt;
&lt;p&gt;Sure there already was some
&lt;a href="https://en.wikipedia.org/wiki/Technical_debt"&gt;technical debt&lt;/a&gt;
for this project, but other than that, I believe it is going well.  At this point it
was just before Christmas, and I had a Markdown parser that was coming along pretty
well.  My confidence in the implemented leaf blocks was high, as was my confidence in
the easy 90% of the container block implementation.  The more difficult 10% of the
container blocks was still undecided, but I had a plan to deal with it going forward.
While not a sterling situation, it was definitely a good position for me to be in.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before I took some time to improve my PyScan tool, I worked on adding HTML block
support for the PyMarkdown project.  As HTML in Markdown has some funny logic associated
with it, the next article will be devoted entirely to the HTML blocks.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:notStuff"&gt;
&lt;p&gt;When my kids were younger, I did indeed use the word “stuff”.  As my kids got older, we changed that word to another one that also starts with “s”.  The actual word that we now use should be easy to figure out! &lt;a class="footnote-backref" href="#fnref:notStuff" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Parsing Normal Markdown Blocks</title><link href="https://jackdewinter.github.io/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/" rel="alternate"></link><published>2020-01-27T00:00:00-08:00</published><updated>2020-01-27T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-01-27:/2020/01/27/markdown-linter-parsing-normal-markdown-blocks/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;project requirements&lt;/a&gt;,
the &lt;a href="https://jackdewinter.github.io/2019/12/16/markdown-linter-setting-up-parser-tests/"&gt;test framework&lt;/a&gt;,
and the &lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/"&gt;test strategy&lt;/a&gt; in place,
it was time to start working on the most frequently used and easy-to-parse Markdown
items.  These Markdown blocks, referred to as Leaf Blocks in the
&lt;a href="https://github.github.com/gfm/#leaf-blocks"&gt;GitHub Flavored Markdown (GFM) Specification&lt;/a&gt;,
are the root of many Markdown …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;project requirements&lt;/a&gt;,
the &lt;a href="https://jackdewinter.github.io/2019/12/16/markdown-linter-setting-up-parser-tests/"&gt;test framework&lt;/a&gt;,
and the &lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/"&gt;test strategy&lt;/a&gt; in place,
it was time to start working on the most frequently used and easy-to-parse Markdown
items.  These Markdown blocks, referred to as Leaf Blocks in the
&lt;a href="https://github.github.com/gfm/#leaf-blocks"&gt;GitHub Flavored Markdown (GFM) Specification&lt;/a&gt;,
are the root of many Markdown documents and have the virtue of being easy to parse.
With small exceptions, each of the Leaf Blocks is self contained.  For the most part,
those exceptions arise in how the Leaf Blocks interact with each other.
In all cases, this interaction is small and does not require complicated logic to
understand.&lt;/p&gt;
&lt;p&gt;The full record of the work detailed in this article is documented in the
project’s GitHub repository in the commits that occurred between
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/4ad7ebd46d7651d20a8b470b4d287e49cebfff75"&gt;30 November 2019&lt;/a&gt;
and
&lt;a href="https://github.com/jackdewinter/pymarkdown/commit/aee7a3def2dffc8531814a8b87365068d07730dc"&gt;05 December 2019&lt;/a&gt;.  This work includes creating the
scenario tests for all of the Leaf Blocks as documented in the GFM specification
and implementing the parsing to pass all of those tests except for the Link Reference
Definitions, HTML Blocks, and Tables.&lt;/p&gt;
&lt;p&gt;While the documentation of what needed to be done (GFM Specification) and what was done
(GitHub commits) is pretty straightforward, the “hows” and “whys” of what I implemented
is worth talking about.  The process that I followed for the implementation of the Leaf
Blocks did not uncover any development issues during implementation.  However, without
giving too much away, the same process applied to other block types (to be talked about
in future articles) did uncover issues that were not so easy to resolve.  As there were
complications that arose with those feature implementations, I wanted to provide a
consistent documentation of the process from the beginning, to provide a complete
picture of how things progressed.   I firmly believe that it is always good to show the
complete story of what happened, and not only one side of the story. So let’s go!&lt;/p&gt;
&lt;h2 id="moving-forward-with-implementation"&gt;Moving Forward With Implementation&lt;a class="headerlink" href="#moving-forward-with-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the first commit for processing Markdown elements is on 30 November 2019, my
work on implementing them started on 25 November 2019.  Based on the test framework and
strategy documented in previous articles, the first thing to do was to write the
scenario tests cases, even if most of those tests were initially disabled or skipped.
This was easily done by annotating each test function with &lt;code&gt;@pytest.mark.skip&lt;/code&gt;. Once
I implemented the code to satisfy a given test, I removed that skip annotation for
that specific test.  While I would made modifications on how I disabled tests later on,
this was a good point for me to start off at.&lt;/p&gt;
&lt;h2 id="what-was-the-workflow"&gt;What Was the Workflow?&lt;a class="headerlink" href="#what-was-the-workflow" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the outset, the basic implementation workflow was as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;figure out the next section to work on&lt;/li&gt;
&lt;li&gt;figure out the next section-feature to implement&lt;/li&gt;
&lt;li&gt;enable the relevant tests for that section-feature&lt;/li&gt;
&lt;li&gt;add or change the code in &lt;code&gt;tokenized_markdown.py&lt;/code&gt; to implement that feature&lt;/li&gt;
&lt;li&gt;execute all enabled tests, with special attention to the feature added in item 4.&lt;/li&gt;
&lt;li&gt;if there were any test errors; debug, fix and go back to &lt;code&gt;item 4.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stage the changes in the project before&lt;/li&gt;
&lt;li&gt;if there are more features in the current section, go back to &lt;code&gt;item 2.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;verify each test case’s input and output against the specification&lt;/li&gt;
&lt;li&gt;if any verification errors are found; debug, fix and go back to &lt;code&gt;item 4.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if there are any leaf block sections left to work on, go back to &lt;code&gt;item 1.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It wasn’t really glamourous, but it worked well.  Looking closely at the list, it is
easy for me to see why… I took an agile approach without really being aware of it.
According to the Wikipedia article on
&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development#Agile_software_development_practices"&gt;Agile Software Development&lt;/a&gt;,
there are a number of good practices that I was following.  Because I was doing testing
as I went, the is a good argument to be made that I was practicing
&lt;a href="https://en.wikipedia.org/wiki/Agile_testing"&gt;Agile Testing&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt;.
As the tests are also the acceptance criteria for this stage of the project,
&lt;a href="https://en.wikipedia.org/wiki/Acceptance_test-driven_development"&gt;Acceptance Test Driven Development&lt;/a&gt;
could also be tacked on to those two Agile practices.  Finally, as the workflow is
iterative by it’s very nature, the workflow also qualifies as
&lt;a href="https://en.wikipedia.org/wiki/Iterative_and_incremental_development"&gt;Iterative and Incremental Development&lt;/a&gt;.
All in all, I see a number of solid agile patterns within the workflow.&lt;/p&gt;
&lt;p&gt;Agile aspirations aside, the real test of this workflow is that it works for me and
works well.  I was able to stick to the process pretty easily. It very nicely
compartmentalized my work into nice iterations that were easy for me to keep in my
head. It was also simple enough that if I needed to refocus myself, I just had to
figure out where I was in the workflow and where I was in the specification, and I
was able to get back to work!  In addition, I feel that if I had performed this
development as part of a team, the frequent commits and complete with enabled tests
would enable me to share my progress with the rest of the team, and solicit their
feedback in a quick and iterative manner.&lt;/p&gt;
&lt;p&gt;More importantly, at no point in the development practice did I feel that I bit off more
than I could handle.  Of course there were times where I was wondering how long it was
going to take me and how I would handle some features… I am only human!  But the agile
nature of how the workflow is structured kept me grounded and focused on the feature
that was in front of me.  I just reminded myself to keep that focus, and feature by
feature, the foundations of the parser came together.&lt;/p&gt;
&lt;p&gt;In the end, this workflow wasn’t about being agile or taking easy to implement steps.
It is about finding something that works well for the team… namely me.&lt;/p&gt;
&lt;h2 id="how-did-things-progress"&gt;How Did Things Progress?&lt;a class="headerlink" href="#how-did-things-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The order in which things are tackled is important.  Doing the big
stuff at the start of the project sometimes pays off, but it can often be demoralizing.
Doing the small stuff first can lay some great foundations, but miss the larger target
due to the smaller focus.  To accomplish this for the PyMarkdown project, I broke
this part of the project down into 4 groups of Markdown elements.  Each group of
Markdown elements that were handled added new information to the stream of tokens
that were being generated by the parser, allowing for future examination.  It was
very important to me to ensure that the token stream was kept working and moving
forwards at all times.&lt;/p&gt;
&lt;h3 id="group-1-foundational-elements"&gt;Group 1: Foundational Elements&lt;a class="headerlink" href="#group-1-foundational-elements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first group that I worked on were the rudimentary elements of blank lines,
paragraphs, and thematic breaks.  This was a good first
group to work on, as these were all common Markdown elements that people use, and are
foundational to the rest of the work.  As such, they were good confidence boosters for
the tribulations that I expected that would occur later with the more complicated
elements.&lt;/p&gt;
&lt;p&gt;The only real issue that I had with this first group was due to my lack of confidence
about the Markdown specification itself.  From my days on the
&lt;a href="https://www.ietf.org/"&gt;Internet Engineering Task Force&lt;/a&gt;,
I am used to clear grammar specifications written in
&lt;a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form"&gt;Backus-Naur form&lt;/a&gt;.
However, this specification has no such representation and is written mainly as a
series of use cases and text to describe each use case.  It took me a while to see that
what I perceived initially as a downfall was actually a bonus.  Instead of having to
search for examples or to make them up myself, they were already provided.  Once I got
used to that concept, my confidence increased and I started to implement each test more
quickly than the last one.&lt;/p&gt;
&lt;p&gt;While it didn’t seem like much at the time, at this point the parser was capable of handling the following Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;captured&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;***&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="group-1-sidebar-tabs"&gt;Group 1 Sidebar: Tabs&lt;a class="headerlink" href="#group-1-sidebar-tabs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I started to tackle the GFM specification decision that any tab character is
considered to be replaced with exactly 4 space characters.  For the most part, this had
little bearing on the foundational elements, but the subject of
&lt;a href="https://www.bing.com/search?q=tabs+vs+spaces"&gt;tabs versus spaces&lt;/a&gt; has ignited
&lt;a href="https://www.reddit.com/r/programming/comments/3xbyh6/the_software_development_holy_wars_part_i_the/"&gt;programming holy wars&lt;/a&gt;
that last to this day.  I thought it was useful and prudent to deal with it
and get it out of the way early.&lt;/p&gt;
&lt;p&gt;Smartly, Markdown avoids these arguments with a strong statement that 1 tab character
equals 4 space characters, and a decent argument to reinforce that the decision is the
right one. With the exception of the indented code block, every Markdown element is
only recognized if it starts with less than 4 spaces.  An indented code block line is
only recognized if it starts with 4 spaces.  Therefore, a shortcut for any indented
code block is to start the line with 1 tab character, due to it’s 1:4 mapping.  To be
honest, I feel this is brilliant in it’s simplicity.&lt;/p&gt;
&lt;h3 id="group-2-headers"&gt;Group 2: Headers&lt;a class="headerlink" href="#group-2-headers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next group that I tackled were the header markers, referred to in the specification
as the &lt;code&gt;setext&lt;/code&gt; and &lt;code&gt;atx&lt;/code&gt; elements.  Weird names though they are, they are the up to 6
&lt;code&gt;#&lt;/code&gt; characters at the start of the line, or the &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; characters underlining
text from a previous paragraph.  While the &lt;code&gt;atx&lt;/code&gt; elements (the &lt;code&gt;#&lt;/code&gt; characters) was
pretty straight forward, the ‘underlining’ aspect of the &lt;code&gt;setext&lt;/code&gt; element made it
interesting.  As that element essentially makes the last paragraph a heading, I had to
search backwards in the list of generated tokens for the first time.&lt;/p&gt;
&lt;p&gt;It was also at this point that I decided to perform some refactoring to better
handle string processing.  The simple truth about any parser is that it requires
gratuitous amounts of “string fiddling” &lt;sup id="fnref:stringFiddle"&gt;&lt;a class="footnote-ref" href="#fn:stringFiddle"&gt;1&lt;/a&gt;&lt;/sup&gt;.  Most efficient parsers work
aggressively to parse their documents in a way that minimizes the number of actual
strings created while parsing.  A good example of efficient “string fiddling” can be
seen in the following example of parsing the sentence &lt;code&gt;I have a black dog&lt;/code&gt;.  When
parsing out the word &lt;code&gt;black&lt;/code&gt;, the most optimal parsers will find the index of the &lt;code&gt;b&lt;/code&gt;
in &lt;code&gt;black&lt;/code&gt;, then find the space character after the &lt;code&gt;k&lt;/code&gt;, using the language’s
&lt;code&gt;substring&lt;/code&gt; function  and those two indexes to create a single string with &lt;code&gt;black&lt;/code&gt; in
it.  Less optimal parsers will find the &lt;code&gt;b&lt;/code&gt;
append it to the end of an empty string (creating a new string with &lt;code&gt;b&lt;/code&gt;), then find
the &lt;code&gt;l&lt;/code&gt; character and appended it, etc.  This can easily cause 6 strings to be created
during the parsing of the word &lt;code&gt;black&lt;/code&gt;, when only 1 is needed.  As some of the
Markdown documents that the parser will handle are large, it is important to remember
optimizations like this as features are added.&lt;/p&gt;
&lt;p&gt;Keeping this in mind, I started looking for “string fiddling” patterns that looked ripe
for refactoring.  The most obvious one was the
&lt;code&gt;determine_whitespace_length&lt;/code&gt; function that took care of any tabs in the input data.
While I would rip this out later, opting instead to do a simple search-and-replace for
tabs at the start of parsing, the &lt;code&gt;determine_whitespace_length&lt;/code&gt; function kept things
manageable for tabs characters.  There were also the &lt;code&gt;extract_whitespace*&lt;/code&gt; functions for
extracting whitespace and the &lt;code&gt;collect_while_character&lt;/code&gt; function for collecting data
for a string while the input was a given character.  Taking a couple of peeks ahead in
the specification, it was easy to see that moving the code into those functions was going to pay off.&lt;/p&gt;
&lt;p&gt;When it comes down to it, there were no real issues that I experienced with the
headers.  My confidence was still building from the foundational group above, but there
was nothing weird or challenging that I did not handle with a bit of serious thought
and planning.&lt;/p&gt;
&lt;p&gt;At this point, the parser was capable of handling the following Markdown elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;captured&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;But&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
&lt;span class="c1"&gt;-------------------&lt;/span&gt;

&lt;span class="o"&gt;***&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="group-3-indented-and-fenced-code-blocks"&gt;Group 3: Indented and Fenced Code Blocks&lt;a class="headerlink" href="#group-3-indented-and-fenced-code-blocks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Marching right along, indented and fenced code blocks were next on the list.  Both are
used to denote sections of text that are to be represented literally, but one is easier
and one is more flexible.  The indented code blocks require 4 space characters (or a
tab character) at the start of the line to denote the block, and text is presented
plainly.  However, the fenced code blocks start and end with an equal number of &lt;code&gt;`&lt;/code&gt;
or &lt;code&gt;~&lt;/code&gt; characters and include provisions for naming the type of text used within the
code block.  This naming allows processors to specify a given style to apply to the
code block, allowing processors and style sheets to ‘colorize’ the text according to
the the specified type name.&lt;/p&gt;
&lt;p&gt;This grouping was pretty easy to process, adding the &lt;code&gt;extract_until_whitespace&lt;/code&gt; function
to the growing list of helper functions.  The interesting part to the code blocks was
that I needed to add extra processing of normal text to handle the text within the code
blocks.  Prior to these code blocks, any text that did not fall into one of the other
categories was simply wrapped in a paragraph.  Both of these blocks have specific end
conditions, and until those end conditions are met, the collection continues.  This
meant adding extra code at the start of line parsing to determine if it was within one
of the code blocks.  If the end condition was met, then the end block token was emitted,
and if not, a text block would be emitted without further parsing.&lt;/p&gt;
&lt;p&gt;It was at this point that I started seeing the intertwining nature of some of the use
cases.  An indented code block cannot interrupt a paragraph, but a fenced code block
can.  So when looking for the indented code block, I had to explicitly disallow one
from starting if the block currently being process was a paragraph.  While this was
only a small case, it became very obvious to me from a quick scan over the specification
that this type of pattern was going to repeat more than once.  As such, I started
moving the start and stop logic into their own functions, whether they required it or
not.  This improved the readability, and enabled me to get a better view on what was
being handled and where.&lt;/p&gt;
&lt;p&gt;At this point, the parser was capable of handling the following Markdown elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;captured&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;```&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;
    &lt;span class="n"&gt;rt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;"1:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;```&lt;/span&gt;

&lt;span class="n"&gt;But&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
&lt;span class="c1"&gt;-------------------&lt;/span&gt;

    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;

&lt;span class="o"&gt;***&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that the fenced code block specifies &lt;code&gt;python&lt;/code&gt; as it’s type, allowing the
colorization of the text with the assumption that the code block is Python code.&lt;/p&gt;
&lt;h3 id="group-4-stopping-at-a-good-place"&gt;Group 4: Stopping At a Good Place&lt;a class="headerlink" href="#group-4-stopping-at-a-good-place" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes it makes sense to march forward without much attention to the surroundings,
and sometimes it makes sense to stop at a good place along the way.  In taking a quick
look at HTML blocks, I figured they were going to be tricky, and I had the same
determination with the table element.  Taking a look at the link reference definitions,
I noticed that they required inline expansion of text within the blocks, something that
I wasn’t even remotely close to yet.  These three leaf blocks were in the final group:
the To Be Done Later group.&lt;/p&gt;
&lt;p&gt;To ensure that I had a good place to come back to when I was ready for the each of these
blocks, I made sure to go through and implement, verify, and then disable each
test for every leaf block.&lt;/p&gt;
&lt;p&gt;Depending on the leaf block, I handled the disabling of the tests differently. To
properly deal with the link reference definitions, I needed the inline processing
capabilities that I knew were many weeks away.  As such, I kept those tests disabled
in the previous documented way of using the &lt;code&gt;@pytest.mark.skip&lt;/code&gt; annotation.  This was
a big shout out to myself that these were going to need to be completed after almost
everything else.&lt;/p&gt;
&lt;p&gt;In the case of any other of the leaf node tests, I captured the
current tokens emitted for that case and placed them in the corresponding test.  While
it might seem weird, my belief was that by testing each test case this way, I would
increase overall coverage and possibly hit edge cases not currently documented in an
use case.  It also meant that once I started implementing the HTML blocks and table
blocks, those tests would just start failing in predictable fashion.&lt;/p&gt;
&lt;h2 id="what-was-my-experience-so-far"&gt;What Was My Experience So Far?&lt;a class="headerlink" href="#what-was-my-experience-so-far" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is always easier to look back and see what worked and what did not work, than to
observe it at the time.  With only a few issues, I personally felt like I dodged a
lot of pain due to the specification and planning.  While BNF grammars are easy to
implement, the general rule is to “be strict in what you generate and lenient in what
you accept”.  As such, coming up with “valid” parse cases is a task that takes a long
time to complete.  By having the acceptable test cases as part of the core
specification, the time that I would normally spend in the development and testing phase
was greatly reduced.  True, it took me a while to get used to it, but when I did, it
just worked and worked well.&lt;/p&gt;
&lt;p&gt;One of the practices that I engaged in during the development of the parser is to
liberally spread around &lt;code&gt;print&lt;/code&gt; statements as I went.  As I was adding these statements,
my dominant thought was to collect enough information to determine which pieces of
information were the most relevant for log messages to be added later.  However,
as I proceeded, that information also had the additional benefits of being immensely
helpful to debug any parsing issues, and indispensable in the verification of the code
itself.  While I know I need to remove those statements or convert them before the
project is completed, their presence is indeed beneficial.&lt;/p&gt;
&lt;p&gt;All in all, I think I had a great start to an interesting project and learned a bit
in the process… and learning is always good!&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next up on the list is adding block quote and list support to the parser.  Stay tuned!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:stringFiddle"&gt;
&lt;p&gt;I remember this term being used all the way back to my university days.  The closest I have been able to come to a definition is the Oxford dictionary’s definition: touch or fidget with something in a restless or nervous way.  Perhaps this is alluding to amount of work to get most string operations “just right”? &lt;a class="footnote-backref" href="#fnref:stringFiddle" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Clarity Through The Summarizing of Test Measurements</title><link href="https://jackdewinter.github.io/2020/01/20/clarity-through-the-summarizing-of-test-measurements/" rel="alternate"></link><published>2020-01-20T00:00:00-08:00</published><updated>2020-01-20T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-01-20:/2020/01/20/clarity-through-the-summarizing-of-test-measurements/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the process of
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;creating a Markdown Linter&lt;/a&gt;
to use with my personal website, I firmly believe that it is imperative that I have
solid testing on the linter and the tools necessary to test the linter.  In previous
articles, I talked about the framework I use …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the process of
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;creating a Markdown Linter&lt;/a&gt;
to use with my personal website, I firmly believe that it is imperative that I have
solid testing on the linter and the tools necessary to test the linter.  In previous
articles, I talked about the framework I use to
&lt;a href="https://jackdewinter.github.io/2020/01/06/scenario-testing-python-scripts/"&gt;scenario test Python scripts&lt;/a&gt; and
how my current PyTest setup
&lt;a href="https://jackdewinter.github.io/2020/01/13/measuring-testing-in-python-scripts/"&gt;produces useful test reports&lt;/a&gt;,
both human-readable and machine-readable.  These two things allow me to properly
test my Python scripts, to collect information on the tests used to verify those
scripts, and to determine how well the collection of tests covers those scripts.&lt;/p&gt;
&lt;p&gt;While the human-readable reports are very useful for digging into issues, I often find
that I need a simple and concise “this is where you are now” summary that gives me the
most pertinent information from those reports.  Enter the next tool in my toolbox, a
Python script that summarizes information from the machine-readable reports,
unimaginatively called &lt;code&gt;PyScan&lt;/code&gt;.  While it is simple tool, I constantly use this tool
when writing new Python scripts and their tests to ensure the development is going in
the direction that I want to.  This article describes how I use the tool and how it
provides a benefit to my development process.&lt;/p&gt;
&lt;h2 id="why-not-discuss-the-script-itself"&gt;Why Not Discuss The Script Itself?&lt;a class="headerlink" href="#why-not-discuss-the-script-itself" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When coming up with the idea for this article, I had two beneficial paths
available: focus on the code behind the PyScan tool or focus on the usage of the PyScan
tool.  Both paths have merit and benefit,
and both paths easily provide enough substance for a full article.  After a lot of
thought, I decided to focus on the usage of this tool instead of the code itself.  I
made this decision primarily due to my heavy use of the PyScan tool and it’s
significant benefit to my development process.&lt;/p&gt;
&lt;p&gt;I rely on the PyScan to give me an accurate summary of the tests used to verify any
changes along with the impact on code coverage for each of those changes.  While I
can develop without PyScan, I find that using PyScan immediately increases my
confidence in each change I make.  When I make a given type of change to either the
source code or the test code, I expect a related side-effect to appear in the test
results report and the test coverage report.  By having PyScan produce summaries of the
test results and test coverage, each side-effect is more visible, therefore
adding validation that the changes made are the right changes.&lt;/p&gt;
&lt;p&gt;In the end, the choice became an easy one: focus on the choice with the most positive
impact.  I felt that documenting how I use this tool satisfied that requirement with
room to spare.  I also felt that if any readers are still interested in looking at the
code behind the script, it’s easy enough to point them to the project’s
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;GitHub repository&lt;/a&gt; and make sure it is well
documented.&lt;/p&gt;
&lt;h2 id="setting-up-pyscan-for-its-own-project"&gt;Setting Up PyScan For It’s Own Project&lt;a class="headerlink" href="#setting-up-pyscan-for-its-own-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on the setup from
&lt;a href="https://jackdewinter.github.io/2020/01/13/measuring-testing-in-python-scripts/"&gt;the last article&lt;/a&gt;, the PyTest command
line options &lt;code&gt;--junitxml=report/tests.xml&lt;/code&gt; and &lt;code&gt;--cov-report xml:report/coverage.xml&lt;/code&gt;
place the &lt;code&gt;tests.xml&lt;/code&gt; file and the &lt;code&gt;coverage.xml&lt;/code&gt; file in the &lt;code&gt;report&lt;/code&gt; directory.
Based on observation, the &lt;code&gt;tests.xml&lt;/code&gt; file is in a JUnit XML format and the
&lt;code&gt;coverage.xml&lt;/code&gt;
file is in a Cobertura XML format.  The format of the &lt;code&gt;tests.xml&lt;/code&gt; is pretty obvious from
the command line flag required to generate it.  The format of the &lt;code&gt;coverage.xml&lt;/code&gt; file
took a bit more effort, but the following line of the file keyed me to it’s format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Based on https://raw.githubusercontent.com/cobertura/web/master/htdocs/xml/coverage-04.dtd --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From within the project’s root directory, the main script is located at &lt;code&gt;../main.py&lt;/code&gt;.
Since the project uses &lt;code&gt;pipenv&lt;/code&gt;, the command line to invoke the script is
&lt;code&gt;pipenv run python pyscan/main.py&lt;/code&gt; and invoking the script with the &lt;code&gt;--help&lt;/code&gt; option
gives us the options that we can use.  Following the information from the help text,
the command line that I use from the project’s root directory is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python pyscan/main.py --junit report/tests.xml --cobertura report/coverage.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With everything set up properly, the output from that command looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Class Name                     Total Tests   Failed Tests   Skipped Tests
----------------------------  ------------  -------------  --------------
test.test_coverage_profiles              2              0               0
test.test_coverage_scenarios            12              0               0
test.test_publish_scenarios              9              0               0
test.test_results_scenarios             19              0               0
test.test_scenarios                      1              0               0
---                                     --              -               -
TOTALS                                  43              0               0

Test Coverage Summary
---------------------

Type           Covered   Measured   Percentage
------------  --------  ---------  -----------
Instructions       ---        ---        -----
Lines              505        507        99.61
Branches           158        164        96.34
Complexity         ---        ---        -----
Methods            ---        ---        -----
Classes            ---        ---        -----
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="before-we-continue"&gt;Before We Continue…&lt;a class="headerlink" href="#before-we-continue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To complete my setup, there are two more things that are needed.  The first thing is
that I primarily execute the tests from a simple Windows script called &lt;code&gt;ptest.cmd&lt;/code&gt;.
While there is a lot of code in the &lt;code&gt;ptest.cmd&lt;/code&gt; script to handle errors and options,
when the script is boiled down to it’s bare essence, the script runs tests and reports
on those tests as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run pytest
pipenv run python pyscan/main.py --only-changes --junit report/tests.xml --cobertura=report/coverage.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I also have a Bash version called &lt;code&gt;ptest.sh&lt;/code&gt; which I have experimented with locally, but is not checked in to the project.  If you are interested in this script, please let me know in the comments below.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Setting up a script like &lt;code&gt;ptest&lt;/code&gt; keeps things simple and easy-to-use.  One
notable part of the script is that there is a little bit of logic in the script to not
summarize any coverage if there are any issues running the tests under PyTest.  Call me
a purist, but if the tests fail to execute or are not passing, any
measurements of how well the tests cover the code are moot.&lt;/p&gt;
&lt;p&gt;The other thing that I have setup is a small change to the command line for PyScan.  In
the “bare essence” text above, after the text &lt;code&gt;pyscan/main.py&lt;/code&gt;, there is a new option
used for PyScan: the &lt;code&gt;--only-changes&lt;/code&gt; option.  By adding the &lt;code&gt;--only-changes&lt;/code&gt; option,
PyScan restricts the output to only those items that show changes.  If no changes are
detected, it displays a simple line stating that no changes have been observed.  In the
case of the above output, the output with this new option is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Test results have not changed since last published test results.

Test Coverage Summary
---------------------

Test coverage has not changed since last published test coverage.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To me, this gives a very clear indication that things have not changed.  In the
following sections, I go through different cases and explain what changes I made and
what effects I expect to see summarized.&lt;/p&gt;
&lt;h2 id="introducing-changes-and-observing-behavior"&gt;Introducing Changes and Observing Behavior&lt;a class="headerlink" href="#introducing-changes-and-observing-behavior" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this section of the article, I temporarily added a “phantom” feature called
“nothing” to PyScan.  This feature is facilitated by two code changes.
In the &lt;code&gt;__parse_arguments&lt;/code&gt; function, I added the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"--nothing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"do_nothing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"only_changes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in the &lt;code&gt;main&lt;/code&gt; function, I changed the code as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__parse_arguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_nothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"noop"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this feature is only present for the sake of these examples, and is not in
the project’s code base.&lt;/p&gt;
&lt;h3 id="adding-new-code"&gt;Adding New Code&lt;a class="headerlink" href="#adding-new-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I added the above code for the samples, the output that I got after running
the tests was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Test results have not changed since last published test results.

Test Coverage Summary
---------------------

Type       Covered   Measured     Percentage
--------  --------  ---------  -------------
Lines     507 (+2)   511 (+4)  99.22 (-0.39)
Branches  159 (+1)   166 (+2)  95.78 (-0.56)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the introduced changes, this output was expected.  In the &lt;code&gt;Measured&lt;/code&gt; column,
4 new lines were added (1 in &lt;code&gt;__parse_arguments&lt;/code&gt; and 3 in &lt;code&gt;main&lt;/code&gt;) and the
&lt;code&gt;if args.do_nothing:&lt;/code&gt; line added 2 branches (1 for True and one for False). In the
&lt;code&gt;Covered&lt;/code&gt; column, without any tests to exercise the new code, 2 lines are
covered by default (1 in &lt;code&gt;__parse_arguments&lt;/code&gt; and 1 in &lt;code&gt;main&lt;/code&gt;) and 1 branch is covered
by default (the False case of &lt;code&gt;if args.do_nothing:&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="adding-a-new-test"&gt;Adding a New Test&lt;a class="headerlink" href="#adding-a-new-test" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having added source code to the project, I added a test to address the new code.  To
start, I added this simple test function to the &lt;code&gt;test_scenarios.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_nothing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This change is just a stub for a test function, so the expected change is that the
number of tests for that module increase and there is no change in coverage.  This
effect is born out by the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Class Name            Total Tests   Failed Tests   Skipped Tests
-------------------  ------------  -------------  --------------
test.test_scenarios        2 (+1)              0               0
---                       --                   -               -
TOTALS                    44 (+1)              0               0

Test Coverage Summary
---------------------

Type       Covered   Measured     Percentage
--------  --------  ---------  -------------
Lines     507 (+2)   511 (+4)  99.22 (-0.39)
Branches  159 (+1)   166 (+2)  95.78 (-0.56)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="populating-the-test-function"&gt;Populating the Test Function&lt;a class="headerlink" href="#populating-the-test-function" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that a stub for the test is in place and registering, I added a real body to the
test function as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_nothing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# Arrange&lt;/span&gt;
    &lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainlineExecutor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;suppplied_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"--nothing"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;expected_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""noop&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
    &lt;span class="n"&gt;expected_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;expected_return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;# Act&lt;/span&gt;
    &lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;suppplied_arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Assert&lt;/span&gt;
    &lt;span class="n"&gt;execute_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;expected_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_return_code&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code that I added at the start of this section is triggered by the command line
argument &lt;code&gt;--nothing&lt;/code&gt;, printing the simple response text &lt;code&gt;noop&lt;/code&gt;, and returning a return
code of 1 .  This test code was crafted to trigger that code and to verify the expected
output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Class Name            Total Tests   Failed Tests   Skipped Tests
-------------------  ------------  -------------  --------------
test.test_scenarios        2 (+1)              0               0
---                       --                   -               -
TOTALS                    44 (+1)              0               0

Test Coverage Summary
---------------------

Type       Covered   Measured     Percentage
--------  --------  ---------  -------------
Lines     509 (+4)   511 (+4)  99.61 ( 0.00)
Branches  160 (+2)   166 (+2)  96.39 (+0.04)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the output from the test results summary, the test does verify that once
triggered, the code is working as expected.  If there was any issue with the test,
the summary would include the text &lt;code&gt;1 (+1)&lt;/code&gt; in the &lt;code&gt;Failed Tests&lt;/code&gt; column to denote
the failure.  As that text is not present, it is safe to assume that both tests in
the &lt;code&gt;test.test_scenarios&lt;/code&gt; module succeeded.  In addition, based on the output from the
test coverage summary, the new code added 4 lines and 2 branches to the code base, and
the new test code covered all of those changes.&lt;/p&gt;
&lt;h3 id="establishing-a-new-baseline"&gt;Establishing a New Baseline&lt;a class="headerlink" href="#establishing-a-new-baseline" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the new source code and test code in place, I needed to publish the results and
set a new baseline for the project.  To do this with the &lt;code&gt;ptest&lt;/code&gt; script, I invoked the
following command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ptest -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Within this &lt;code&gt;ptest&lt;/code&gt; script, the &lt;code&gt;-p&lt;/code&gt; option was translated into the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv run python pyscan/main.py --publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When executed, the &lt;code&gt;publish/coverage.json&lt;/code&gt; and &lt;code&gt;publish/test-results.json&lt;/code&gt; files were
updated with the current summaries.  Following that point, when the script was run, it
reverts back to the original output of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Test results have not changed since last published test results.

Test Coverage Summary
---------------------

Test coverage has not changed since last published test coverage.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This process can be repeated at any time to establish a solid baseline that any new
changes can be measured against.&lt;/p&gt;
&lt;h3 id="refactoring-code-my-refactoring-process"&gt;Refactoring Code - My Refactoring Process&lt;a class="headerlink" href="#refactoring-code-my-refactoring-process" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In practice, I frequently do “cut-and-paste” development during my normal development
process.  However, I do this with a strict rule that I follow: “2 times on the
fence, 3 times refactor, clean up later”.  That rule break down as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if I cut-and-paste code once, I then have 2 copies, and I should consider refactoring unless I have a good reason to delay&lt;/li&gt;
&lt;li&gt;if I cut-and-paste that code again, I then have 3 copies, and that third copy must be into a function that the other 2 copies get merged into&lt;/li&gt;
&lt;li&gt;when I have solid tests in place and I am done with primary development, go back
to all of the cases where I have 2 copies and condense them if beneficial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My rationale for this rule is as follows.&lt;/p&gt;
&lt;p&gt;When you are creating code, you want the
ideas to flow free and fast, completing a good attempt at meeting your current goal
in the most efficient way possible.  While cut-and-paste as a long term strategy is not
good, I find that in the short term, it helps me in creating a new function, even if
that function is a copy of something done before.  To balance that, from experience, if
I have pasted the same code twice (meeting the criteria for “3 times refactor”), there
is a very good chance that I will use that code at least one more time, if not more.  At
that point, it makes more sense to refactor the code to encapsulate the functionality
properly before the block of code becomes to unwieldly.&lt;/p&gt;
&lt;p&gt;Finally, once I have completed the creation of the new source code, I go back and
actively look for cases where I cut-and-pasted code, and if it is worth it to refactor
that code, with a decision to refactor if I am on the fence.  At the very least,
refactoring code into a function almost always makes the code more readable and
maintainable.  Basically, by following the above rule for refactoring, I almost always
change the code in a positive manner.&lt;/p&gt;
&lt;p&gt;The summaries provided to me from PyScan help me with this refactoring in a big way.
Most of the time, the main idea with refactoring is to change the code on the “inside”
of the program or script without changing the “outside” of the program or script.  If
any changes are made to the “outside”, they are usually small changes with very
predictable impacts.  The PyScan summaries assist me in ensuring that any changes to the
outside of the script are kept small and manageable while also measuring the
improvements made to the inside of the script.  Essentially, seeing both summaries
helps me keep the code refactor of the script very crisp and on course.&lt;/p&gt;
&lt;h3 id="refactoring-code-leveraging-the-summaries"&gt;Refactoring Code - Leveraging The Summaries&lt;a class="headerlink" href="#refactoring-code-leveraging-the-summaries" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A good function set of functions for me to look at for clean-up refactoring were the
&lt;code&gt;generate_test_report&lt;/code&gt; and &lt;code&gt;generate_coverage_report&lt;/code&gt; functions.  When I wrote those
two functions, I wasn’t sure
how much difference I was going to have between those two functions, so did an initial
cut-and-paste (see “2 times on the fence”) and started making changes.  As those parts
of PyScan are now solid and tested, I went back (see “clean up later”) and compared
the two functions to see what was safe to refactor.&lt;/p&gt;
&lt;p&gt;The first refactor I performed was to extract the xml loading logic into a new
&lt;code&gt;__load_xml_docment&lt;/code&gt; function.  While I admit I didn’t get it right the first time, the
tests kept me in
check and made sure that, after a couple of tries, I got it right.  And when I say
“tries”, I mean that I made a change, ran &lt;code&gt;ptest&lt;/code&gt;, got some information, and diagnosed
it… all within about 30-60 seconds per iteration.  In the end, the summary looked like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Test results have not changed since last published test results.

Test Coverage Summary
---------------------

Type        Covered   Measured     Percentage
--------  ---------  ---------  -------------
Lines     499 (-10)  501 (-10)  99.60 (-0.01)
Branches  154 ( -6)  160 ( -6)  96.25 (-0.14)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As expected, the refactor eliminated both lines of code and branches, with the measured
values noted in the summary.&lt;/p&gt;
&lt;p&gt;The second refactor I made was to extract the summary file writing logic into a new
&lt;code&gt;__save_summary_file&lt;/code&gt; function.  I followed a similar pattern to the refactor for
&lt;code&gt;__load_xml_docment&lt;/code&gt;, but there was a small difference.  In this case, I observed that
for a specific error case, one function specified &lt;code&gt;test coverage&lt;/code&gt; and the other function
specified &lt;code&gt;test summary&lt;/code&gt;.  Seeing as consistent names in output is always beneficial,
I decided to change the error messages to be consistent with each other.  The
&lt;code&gt;test coverage&lt;/code&gt; name for the first function remained the same, but the &lt;code&gt;test summary&lt;/code&gt;
name was changed to &lt;code&gt;test report&lt;/code&gt;, with the text &lt;code&gt;summary&lt;/code&gt; added in the refactored
function.&lt;/p&gt;
&lt;p&gt;At this point, I knew that one test for each of the test results scenarios and test
coverage scenarios was going to fail, but I knew that it would fail in a very specific
manner.  Based on the above changes, the text &lt;code&gt;Project test summary file&lt;/code&gt; for the
results scenario test should change to &lt;code&gt;Project test report summary file&lt;/code&gt; and the text
&lt;code&gt;Project test coverage file&lt;/code&gt; for the coverage scenario test should change to
&lt;code&gt;Project test coverage summary file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When I ran the tests after these changes, there were indeed 2 errors, specifically
in the tests I thought they would show up in.  Once those 2 tests were changed to
reflect the new consistent text, the tests were ran again and produced the following
output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Test results have not changed since last published test results.

Test Coverage Summary
---------------------

Type        Covered   Measured     Percentage
--------  ---------  ---------  -------------
Lines     491 (-18)  493 (-18)  99.59 (-0.01)
Branches  152 ( -8)  158 ( -8)  96.20 (-0.18)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, the output matched my expectations.  While it wasn’t a large number of code
or branches, an additional 8 lines and 2 branches were refactored.&lt;/p&gt;
&lt;h3 id="determining-additive-test-function-coverage"&gt;Determining Additive Test Function Coverage&lt;a class="headerlink" href="#determining-additive-test-function-coverage" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are times after I have written a series of tests where I wonder how much actual
coverage a given test contributes to the overall test coverage percentage. As test
coverage is a collaborative effort of all of the tests, a single number that identifies
the amount of code covered by a single test is not meaningful.  However, a meaningful
piece of information is what unique coverage a given test contributes to the collection
of tests as a whole.&lt;/p&gt;
&lt;p&gt;To demonstrate how I do this, I picked one of the tests that addresses one of the error
conditions, the &lt;code&gt;test_summarize_cobertura_report_with_bad_source&lt;/code&gt; function in the
&lt;code&gt;test_coverage_scenarios.py&lt;/code&gt; file.  Before I
changed anything, I made sure to publish the current state to use it as a baseline. To
determine the additive coverage this test provides, I simply changed it’s name to
&lt;code&gt;xtest_summarize_cobertura_report_with_bad_source&lt;/code&gt;.  As the &lt;code&gt;pytest&lt;/code&gt; program only
matches on functions that start with &lt;code&gt;test_&lt;/code&gt;, the function was then excluded from the
tests to be executed.&lt;/p&gt;
&lt;p&gt;Upon running the &lt;code&gt;ptest&lt;/code&gt; script, I got the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Class Name                     Total Tests   Failed Tests   Skipped Tests
----------------------------  ------------  -------------  --------------
test.test_coverage_scenarios       11 (-1)              0               0
---                                --                   -               -
TOTALS                             43 (-1)              0               0

Test Coverage Summary
---------------------

Type       Covered   Measured     Percentage
--------  --------  ---------  -------------
Lines     507 (-2)        511  99.22 (-0.39)
Branches  159 (-1)        166  95.78 (-0.60)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interpreting this output, given what I documented earlier in this article, was pretty
easy.  As I “disabled”
one of the coverage scenario tests in the &lt;code&gt;test_coverage_scenarios.py&lt;/code&gt; file, the summary
reports one less test in &lt;code&gt;test.test_coverage_scenarios&lt;/code&gt; as expected.  That disabled
test added 2 lines of coverage and 1 branch of coverage to overall effort, coverage
that was now being reported as missing.  As this test was added specifically to test a
single error case, this was expected.&lt;/p&gt;
&lt;p&gt;If instead I disable the &lt;code&gt;xtest_junit_jacoco_profile&lt;/code&gt; test in the
&lt;code&gt;test_coverage_profiles.py&lt;/code&gt; file, I get a different result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Results Summary
--------------------

Class Name                    Total Tests   Failed Tests   Skipped Tests
---------------------------  ------------  -------------  --------------
test.test_coverage_profiles        1 (-1)              0               0
---                               --                   -               -
TOTALS                            43 (-1)              0               0

Test Coverage Summary
---------------------

Type       Covered   Measured     Percentage
--------  --------  ---------  -------------
Lines     501 (-8)        511  98.04 (-1.57)
Branches  152 (-8)        166  91.57 (-4.82)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the previous output, the disabled test is showing up as being removed, but there
is a lot more coverage that was removed.  Strangely enough, this was also expected.  As
I also use PyScan to summarize test results from Java projects I work on, I used all 6
coverage measurements available from Jacoco &lt;sup id="fnref:jacoco"&gt;&lt;a class="footnote-ref" href="#fn:jacoco"&gt;1&lt;/a&gt;&lt;/sup&gt; as a baseline for the 2
measurements generated by PyTest for Python coverage.  With a quick look at the
&lt;code&gt;report/coverage/pyscan_model_py.html&lt;/code&gt; file, this was indeed the reason for the
difference, with the test exercising 4 additional paths in each of the serialization
and deserialization functions. Basically, four paths of one line each, times two (one
for serialization and one for deserialization), and the 8 lines/branches covered is
explained.&lt;/p&gt;
&lt;h2 id="wrapping-up"&gt;Wrapping Up&lt;a class="headerlink" href="#wrapping-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that making my decision to talk about how I use my PyScan tool to summarize
test results and test coverage was the right choice.  It is difficult for me to
quantize exactly how much benefit PyScan has provided to my development process, but it
is easily in the very positive to indispensable category.  By providing a quick summary
on the test results file and the test coverage file, I can ensure that any changes I
make are having the proper effects on those two files at each stage of the change that
I am making.  I hope that by walking through this process and how it helps me, it will
inspire others to adopt something similar in their development processes.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:jacoco"&gt;
&lt;p&gt;For an example Jacoco HTML report that shows all 6 coverage measurements, check out &lt;a href="https://www.jacoco.org/jacoco/trunk/coverage/"&gt;the report trunk coverage for Jacoco&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:jacoco" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="pytest"></category><category term="scenario testing"></category></entry><entry><title>Measuring Testing in Python Scripts</title><link href="https://jackdewinter.github.io/2020/01/13/measuring-testing-in-python-scripts/" rel="alternate"></link><published>2020-01-13T00:00:00-08:00</published><updated>2020-01-13T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-01-13:/2020/01/13/measuring-testing-in-python-scripts/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the process of
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;creating a Markdown Linter&lt;/a&gt;
to use with my personal website, I firmly believe that it is imperative that I have
solid testing on that linter and the tools necessary to test the linter.  In my
previous article on
&lt;a href="https://jackdewinter.github.io/2020/01/06/scenario-testing-python-scripts/"&gt;Scenario Testing Python Scripts&lt;/a&gt;,
I …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the process of
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;creating a Markdown Linter&lt;/a&gt;
to use with my personal website, I firmly believe that it is imperative that I have
solid testing on that linter and the tools necessary to test the linter.  In my
previous article on
&lt;a href="https://jackdewinter.github.io/2020/01/06/scenario-testing-python-scripts/"&gt;Scenario Testing Python Scripts&lt;/a&gt;,
I described the in-process framework that I use for testing Python scripts from within
PyTest.  That framework ensures that I can properly test Python scripts from the
start of the script, increasing my confidence that they are tested properly.&lt;/p&gt;
&lt;p&gt;To properly figure out how my tests are doing and what their impact is, I turned on a
number of features that are available with PyTest.  The features either make testing
easier or measure the impact of those tests and relay that information. This article
describes my PyTest configuration and how that configuration provides a benefit to my
development process.&lt;/p&gt;
&lt;h2 id="adding-needed-packages-to-pytest"&gt;Adding Needed Packages to PyTest&lt;a class="headerlink" href="#adding-needed-packages-to-pytest" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are four main Python packages that I use in conjunction with PyTest.  The
&lt;code&gt;pytest-console-scripts&lt;/code&gt; package is the main one, allowing PyTest to be invoked
from the command line.  Since I am in favor of automating process where possible, this
is a necessity.  From a test execution point of view, the &lt;code&gt;pytest-timeout&lt;/code&gt; is
used to set a timeout on each test, ensuring that a single runaway test does not cause
the set of tests to fail to complete.  For reporting, the &lt;code&gt;pytest-html&lt;/code&gt; package is
useful for creating an HTML summary of the test results.  The &lt;code&gt;pytest-cov&lt;/code&gt; package adds
coverage of the source code, with reporting of that coverage built in.  I have found
that all of these packages help me in my development of Python scripts, so I highly
recommend these packages.&lt;/p&gt;
&lt;p&gt;Depending on the Python package manager and environment in use, there will be slightly
different methods to install these packages.  For plain Python this is usually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pytest-console-scripts&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.20 pytest-cov&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8.1 pytest-timeout&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.3.3 pytest-html&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I have used &lt;code&gt;pipenv&lt;/code&gt; a lot in my professional Python development, all of my personal
projects use it for setting up the environment and it’s dependencies.  Similar to the
line above, to install these packages into &lt;code&gt;pipenv&lt;/code&gt; requires executing the following
line in the project’s directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install pytest-console-scripts&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.20 pytest-cov&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8.1 pytest-timeout&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.3.3 pytest-html&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="configuring-pytest-for-those-packages"&gt;Configuring PyTest For Those Packages&lt;a class="headerlink" href="#configuring-pytest-for-those-packages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unless information is provided on the command line, PyTest will search for a
configuration file to use.  By default, &lt;code&gt;setup.cfg&lt;/code&gt; is the name of the configuration
file it uses.  The following fragment of my &lt;code&gt;setup.cfg&lt;/code&gt; file takes care of the
configuration for those PyTest packages.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[tool:pytest]
testpaths=./test
cache_dir=./build/test/.pytest_cache
junit_family=xunit2
addopts=--timeout=10 --cov --cov-branch --cov-fail-under=90 --strict-markers -ra --cov-report xml:report/coverage.xml --cov-report html:report/coverage --junitxml=report/tests.xml --html=report/report.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While all configuration is important, the following sections are most important in the
setting up of PyTest for measuring the effects of testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;testpaths=./test&lt;/code&gt; - relative path where PyTest will scan for tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addopts/--junitxml&lt;/code&gt; - creates a junit-xml style report file at given path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addopts/--cov&lt;/code&gt; - record coverage information for everything&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addopts/--cov-branch&lt;/code&gt; - enables branch coverage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addopts/--cov-report&lt;/code&gt; - types of report to generate and their destination paths&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default/--cov-config&lt;/code&gt; - configuration file for coverage, defaulting to &lt;code&gt;.coveragerc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order, the first two configuration items tells PyTest where to look for tests to
execute and where to place the JUnit-styled XML report with the results of each test.
The next three configuration items turn on coverage collection, enable
branch coverage, and specifies what types of coverage reports to produce and where to
place them.  Finally, because the &lt;code&gt;--cov-config&lt;/code&gt; is not set, the default location for
the coverage configuration file is set to &lt;code&gt;.coveragerc&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;For all of my projects, the default &lt;code&gt;.coveragerc&lt;/code&gt; that I use, with a small change to
the &lt;code&gt;source=&lt;/code&gt; line is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[run]
source = pyscan

[report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be honest, this &lt;code&gt;.coveragerc&lt;/code&gt; template is something I picked up somewhere, but it
works, and works well for my needs.  The exclude lines work in all case that I have
come across, so I haven’t touched them in the 2+ years that I have been writing code in
Python.&lt;/p&gt;
&lt;h2 id="benefits-of-this-configuration"&gt;Benefits Of This Configuration&lt;a class="headerlink" href="#benefits-of-this-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the setup from the last section, there are two main benefits that I get from this
setup.  The first benefit is machine readable XML information generated for the test
results and the test coverage.  While this is not immediately consumable in it’s
current form, that data can be harvested in the future to provide concise information
about what has been tested.&lt;/p&gt;
&lt;p&gt;The second benefit is to provide human readable information about the tests that have
been executed.  The HTML file located at &lt;code&gt;report/report.html&lt;/code&gt; relays the results of the
last series of tests while the HTML file located at &lt;code&gt;report/coverage/index.html&lt;/code&gt; relays
the coverage information for the last series of tests.  Both of these pieces of
information are useful for different reasons.&lt;/p&gt;
&lt;p&gt;In the case of the test results HTML, the information presented on the test results page
is mostly the same information as is displayed by PyTest when executed on the command
line.  Some useful changes are present, such as seeing all of the test information at
once, instead of just a &lt;code&gt;.&lt;/code&gt; for a successful test, a &lt;code&gt;F&lt;/code&gt; for a failed test, and so on.
I have found that having this information available on one page allows me to more
quickly debug an issue that is affecting multiple tests, instead of scrolling through
the command line output one test at a time.&lt;/p&gt;
&lt;p&gt;In the case of the test coverage HTML, the information presented on this page is
invaluable.  For each source file in the Python project being tested, there is a page
that clearly shows which lines of each Python script are exercised by the tests,  By
using these pages as a guide, I can determine what tests I need to add to ensure that
the scripts are properly covered.&lt;/p&gt;
&lt;p&gt;By using these two tools together, I can quickly determine what tests to add, and when
tests fail, I can determine why they failed and look for patterns in the failures.  This
enables me to quickly figure out where the blind spots are in my testing, and to address
them quickly.  This in turn can help me to figure out the best way to improve the
quality of the project I am working on.&lt;/p&gt;
&lt;p&gt;If this finds an issue with an existing requirement, that requirement can be adjusted
or a new requirement added to fulfil the deficiency.  If the requirements were all
right and the code it was testing was incorrect, that code can be addressed.  If
the coverage page shows that code was written but not tested, a new test function can
be introduced to cover that scenario.  Each observation and its appropriate action
work to improve the quality of the software project.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article showed how to setup PyTest using a configuration file.  With that
configuration file, it was set up to provide timeouts for tests, provide output on
the test results, and provide a coverage report of how well the tests covered the
scripts under test.  This was all accomplished to better understand the impact of tests
on a project and provide better information on how they succeed (test coverage) or fail
(test results).  By understanding this information, the quality of the software
can be measured and improved on if needed.&lt;/p&gt;
&lt;h2 id="what-is-next"&gt;What Is Next?&lt;a class="headerlink" href="#what-is-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the next article, I will briefly describe the PyScan tool I have written, and how it
takes the XML information generate by the &lt;code&gt;--junitxml=report/tests.xml&lt;/code&gt; option and the
&lt;code&gt;--cov-report xml:report/coverage.xml&lt;/code&gt; option and produces concise summaries of that
information.  I will also give a number of examples of how I use this information during
my development of Python projects.&lt;/p&gt;</content><category term="Software Quality"></category><category term="pytest"></category><category term="scenario testing"></category></entry><entry><title>Scenario Testing Python Scripts</title><link href="https://jackdewinter.github.io/2020/01/06/scenario-testing-python-scripts/" rel="alternate"></link><published>2020-01-06T00:00:00-08:00</published><updated>2020-01-06T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2020-01-06:/2020/01/06/scenario-testing-python-scripts/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the process of
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;creating a Markdown Linter&lt;/a&gt;
to use with my personal website, I firmly believe that it is imperative that I have
solid testing on that linter and the tools necessary to test the linter.  This testing
includes executing those Python tool scripts from start …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the process of
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;creating a Markdown Linter&lt;/a&gt;
to use with my personal website, I firmly believe that it is imperative that I have
solid testing on that linter and the tools necessary to test the linter.  This testing
includes executing those Python tool scripts from start to finish and verifying that
everything is working properly.  From my experience, one of the most efficient ways to
scenario test the project’s Python scripts is to use an in-process framework for
running Python scripts.&lt;/p&gt;
&lt;p&gt;Because of the way that Python works, it is very feasible to scenario test the Python
scripts using the in-process framework which I describe in this article.  To show
how the framework works in practice, I reference my
&lt;a href="https://github.com/jackdewinter/pyscan"&gt;PyScan project&lt;/a&gt; to
illustrate how I use this framework to test the scenarios in that project.
Specifically, I talk about the
&lt;a href="https://github.com/jackdewinter/pyscan/blob/master/test/pytest_execute.py"&gt;pytest_execute.py file&lt;/a&gt;
which contains the bulk of the code I use to write scenario tests with.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="determine-the-requirements"&gt;Determine the Requirements&lt;a class="headerlink" href="#determine-the-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As with most of my projects, the first thing I do for any new project is to cleanly
determine and document the requirements for the project.  Even though this project is
a single component used to test the tools and other components, I feel strongly that it
is still important to follow those guidelines to ensure the right component is built in
the right way.&lt;/p&gt;
&lt;p&gt;The basic requirements are pretty easy to define for this in-process test component:
execute the Python script independently and capture all relevant information about it’s
execution, verifying that information against expected values.  The devil is in the
details however.  I believe that a good definition of “execute the Python script” must
include the ability to set the current working directory and arguments for the command
line. For a good definition of “capture all relevant information”, I believe the
requirements must include capturing of the script’s return code as well as any output
to standard out (stdout) and standard error (stderr).  As this component executes the
script in-process, any attempts to exit the script prematurely must be properly
captured, and the state of the test must be returned to what it was at the beginning of
the test. Finally, to satisfy the “verifying” requirement, the component must have easy
to use comparison functions, with informative output on any differences that arise
during verification.&lt;/p&gt;
&lt;p&gt;Finding a balance between too many bulky requirements and too few lean requirements is
a tough balance to achieve.  In this case, I feel that I have achieved that balance by
ensuring all of the major parts of the requirements are specified at a high enough level
to be able to communicate clearly without ambiguity.  Here’s hoping I get the balance
right!&lt;/p&gt;
&lt;h2 id="capture-relevant-information"&gt;Capture Relevant Information&lt;a class="headerlink" href="#capture-relevant-information" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing to take care of is a class that will contain the information to satisfy
the “capture all relevant information” requirement above.  As the requirement specifies
the 3 things that need to be captured, all that is left to do is to create a class to
encapsulate these variables as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InProcessResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Class to provide for an encapsulation of the results of an execution.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std_err&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std_out&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std_err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std_err&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="executing-the-script"&gt;Executing the Script&lt;a class="headerlink" href="#executing-the-script" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that there is an object to collect the information about the script’s execution, a
simple function is needed to collect that information.  In the &lt;code&gt;InProcessExecution&lt;/code&gt;
base class, the &lt;code&gt;invoke_main&lt;/code&gt; function serves this purpose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Invoke the mainline so that we can capture results.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;

        &lt;span class="n"&gt;saved_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SystemState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;std_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;std_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std_output&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std_error&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_main_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_system_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_normal_exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;saved_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;InProcessResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before changing any of the existing system values, changes that by their very nature
are be made across the entire Python interpreter, the original values of those system
values are kept safely in an instance of the the &lt;code&gt;SystemState&lt;/code&gt; class in the
&lt;code&gt;saved_state&lt;/code&gt; variable.  As I want to ensure that the saved system state is reverted
back to regardless of what happens, a try-finally block is used to ensure that the
&lt;code&gt;saved_state.restore&lt;/code&gt; function is called to restore the system back to it’s original
state.&lt;/p&gt;
&lt;p&gt;Once the system state is safely stored away, changes to those system values can be made.
Instances of the &lt;code&gt;StringIo&lt;/code&gt; class are used to provide alternative streams for stdout
and stderr.  A new array is assigned to &lt;code&gt;sys.argv&lt;/code&gt;, either an empty array if no
arguments are provided or a copy of the provided array if provided.  To the start of
that array is inserted the name of the main script, to ensure that libraries expecting
a properly formatted array of system arguments are happy.  Finally, if an alternate
working directory is provided to the function, the script changes to that directory.&lt;/p&gt;
&lt;p&gt;To reiterate, the reason it is acceptable to make all of these changes to the system
state is that we have a safe copy of the system state stored away that we will revert
to when this function completes.&lt;/p&gt;
&lt;p&gt;After the &lt;code&gt;execute_main&lt;/code&gt; function is called to execute the script in the specified
manner, there are three possibilities that the function needs to capture the
information for. In the case of a normal fall-through execution, the &lt;code&gt;returncode = 0&lt;/code&gt;
statement at the start of the try-finally block sets the return code.  If a
&lt;code&gt;SystemExit&lt;/code&gt; exception is thrown, the &lt;code&gt;handle_system_exit&lt;/code&gt; function does a bit of
process to figure out the return code based on the contents of the exception.  Finally,
if the execution is terminated for any other exception, the &lt;code&gt;handle_normal_exception&lt;/code&gt;
makes sure to print out decent debug information and sets the return code to 1.  In all
three cases, the collected values for stdout and stderr are collected, combined with
the return code determined earlier in this paragraph, and a new instance of the
&lt;code&gt;InProcessResult&lt;/code&gt; class is returned with these values.&lt;/p&gt;
&lt;h2 id="verifying-actual-results-against-expected-results"&gt;Verifying Actual Results Against Expected Results&lt;a class="headerlink" href="#verifying-actual-results-against-expected-results" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started with the &lt;code&gt;assert_results&lt;/code&gt; function, it was only 3 statements in quick
succession: 3 assert statements asserting that the actual values for stdout, stderr and
the return code matched the expected values.  However, as I started using that function,
it was quickly apparent that when something did fail, there was a certain amount of
repetitive debugging that I performed to determine why the assert was triggered.  At
first I added some extra information to the assert statements, and that worked for the
return code.  But there were still two issues.&lt;/p&gt;
&lt;p&gt;The first issue was that, in the case where all 3 expected values were different than
the actual values, it took 3 iterations of cleaning up the test before it passed.  Only
when I cleared up the first failure did I see the second failure, and only after the
second failure was dealt with did I see the third.  While this was workable, it was far
from efficient.  The second issue was that if there were any differences with the
contents of the stdout or stderr stream, the differences between the expected value and
the actual value were hard to discern by just looking at them.&lt;/p&gt;
&lt;p&gt;To address the first issue, I changed the simple &lt;code&gt;assert_results&lt;/code&gt; function to the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;assert_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Assert the results are as expected in the "assert" phase.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;

        &lt;span class="n"&gt;stdout_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_stream_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stdout"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stderr_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_stream_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"stderr"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std_err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;return_code_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_return_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stdout_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stderr_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;return_code_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combined_error_msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_code_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;combined_error_msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"Either stdout, stderr, or the return code was not as expected.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;combined_error_msg&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key to resolving the first issue is in capturing the information about all
differences that occur, and then asserting only once if any differences are encountered.
To accomplish this, several comparison functions are required that capture individual
asserts and relay that information back to the &lt;code&gt;assert_results&lt;/code&gt; function where they
can be aggregated together.  It is these comparison functions that are at the heart
of the &lt;code&gt;assert_results&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The easiest
of these comparison functions is the &lt;code&gt;assert_return_code&lt;/code&gt; function, which simply
compares the actual return code and the expected return code.  If there is any
difference, the error message for the assert statement is descriptive enough to provide
a clear indication of what the difference is.  That raised &lt;code&gt;AssertionError&lt;/code&gt; is then
captured and returned from the function so the &lt;code&gt;assert_results&lt;/code&gt; function can report on
it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;assert_return_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_return_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_return_code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Assert that the actual return code is as expected.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;actual_return_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_return_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"Actual error code ("&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_return_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;") and expected error code ("&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_return_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;") differ."&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A slightly more complicated function is the &lt;code&gt;assert_stream_contents&lt;/code&gt; comparison
function. To ensure
that helpful information is returned in the assert failure message, it checks to see if
the &lt;code&gt;expected_stream&lt;/code&gt; is set and calls &lt;code&gt;compare_versus_expected&lt;/code&gt; if so.  (More about
that function in a minute.)  If not set, the assert used clearly states that the stream
was expected to be empty, and the actual stream is not empty.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;assert_stream_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_stream&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Assert that the contents of the given stream are as expected.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expected_stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare_versus_expected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;stream_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_stream&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;"Expected "&lt;/span&gt;
                    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;stream_name&lt;/span&gt;
                    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" to be empty. Not:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Addressing the second issue with the initial &lt;code&gt;assert_results&lt;/code&gt; function, the differences
between the two streams being difficult to discern, is the &lt;code&gt;compare_versus_expected&lt;/code&gt;
function.  My first variation on this function simply used the statement
&lt;code&gt;assert actual_stream.getvalue() != expected_text&lt;/code&gt;, producing the same assert result,
but lacking in the description of why the assert failed.  The second variation of this
function added a better assert failure message, but left the task of identifying the
difference between the two strings on the reader of the failure message.  The final
variation of this function uses the &lt;code&gt;difflib&lt;/code&gt; module and the &lt;code&gt;difflib.ndiff&lt;/code&gt; function to
provide a detailed line-by-line comparison between the actual stream contents and the
expected stream contents.  By using the &lt;code&gt;difflib.ndiff&lt;/code&gt; function in this final
variation, the assert failure message now
contains a very easy to read list of the differences between the two streams.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compare_versus_expected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_text&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Do a thorough comparison of the actual stream against the expected text.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;expected_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;difflib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;expected_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;actual_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;diff_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;stream_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" not as expected:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;diff_values&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="using-it-all-together"&gt;Using it all together&lt;a class="headerlink" href="#using-it-all-together" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start using the work that completed in the sections above, a proper subclass of the
&lt;code&gt;InProcessExecution&lt;/code&gt; class is required.  Because that class is an abstract base class,
a new class &lt;code&gt;MainlineExecutor&lt;/code&gt; is required to resolve the &lt;code&gt;execute_main&lt;/code&gt; function and
the &lt;code&gt;get_main_name&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainlineExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InProcessExecution&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;resource_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resource_directory&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;PyScan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_main_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"main.py"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;MainlineExecutor&lt;/code&gt; class implements those two required functions.  The
&lt;code&gt;get_main_name&lt;/code&gt; function returns the name of the module entry point for the project.
This name is inserted into the array of arguments to ensure that any functions based
off of the command line &lt;code&gt;sys.argv&lt;/code&gt; array resolves properly.  The &lt;code&gt;execute_main&lt;/code&gt;
function implements the actual code to invoke the main entry point for the script.  In
the case of the PyScan project, the entry point at the end of the &lt;code&gt;main.py&lt;/code&gt; script is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;PyScan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Therefore, the contents of the &lt;code&gt;execute_main&lt;/code&gt; function is &lt;code&gt;PyScan().main()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition to those two required functions, there is some extra code in the constructor
for the class.  Instead of recomputing the resource directory in each test that requires
it, the &lt;code&gt;MainlineExecutor&lt;/code&gt; class computes it in the constructor to keep the test
functions as clean as possible.  While this is not required when subclassing from
&lt;code&gt;InProcessExecution&lt;/code&gt;, it has proven very useful in practice.&lt;/p&gt;
&lt;p&gt;To validate the use of the &lt;code&gt;MainlineExecutor&lt;/code&gt; class with the project, I created a
simple scenario test to verify that the version of the scanner is correct.  This is
very simple test, and verifying that the framework passes such a simple test increases
the confidence in the framework itself.  At the start of the scenario test, the
&lt;code&gt;executor&lt;/code&gt; variable is created and assigned an instance of our new class
&lt;code&gt;MainlineExecutor&lt;/code&gt; as well as specify that the arguments to
use for the script as &lt;code&gt;["--version"]&lt;/code&gt;. in the array &lt;code&gt;suppplied_arguments&lt;/code&gt;  In keeping
with the Arrange-Act-Assert pattern, I then specify the expected behaviors for stdout
(in &lt;code&gt;expected_output&lt;/code&gt;), stderr (in &lt;code&gt;expected_error&lt;/code&gt;), and the return code from the
script (in &lt;code&gt;expected_return_code&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Having set everything up in the Assert section of the test, the Act section simply
invokes the script using the &lt;code&gt;executor.invoke_main&lt;/code&gt; function with the
&lt;code&gt;suppplied_arguments&lt;/code&gt; variable assigned previously, and collect the results.  Once
collected, the &lt;code&gt;execute_results.assert_results&lt;/code&gt; function verifies those actual results
against the expected results, asserting if there are differences.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_summarizer_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make sure that we can get information about the version of the summarizer.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="c1"&gt;# Arrange&lt;/span&gt;
    &lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainlineExecutor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;suppplied_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"--version"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;expected_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;main.py 0.1.0&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
    &lt;span class="n"&gt;expected_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;expected_return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Act&lt;/span&gt;
    &lt;span class="n"&gt;execute_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;suppplied_arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Assert&lt;/span&gt;
    &lt;span class="n"&gt;execute_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;expected_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_return_code&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-does-using-this-look-like"&gt;What Does Using This Look Like?&lt;a class="headerlink" href="#what-does-using-this-look-like" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of writing scenario tests, the tests are usually as simple to write as the
&lt;code&gt;test_get_summarizer_version&lt;/code&gt; function in the last section.  If there are parts of the
output that have a non-constant value, such as the full path of the directory in which
the test is executed in, the &lt;code&gt;expected_output&lt;/code&gt; variable would have to be set to
compensate for that variability, but that is an expected complexity.&lt;/p&gt;
&lt;p&gt;For the PyScan project, a quick scan of the 
&lt;a href="https://github.com/jackdewinter/pyscan/blob/master/test/test_scenarios.py"&gt;PyScan test_scenarios.py file&lt;/a&gt; reveals that for this project, the non-constant values most often
occur with failure messages, especially ones that relay path information in their
failure messages.  When that happens, such as with the
&lt;code&gt;test_summarize_junit_report_with_bad_source&lt;/code&gt; test function, that extra complexity
is not overwhelming and does not make the test function unreadable.&lt;/p&gt;
&lt;p&gt;In terms of the test output for a passing test, there is no difference.  If executing
&lt;code&gt;pipenv run pytest&lt;/code&gt; produced a &lt;code&gt;.&lt;/code&gt; for a successful test before, it remains a &lt;code&gt;.&lt;/code&gt; now.
The big difference is in what is displayed when there is a difference in the test
output.  &lt;/p&gt;
&lt;p&gt;In the case where there is a single character difference in the test output, such as
changing the expected output for the &lt;code&gt;test_get_summarizer_version&lt;/code&gt; test to
&lt;code&gt;main.py 0.1.1&lt;/code&gt;, the output below
clearly shows where the actual output and expected output differ.  Note that in these
comparisons, the line that starts with the &lt;code&gt;-&lt;/code&gt; character is the expected output and
the line that starts with the &lt;code&gt;+&lt;/code&gt; character is the actual output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E       AssertionError: Either stdout, stderr, or the return code was not as expected.
E
E       stdout not as expected:
E       ---
E       - main.py 0.1.1
E       ?             ^
E
E       + main.py 0.1.0
E       ?             ^
E
E       ---
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the case where a line in the test output is completely different, such as changing
the expected output to &lt;code&gt;This is another line&lt;/code&gt;, the output below clearly reflects that
difference:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E       AssertionError: Either stdout, stderr, or the return code was not as expected.
E
E       stdout not as expected:
E       ---
E       - This is another line
E       + main.py 0.1.0
E       ---
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in the case where the actual output contains either more lines or less lines
that the expected output, such as adding the line &lt;code&gt;This is another line&lt;/code&gt; to the
expected output, the output below clearly shows that difference.  In this example, as
the first line is at the start of both the actual output and expected output, it is
shown without any prefix to the line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E       AssertionError: Either stdout, stderr, or the return code was not as expected.
E
E       stdout not as expected:
E       ---
E         main.py 0.1.0
E       - This is another line
E       ---
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the &lt;code&gt;pytest_execute.py&lt;/code&gt; file that I use as the base for my scenario tests isn’t
rocket science, it is invaluable to me in creating simple, easy-to-read scenario tests.
At the heart of the module is the base requirement (as stated above) to execute the
Python script independently, capture all relevant information about it’s execution,
and then verifying that information against expected values.  Based on my experience
and evolution of this module, I believe that it handily satisfies the requirements
with ease.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;To keep things simple for the article, the &lt;code&gt;additional_error&lt;/code&gt; parameter from a number of the functions has been removed.  This parameter is used in the PyMarkdown project and will be documented as part of my articles on that project. &lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="pytest"></category><category term="scenario testing"></category></entry><entry><title>Have a Happy Winter Holiday 2019</title><link href="https://jackdewinter.github.io/2019/12/29/have-a-happy-winter-holiday-2019/" rel="alternate"></link><published>2019-12-29T00:00:00-08:00</published><updated>2019-12-29T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-12-29:/2019/12/29/have-a-happy-winter-holiday-2019/</id><summary type="html">&lt;p&gt;I just wanted to take a quick minute and wish everyone a  happy winter holiday season
as 2019 winds to a close.  When I resume posts in the new year, I will be trying to
publish weekly posts on Mondays instead of Sundays, and see how that goes.&lt;/p&gt;
&lt;p&gt;Safe travels …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just wanted to take a quick minute and wish everyone a  happy winter holiday season
as 2019 winds to a close.  When I resume posts in the new year, I will be trying to
publish weekly posts on Mondays instead of Sundays, and see how that goes.&lt;/p&gt;
&lt;p&gt;Safe travels, and well wishes.&lt;/p&gt;</content><category term="Software Quality"></category></entry><entry><title>Markdown Linter - Parser Testing Strategy</title><link href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/" rel="alternate"></link><published>2019-12-22T00:00:00-08:00</published><updated>2019-12-22T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-12-22:/2019/12/22/markdown-linter-parser-testing-strategy/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous articles in this series, I discussed the requirements for the Markdown
linter that I am writing.  From a development point of view, the main requirement is
the need for an accurate stream of tokens emitted by the parser.  Due to the absence of
any Markdown-to-token parsers …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous articles in this series, I discussed the requirements for the Markdown
linter that I am writing.  From a development point of view, the main requirement is
the need for an accurate stream of tokens emitted by the parser.  Due to the absence of
any Markdown-to-token parsers out there, I need to write a new parser that outputs an
accurate stream of tokens instead of a stream of HTML text. With the last article
showing the patterns I am using to test the parser, it is now time to figure out a set
of good strategies for the project, to ensure I can complete it without losing my
confidence (and sanity).&lt;/p&gt;
&lt;h2 id="why-is-strategy-important-when-testing"&gt;Why Is Strategy Important When Testing?&lt;a class="headerlink" href="#why-is-strategy-important-when-testing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When my son was younger, like most boys in his age group, he loved playing with LEGO and
he loved the idea of robots.  I mean, come on!  I am a lot older than him and I still
like LEGO and the idea of robots!  Anyhow, at his school they advertised for 5th grade
students that were interested in participating in a local
&lt;a href="http://firstlegoleague.org/"&gt;FIRST Lego League&lt;/a&gt; robotics team. From the first mention
of it, he was hooked.  As they needed some parents to help out, I participated with him
as a coach.  That position was a very rewarding, very humbling, and very frustrating
experience. Rewarding because I got to help 5th graders learn a little taste of what I
did everyday at work.  Humbling because the look in the kid’s eyes when they really
understood something reminded me of the benefits of being a coach.  Frustrating because
of almost all of the rest of the time between those two types of moments.&lt;/p&gt;
&lt;p&gt;I am not sure which parent, coach, or teacher helped me with a little gem of wisdom,
but I remember it as clear as day:  People have problems moving boulders, people
have success moving pebbles.  The idea behind that phrase is that if a team is
confronted with a problem, it is like encountering a boulder that you need to move out
of the way. Upon seeing a big boulder, many people take a look at it and say something
similar to “Wow! That is too big to move!”  But if you take that boulder and break it
down into smaller rocks, such as pebbles, many people will just laugh with ease at
moving those rocks, even if they have to do it one at a time.  In a similar fashion,
breaking down a big problem into smaller problems is a necessity in problem solving a
situation.  The boulders-to-pebbles phrase is a phrase I still use to this day when
coaching people in both my professional and personal lives.&lt;/p&gt;
&lt;p&gt;Writing a parser that handles anything more significant than a single line of text is
definitely “a boulder”.  I have been writing parsers for the better part of 25 years,
and those parsers are still boulders to me. However, I know from experience that
breaking down that “boulder-sized” task into more “pebble-sized” tasks works and works
well.  So here are the various items of my strategy for this project.&lt;/p&gt;
&lt;h2 id="strategy-0-define-and-execute-testing-linting-and-formatting"&gt;Strategy 0: Define and Execute Testing, Linting, and Formatting&lt;a class="headerlink" href="#strategy-0-define-and-execute-testing-linting-and-formatting" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me this is a strategy that I bring to almost every project, with very few
exceptions.  I always start with some kind of workflow template that I apply to the
project that performs formatting of the source code, linting of the source code, and
executes the testing framework.  Since I am a stickler for this approach, the setup for
this workflow usually takes 5 minutes or less, as I usually have at least one example
project lying around.  By consistently executing this workflow before committing any
changes, I keep the quality reasonably high as I go.&lt;/p&gt;
&lt;p&gt;Knowing that I had this framework in place for the Markdown parser was a godsend.  My
preference is to find frequent small break points during the implementation of a
feature, and to use those points to run the workflow.  For me, it increases my
confidence that I am either establishing a new “last known good point” or that I need
to retrace my steps to the last known good point to address an issue.  That confidence
helps me go forward with a positive attitude.&lt;/p&gt;
&lt;h2 id="strategy-0a-suppress-major-issues-until-later"&gt;Strategy 0A: Suppress Major Issues Until Later&lt;a class="headerlink" href="#strategy-0a-suppress-major-issues-until-later" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This may seem like somewhat of a counter to Strategy 0, but I see it more of allowing
the project to grow, but being reminded that there is work to do.  Minor issues such
as stylistics and documentation are handled right away, as they have a direct impact
on the maintainability of the code as it moves forward.  Major issues usually involve
a larger amount of code, and changing that much code usually has a fair amount of side
effects unless you work to prevent those side effects.&lt;/p&gt;
&lt;p&gt;Major issues are usually of the “too many/much” type, such as “too much complexity”,
“too many statements”, or “too many boolean statements”.  When I get to a really good
and stable point in the project, I know I will deal with these.  If I deal with the
issues before I get to such a point, I am taking a chance that I won’t have the
stability to make the change, while limiting and dealing with any potential side effects
in a clean and efficient manner.&lt;/p&gt;
&lt;p&gt;What is a good and stable point? For me, such a point has to have two dominant
characteristics.  The first is that I need to have a solid collection of tests in place
that I can execute.  These tests make sure that any refactoring doesn’t negatively
affect the quality of the code. The second characteristic is that the source code for
the project is at a point where there is a large degree of confidence that the
code in the section that I want to refactor is very solid and very well defined.  This
ensures that I can start looking for commonalities and efficiencies for refactoring
that will enhance the source code, but not prematurely.&lt;/p&gt;
&lt;h2 id="strategy-1-break-tests-and-development-into-task-groups"&gt;Strategy 1: Break Tests and Development Into Task Groups&lt;a class="headerlink" href="#strategy-1-break-tests-and-development-into-task-groups" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the principle of keeping things at a good size, don’t plan the entire project
out ahead of time, but make sure to break things down into the groups of tasks that are
needed as you need them.  Following an agile approach, make sure you have a good idea of
what needs to be done for a given task group, and don’t worry about any more details of
it until you need to.  And when you reach that point, reverify the tasks before going
forward and flushing out the details.&lt;/p&gt;
&lt;p&gt;For this parser, the
&lt;a href="https://github.github.com/gfm"&gt;GitHub Flavored Markdown specification&lt;/a&gt; delineates it’s
groups by the features in Markdown that are implemented.  Aligning the groups specified
in that document with the groups for tests and development was a solid choice from a
tracking point of view.  One of the reasons that I feel this worked well is because
these feature groups have anywhere between 1 and 50 examples in each group.  While some
of the larger ones were a tiny bit too big, for the most part it was a manageable
number of scenarios to handle in each group.&lt;/p&gt;
&lt;h2 id="strategy-2-organize-those-task-groups-themselves"&gt;Strategy 2: Organize Those Task Groups Themselves&lt;a class="headerlink" href="#strategy-2-organize-those-task-groups-themselves" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the task groups have been identified, take a step back and organize those task
groups themselves.  There are almost always going to be task groups that have a natural
affinity to be with similar task groups, so do so.  By doing similar tasks in
groups, it will help identify refactorings that can be accomplished later, as well as
the efficiency benefits from repeating similar processes.  Especially with a larger
project, those little efficiency benefits can add up quickly.&lt;/p&gt;
&lt;p&gt;As with the previous strategy, the GitHub Flavored Markdown specification comes to the
rescue again.  There are some implementation notes near the end of the specification
that provide some guidance on grouping.  The groups that I recognized were container
blocks, normal blocks, and inline parsing.  Normal blocks are the foundation of the
parsing, so it made sense to schedule those first.  Container blocks (lists and block
quotes) add nesting requirements, so I scheduled those second.  Finally, once all of
the block level tasks are done, inline parsing (such as for emphasis) can be performed
on text blocks derived at after the processing of the normal and container blocks.
After re-reading the end of the specification, the example that they gave seemed to
indicate that as well, so I was probably on a decent path.&lt;/p&gt;
&lt;h2 id="strategy-3-kiss"&gt;Strategy 3: K.I.S.S.&lt;a class="headerlink" href="#strategy-3-kiss" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned in the last article, I am a big proponent of the
&lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;K.I.S.S principle&lt;/a&gt;.
While I usually arrive at an end project that has lots of nice classes and functions,
worrying about that at an early stage can often be counter productive.  Even if it means
doing ugly string manipulations with variable names that you know you will change, that
approach can often lead to cleaner code faster.  Worry about getting the logic and the
algorithms right first, and then worry about making it “look pretty”.&lt;/p&gt;
&lt;p&gt;A good example of this is my traditional development practice of giving variables and
functions “garbage names” until I am finished with a set of functions.  Yes, that means
during development I have variable names like “foobar”, “abc”, “sdf”, and “ghi”, just to
name a few of them.  When I am creating the function, I maintain a good understanding of
what the variables are doing, and I want to concentrate on the logic.  Once the logic
is solid, I can then rename the variables to a descriptive name that accurately
reflects it’s purpose and use.&lt;/p&gt;
&lt;p&gt;I am not sure if this process works for everyone, but for me, not focusing on the names
helps me focus on the logic itself.  I also find that having a “naming pass” at the
function when I am done with the work helps me to give each variable a more meaningful
name before I commit the changes.  Once again, this is one of my development practices
that helps boost my productivity, and I acknowledge it might not work for everyone.&lt;/p&gt;
&lt;p&gt;For the parser, I employed this strategy whole-heartedly.  The first couple of groups of
work on the parser were performed by dealing with strings, with the only class for the
parser being the single class containing the parsing logic.  Once I got to a good point
(see above), I moved a number of the parsing functions and html functions into their
own static helper modules.  Up until that point, it was just simpler to be creative
with the logic in a raw form.  After that point, it made more sense to identify and
solidify the logic that encapsulated some obvious patterns, moving those algorithms
into their own classes for easy identification.&lt;/p&gt;
&lt;p&gt;As with many things, finding the right points to perform changes like this are difficult
to describe.  I can only say that “it felt like the right time for that change”.  And as
I commit and stage code frequently, if I made a mistake, I could easily rewind and
either retry the change, or abandon it altogether.&lt;/p&gt;
&lt;h2 id="strategy-4-use-lots-of-debug-output"&gt;Strategy 4: Use Lots of Debug Output&lt;a class="headerlink" href="#strategy-4-use-lots-of-debug-output" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a phrase that we use at work called “TTR” or Time-To-Resolution.
This is usually measured as the time taken from knowing that you have a problem until
the time that the problem is resolved and it’s solution is published.  Added during
development and debugging, spurious debug output can help provide a journal or log of
what is happening in the project, allowing for a more comprehensive comparison of the
 output of a passing test with the output of a failing test at the same time.  &lt;/p&gt;
&lt;p&gt;To be clear, using a debugger to load the code and step through it as it executes is
another way to debug the code.  In fact, in a fairly decent number of situations I
recommend that.  However, I find that the downside is that I don’t get to see the
flow through the code in the same way as with lots of debug statements.  As with a
lot of things, determining the balance between debug output and using a debugger
will differ for individual developers and for individual projects.&lt;/p&gt;
&lt;p&gt;Another benefit of the debug output approach is the transition from debug output to
logging.  Once the project has been sufficiently stabilized and completed, one of the
tasks that
arises is usually to output useful log messages at various points throughout the code.
I personally find that a certain percentage of the debug output that was good enough to
emit during development can become quality log messages with only small changes.&lt;/p&gt;
&lt;p&gt;The parser development definitely benefitted from this strategy.  Within a given task
group, there were often two Markdown patterns that were almost the same.  Sometimes it
looked like they should being parsed differently and sometimes I couldn’t figure out
why they weren’t parsed differently.  By examining the debug output for both cases,
I was able to verify whether or not the correct paths were followed, and if not, where
the divergences occurred.  Sure, the debug was cryptic and most of it never made it in
the final version of the parser. But when I needed to debug or verify during
development, it was invaluable.&lt;/p&gt;
&lt;h2 id="strategy-5-run-tests-frequently"&gt;Strategy 5: Run Tests Frequently&lt;a class="headerlink" href="#strategy-5-run-tests-frequently" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don’t only run tests when a set of changes is ready to commit, run those tests
frequently during the development of each task.  If done properly, most tests are there
to verify things are as they should be, and to warn of changes or situations that fall
outside of the requirements. If something is wrong, it is better to look through the
last feature added to determine what the problem is, rather than trying to determine
which of the last 5 features introduced that bad behavior.  Therefore, by executing the
tests frequently, either the confidence that the project is working properly increases
or there are early and frequent indications that something is wrong.&lt;/p&gt;
&lt;p&gt;During the development of the parser, the tests were instrumental in making sure that
I knew what features were “locked down” and which features needed work.  By keeping
track of that when adding a new feature, I could easily see when work on a new feature
caused a previously completed feature to fail it’s tests.  At that point, I knew I
didn’t have the right solution, but I also had confidence that the changes were small
enough to handle.&lt;/p&gt;
&lt;p&gt;Also, as the specification is large, there were often cases that were present but not
always spelled out in the documentation as well as they could have been.  However, time
and time again, the saving grace for the specification were the examples, now scenarios
and scenario tests in my project, sterling examples of what to expect.  And as I took
care to make sure they ran quickly, I was able to run all of the scenario tests in less
than 10 seconds.  For me, taking 10 seconds to ensure things were not broken was well
worth the cost.&lt;/p&gt;
&lt;h2 id="strategy-6-do-small-refactors-only-at-good-points"&gt;Strategy 6: Do Small Refactors Only At Good Points&lt;a class="headerlink" href="#strategy-6-do-small-refactors-only-at-good-points" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this strategy may look like a repeat of
&lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/#strategy-0a-suppress-major-issues-until-later"&gt;Strategy 0A: Suppress Major Issues Until Later&lt;/a&gt;,
the scope for this strategy is on a smaller, more local level.  Where Strategy 0A talks
about refactoring major issues later, there are often obvious minor refactors that can
be done at a local level.  These changes are often done right after a function is
written to fulfil a feature and rarely includes more than one function.  A good example
of this is taking a function that performs a given action twice with small variations
and rewriting that function by encapsulating that repeated action into it’s own
well-named function.  &lt;/p&gt;
&lt;p&gt;While such refactors almost always improve the code, care must be taken to strike a
good balance between making each method more readable and trying to optimize the
function ahead of time.  For myself, it is often more efficient for me to see the raw
code to recognize patterns from rather than already refactored code.  Unless I am the
author of the refactored code, I find that I don’t see the same patterns as with the
raw code.  As with many things, “Your Mileage May Vary”.&lt;/p&gt;
&lt;p&gt;When implementing the parser, this strategy was effectively applied at the local
level to improve readability and maintainability.  There were quite a few cases where
the logic to detect a given case and the processing of that case were complicated.
By assigning the detection of a given case to one function and the processing of that
case to another function, the border between the two concepts was enhanced, making the
calling function more readable.  As this kind of refactoring occurred at the local
level, it employed this strategy quite effectively.&lt;/p&gt;
&lt;h3 id="how-did-this-help"&gt;How Did This Help?&lt;a class="headerlink" href="#how-did-this-help" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For one, I had a plan and a strategy to deal with things.  As always, something would
happen during development which would require me to re-assess something. Given the
above strategy, I had confidence that I would be able to deal with it, adjusting the
different parts of the project as I went.&lt;/p&gt;
&lt;p&gt;Basically, I took a boulder (writing a parser) and not only broke it down into pebbles
(tasks needed to write the parser), but came up with a set of rules (strategy) on what
to do if I found some rocks that were previously unknown or larger than a pebble.  As
I mentioned at the start of the article, it’s a fairly simple bit of wisdom that I was
taught, but what a gem it is!&lt;/p&gt;
&lt;h2 id="what-comes-next"&gt;What Comes Next?&lt;a class="headerlink" href="#what-comes-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the next article, I take the requirements, scenarios,
and strategies and put them together to start writing the parser.  As one of the
test groups that I came up with was normal Markdown blocks, I will describe how I
implemented those blocks as well as the issues I had in doing so cleanly.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Setting Up Parser Tests</title><link href="https://jackdewinter.github.io/2019/12/16/markdown-linter-setting-up-parser-tests/" rel="alternate"></link><published>2019-12-16T00:00:00-08:00</published><updated>2019-12-16T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-12-16:/2019/12/16/markdown-linter-setting-up-parser-tests/</id><summary type="html">
&lt;h2 id="sidebar"&gt;Sidebar&lt;a class="headerlink" href="#sidebar" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My apologies for this being a day or two later that usual.  My son brought home a
cold that knocked the stuffing out of me, I needed to take some personal time to ensure
I was feeling better before writing.  Thanks for your patience.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a reminder of …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="sidebar"&gt;Sidebar&lt;a class="headerlink" href="#sidebar" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My apologies for this being a day or two later that usual.  My son brought home a
cold that knocked the stuffing out of me, I needed to take some personal time to ensure
I was feeling better before writing.  Thanks for your patience.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a reminder of the requirements from the
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;last article&lt;/a&gt;,
the big bullet-point items are:
command line driven, GitHub Flavored Markdown (for now), and preserving all tokens.  To
make sure I have a solid set of goals to work towards, setting these requirements as
part of the project was pivotal.  Now that I have that as a touchstone, I need to move
forward with defining how to progress with the testing of the parser at the core of
the linter.&lt;/p&gt;
&lt;h2 id="why-write-a-parser"&gt;Why Write a Parser?&lt;a class="headerlink" href="#why-write-a-parser" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In taking a look at the kind of rules that linters support, I have observed that there
are typically two categories of rules: general rules and grammar rules.  For general
rules such as “tabs should not be used”, it is easy to look at any line in the
document being scanned and look for a tab character.  For grammatical rules such
as “headings should always be properly capitalized”, that scan is more difficult.
The most difficult part of that rule is identifying whether or not any given piece
of text is considered part of a header, thus engaging the rest of the rule.&lt;/p&gt;
&lt;p&gt;From experience, to properly determine which part of grammar maps to which part of text
requires a capable parser, written to the specifications of the language to be parsed.
Based on my research from the
&lt;a href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/"&gt;last article&lt;/a&gt;,
all of the parsers that I found only translated Markdown into HTML, not any
intermediate form.  Since I need a clean stream of tokens before translation to HTML,
the only option is to write my own parser which will output a clean stream of parsed
Markdown tokens.&lt;/p&gt;
&lt;p&gt;As I am writing my own parser, I need to have a good set of tests to ensure
that the parser works properly.  But where to start?&lt;/p&gt;
&lt;h2 id="where-to-start-with-the-tests"&gt;Where To Start With The Tests?&lt;a class="headerlink" href="#where-to-start-with-the-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Referring back to my article on &lt;a href="https://jackdewinter.github.io/2019/11/10/software-quality-reliability/"&gt;software reliability&lt;/a&gt;,
the 2 main types of tests that I need to decide on are scenario tests and unit tests.
In a nutshell, the purpose of a scenario test is to test the input and outputs of the
project and the purpose of a unit test is to test a specific function of a specific
components of the project.  Getting a hold of how to balance the quantity of tests that
I need to write between the two of these types is my first priority.&lt;/p&gt;
&lt;p&gt;As one of the initial requirements is to support the
&lt;a href="https://github.github.com/gfm"&gt;GitHub Flavored Markdown specification&lt;/a&gt;, it is useful to
note that the specification itself has 637 individual examples.  Each example provides
for the input, in Markdown, and the output, in HTML.  While the output is not at the
token level needed to satisfy my project’s third requirement, it should be close
enough.  In looking at each of these examples, I need a solid set of rules that I
can apply to the tokens to get them from my desired token-based output to a HTML-based
output that matches the examples.  It is reasonable to collect these rules as I go when
I develop the various types of elements to be parsed.  If I tried to do them to far
ahead of time, it would invariably lead to a lot of rework.  Just in time is the way to
go for these rules.&lt;/p&gt;
&lt;p&gt;Taking another looking at the types of tests that I need to write, I realized that this
project’s test viewpoint was inverted from the usual ratio of scenario tests to unit
tests.  In most cases, if I have anything more than 20-30 scenario tests, I would think
that I have not properly scoped the project.  However, with 637 scenarios already
defined for me, it would be foolish not to write at least one scenario test for each of
those scenarios, adding extra scenario tests and supportive unit tests where needed.
In this case, it makes more sense to focus on the scenario tests as the major set of
tests to write.&lt;/p&gt;
&lt;p&gt;The balance of scenario tests to unit tests?&lt;/p&gt;
&lt;p&gt;Given 637 scenarios ready to go, I need to create at least 637 scenario tests.
For those scenario tests, experimenting with the first couple of scenario tests to
find a process that worked seemed to be the most efficient way forward.  Given a simple
and solid template for every scenario test, I had a lot of confidence to then use that
template for each scenario test that I tackled.&lt;/p&gt;
&lt;p&gt;And the unit tests?  In implementing any parsing code, I knew that I needed helper
functions that parsed a specific type of foundational thing, like a tag in an HTML
block or skipping ahead over any whitespace.  The unit tests are used to verify
that those kind of foundational functions are operating properly, ensuring that the
rest of the code can depend on those foundations with confidence.  As an added bonus,
more combinations of the various sequences to parse could be tested without inflating
the number of scenario tests.&lt;/p&gt;
&lt;p&gt;Ground rules set?   Check.  On to the first scenario test.&lt;/p&gt;
&lt;h2 id="starting-with-the-first-scenario-test"&gt;Starting With the First Scenario Test&lt;a class="headerlink" href="#starting-with-the-first-scenario-test" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it might not seem correct, starting with example number 189, the first test I
did write was for
&lt;a href="https://github.github.com/gfm/#example-189"&gt;GitHub Flavored Markdown example 189&lt;/a&gt;,
the first example
included in the specification for the paragraph blocks.  After solidly reading the
specification, the general rule seemed to be that if it doesn’t fit into any other
category, it is a paragraph.  If everything is going to be a paragraph until the other
features are written, I felt that starting with the default case was the right choice.&lt;/p&gt;
&lt;p&gt;After a number of passes at cleaning up the test for this first case, it boiled down to
the following Python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;https://github.github.com/gfm/#paragraphs&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.tokenized_markdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TokenizedMarkdown&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_if_lists_different&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_paragraph_blocks_189&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Test case 189:  simple case of paragraphs&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="c1"&gt;# Arrange&lt;/span&gt;
    &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenizedMarkdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""aaa&lt;/span&gt;

&lt;span class="s2"&gt;bbb"""&lt;/span&gt;
    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text:aaa:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[para:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text:bbb:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Act&lt;/span&gt;
    &lt;span class="n"&gt;actual_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Assert&lt;/span&gt;
    &lt;span class="n"&gt;assert_if_lists_different&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="breaking-down-the-scenario-test"&gt;Breaking Down the Scenario Test&lt;a class="headerlink" href="#breaking-down-the-scenario-test" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might be a lot to take in all at once, so let’s break it down step by step.&lt;/p&gt;
&lt;h3 id="start-of-the-module"&gt;Start of the Module&lt;a class="headerlink" href="#start-of-the-module" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The start of the module needs to perform two important tasks: provide useful
documentation to someone examining the tests and import any libraries needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;https://github.github.com/gfm/#paragraphs&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymarkdown.tokenized_markdown&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TokenizedMarkdown&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_if_lists_different&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most useful and relevant information about the module that I was able to think of
was the actual source for the test cases themselves.  That being the case, I felt that
including the URI to the specific section in the
&lt;a href="https://github.github.com/gfm"&gt;GitHub Flavored Markdown specification&lt;/a&gt; was the
right choice for the module documentation.  For anyone reading the tests, it provides a
solid reference point that answers most of the questions about why the tests are there
and whether or not the tests are relevant.&lt;/p&gt;
&lt;p&gt;Next are the import statements.  The first one statement imports the
&lt;code&gt;TokenizedMarkdown&lt;/code&gt; class, a class that I set up to handle the parsing.  Initially this
class was a quick and simple skeleton class, especially for the first paragraph case.
However, it provided the framework for me to support more use cases while maintaining
a uniform interface. The second import statement is used to include a function that
provides a good comparison of the contents of the list returned from the &lt;code&gt;transform&lt;/code&gt;
function of the &lt;code&gt;TokenizedMarkdown&lt;/code&gt; class and a simple text list of the expected
tokens.  &lt;/p&gt;
&lt;h3 id="arrange-the-data-for-the-test"&gt;Arrange The Data For The Test&lt;a class="headerlink" href="#arrange-the-data-for-the-test" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From all of the useful pieces of information that I have learned about testing, the
most useful bits about actually writing tests are the K.I.S.S. principle and the use of
the Arrange-Act-Assert pattern.  The
&lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;K.I.S.S principle&lt;/a&gt; constantly reminds me
to not overcomplicate things, reducing the tests to what is really relevant for that
thing or task.  The
&lt;a href="https://docs.telerik.com/devtools/justmock/basic-usage/arrange-act-assert"&gt;Arrange-Act-Assert pattern&lt;/a&gt;
reminds me that when writing tests, each test I write breaks down into setup, action,
and verification (with cleanup occasionally being added if needed). As such, I always
start writing my tests by adding a comment for each of those sections, with the rest
of the function blank.  Once there, it’s easy to remember which parts of the tests
go where!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_paragraph_blocks_189&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Test case 189:  simple case of paragraphs&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="c1"&gt;# Arrange&lt;/span&gt;
    &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenizedMarkdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;source_markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""aaa&lt;/span&gt;

&lt;span class="s2"&gt;bbb"""&lt;/span&gt;
    &lt;span class="n"&gt;expected_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"[para:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text:aaa:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[BLANK:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[para:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[text:bbb:]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"[end-para]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Arrange&lt;/code&gt; part of this test is simple, consisting mostly of easy-to-read
assignments.  The object to test needs to be setup in a way that it is completely
enclosed within the test function.  The tokenizer object with no options is assigned to
the &lt;code&gt;tokenizer&lt;/code&gt;, so a simple assignment takes care of it’s setup.  The &lt;code&gt;source_markdown&lt;/code&gt;
variable is setup within Python’s
&lt;a href="https://docs.python.org/3/tutorial/introduction.html#strings"&gt;triple-quotes&lt;/a&gt;
to preserve newlines and provide an accurate look at the string being fed to the
tokenizer.  This string is copied verbatim from the example represented by the function,
in this case &lt;a href="https://github.github.com/gfm/#example-189"&gt;example 189&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The final setup, the array assigned to the &lt;code&gt;expected_tokens&lt;/code&gt; variable, takes a bit more
work.  When I wrote these, I sometimes wrote the expect tokens ahead of time, but more
often than not used a known “bad” set of tokens and adjusted the tokens as I went.&lt;/p&gt;
&lt;h3 id="act-tokenize-and-assert-verify-results"&gt;Act (Tokenize) and Assert (Verify Results)&lt;a class="headerlink" href="#act-tokenize-and-assert-verify-results" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all of the work on the setup of the tests, the Act and Assert parts of the test
are very anticlimactic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Act&lt;/span&gt;
    &lt;span class="n"&gt;actual_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Assert&lt;/span&gt;
    &lt;span class="n"&gt;assert_if_lists_different&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the information that was established in the Arrange section of the test, the
Act section simply applies the input (&lt;code&gt;source_markdown&lt;/code&gt;) to the object to test
(&lt;code&gt;tokenizer&lt;/code&gt;) and collects the output in &lt;code&gt;actual_tokens&lt;/code&gt;.  The Assert section then
takes the output tokens and compares them against the expected list of tokens in
&lt;code&gt;expected_tokens&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="why-not-use-pure-test-driven-development"&gt;Why Not Use Pure Test Driven Development?&lt;a class="headerlink" href="#why-not-use-pure-test-driven-development" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In a normal project, I usually follow
&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt;
practices quite diligently, either writing the tests first and code second, or writing
both tests and code at the same time.  As this was my first version of my first
Markdown parser, I was aware that I was going to be adapting the tokens and token
formats as I went, eventually arriving at a set of tokens that worked for all scenarios.
Knowing that this churn was part of the development process for this project, I decided
that a true Test Driven Development process would not be optimal.&lt;/p&gt;
&lt;p&gt;For this project, it was very useful to adjust the process.  The balance that I struck
with myself was to make sure that as I coded the parser to respond to a given scenario,
I adjusted the tokens assigned to the &lt;code&gt;expected_tokens&lt;/code&gt; variable based on the example’s
HTML output for the equivalent scenario test.  This process gave me the confidence to
know that as I made tests pass by enabling the code behind the scenario, each individual
passing test was both moving towards a fully functioning parser and protecting the work
that I had already done in that direction.&lt;/p&gt;
&lt;p&gt;To be clear, as I copied the template over, I adjusted the function name, the
function’s doc-string, and the Markdown source text based on the scenario test that I
was implementing.  The list of tokens in &lt;code&gt;expected_tokens&lt;/code&gt; were then populated with
a “best guess” before I started working on the code to make that scenario pass.
In a microscopic sense, as I updated the test and the test tokens before starting on
the code, I was still adhering to Test Driven Development on a scenario-by-scenario
level.&lt;/p&gt;
&lt;p&gt;To me, this was a good balance to strike, evaluating the correct tokens as I went
instead of trying to work out all 637 sets of tokens ahead of time.  &lt;/p&gt;
&lt;h3 id="how-did-this-help"&gt;How Did This Help?&lt;a class="headerlink" href="#how-did-this-help" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Getting a good process to deal with the large bulk of scenario tests was a welcome
relief.  While I still needed to create a strategy to deal with that bulk of scenario
tests I would need to write (see the
&lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/"&gt;next article&lt;/a&gt;
for details on that), I had a
solid template that was simple (see K.I.S.S. principle), easy to follow (see
Arrange-Act-Assert pattern), and would scale.  This was indeed something that I
was able to work with.&lt;/p&gt;
&lt;h2 id="what-about-the-unit-tests"&gt;What About the Unit Tests?&lt;a class="headerlink" href="#what-about-the-unit-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Compared to the scenario tests, writing unit tests for the parser’s foundation
functions was easy.  In each case, there is a function to test with a very cleanly
specified interface, providing for a clean definition of expected input and output.&lt;/p&gt;
&lt;h2 id="what-comes-next"&gt;What Comes Next?&lt;a class="headerlink" href="#what-comes-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://jackdewinter.github.io/2019/12/22/markdown-linter-parser-testing-strategy/"&gt;next article&lt;/a&gt;,
I look at the work that needs to
be done and come up with general strategies that I use to implement the parser
required for the linter.  With the specification’s 637 examples as a base for the
scenario tests, good planning is needed to ensure the work can progress forward.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Markdown Linter - Collecting Requirements</title><link href="https://jackdewinter.github.io/2019/12/08/markdown-linter-collecting-requirements/" rel="alternate"></link><published>2019-12-08T00:00:00-08:00</published><updated>2019-12-08T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-12-08:/2019/12/08/markdown-linter-collecting-requirements/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My website is now up and running, even though in my mind it took forever.  To make sure
everything was “just so”, I went through each article with a fine-toothed comb multiple
times, each with a slightly different thing I was looking for.  In the end, it worked
out …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My website is now up and running, even though in my mind it took forever.  To make sure
everything was “just so”, I went through each article with a fine-toothed comb multiple
times, each with a slightly different thing I was looking for.  In the end, it worked
out, but I wished I could have automated at least some of that work and reduced the time
it took to do it.  And I also have a lingering question of whether or not I got
everything, or did I miss something out?&lt;/p&gt;
&lt;h2 id="what-is-a-linter"&gt;What Is a Linter?&lt;a class="headerlink" href="#what-is-a-linter" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A long time ago, when I first heard the term “lint”, I thought someone was referring to
the stuff that you find in the clothes dryer trap that you need to clean out.  According
to &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;Wikipedia&lt;/a&gt;, my guess was close.
Similar to the “undesirable bits of fiber and fluff found in sheep’s wool” from the
Wikipedia article, software linters are used to detect undesirable practices and
patterns in the objects they scan.  Once pointed out, the development team can then
decide whether or not to address the issue or ignore the issue.&lt;/p&gt;
&lt;h2 id="doing-my-research"&gt;Doing My Research&lt;a class="headerlink" href="#doing-my-research" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started looking around, and even though there are a number of Markdown-to-HTML command
line programs out there, finding a solid Markdown linter was another story.  I did find
a couple of starts at making one, but not a finished one that I could use.  The only
exception was the NPM-based
&lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint"&gt;Markdownlint&lt;/a&gt;
by David Anson.  This VSCode plugin is pretty much a standard for anyone creating
content in Markdown using VSCode, with well over 1.3 million downloads as of the writing
of this article.  By default, as you save articles, this linter executes and produces a
list of issues in the &lt;code&gt;Problems&lt;/code&gt; section at the bottom of the VSCode editor.&lt;/p&gt;
&lt;p&gt;This tool is indeed handy while writing an article, but the act of verifying multiple
articles becomes a bit of chore.  My general process was to open a document I wanted to
inspect, make a small whitespace changes, save the file, and examine the &lt;code&gt;Problems&lt;/code&gt;
section to see what the linter came up with.  Two things were more annoying about this
process that others.  The first issue is that any issue for any file that is open is
displayed in that section.  If I wanted to be efficient, it meant closing every other
file and just working on a single file at a time.  The second issue is that other
plugins write their problems there as well.  As a lot of my content is technical, there
are a fair number of spelling issues that arise that I need to ignore.  Once again,
neither one of these issues is a bad thing, just annoying.&lt;/p&gt;
&lt;h2 id="what-are-the-requirements"&gt;What Are The Requirements?&lt;a class="headerlink" href="#what-are-the-requirements" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Doing some thinking about this during the couple of weeks that I worked on the website,
a fairly decent set of requirements crystalized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must be able to see an accurate tokenization of the markdown document before translating to HTML&lt;ul&gt;
&lt;li&gt;working with an accurate tokenization remedies any translation problems instead of translating from HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;all whitespace must be encoded in that token stream as-is&lt;ul&gt;
&lt;li&gt;for consistency, want an exact interpretation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;initial tokenization for GitHub Flavored Markdown only, add others later&lt;ul&gt;
&lt;li&gt;initial tests against the &lt;a href="https://github.github.com/gfm/"&gt;GitHub Flavored Markdown specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;plans to later add other flavors of parser&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;must be able to provide a consistent lexical scan of the Markdown document from the command line&lt;ul&gt;
&lt;li&gt;clean feedback on violations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extending the base linting rules should require very little effort&lt;ul&gt;
&lt;li&gt;clear support for adding custom linting rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;written in Python&lt;ul&gt;
&lt;li&gt;good cross-platform support&lt;/li&gt;
&lt;li&gt;same language as Pelican, used as the
  &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Static Site Generator&lt;/a&gt; for my website&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While there are only 5 requirements, they are important.  The first two requirements
speak to reliability: the parsed Markdown tokens should be complete. The third
requirement is for stability: write against one specification with a solid set of test
cases before moving on to others.  The fourth requirement is all about usability: the
linter can be run from any appropriate command line.  Finally, the fifth requirement is
about extensibility:  add any needed custom rules.&lt;/p&gt;
&lt;p&gt;From my point of view, these requirements help me visualize a project that will help me
maintain my website by ensuring that any articles that I write conform to a simple set
of rules.  Those rules can be checked by a script before I commit them, without having
to load up a text editor.  Simple.&lt;/p&gt;
&lt;h2 id="why-is-this-important-to-me"&gt;Why Is This Important To Me?&lt;a class="headerlink" href="#why-is-this-important-to-me" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Writing this section, it took me a couple of tries to word this properly.  In the end, I
settled on a basic phrase:  It is a tool that I can use to make a software project
better.&lt;/p&gt;
&lt;p&gt;In other parts of my professional life, I take a look at things such as a Java project,
and try and improve the quality of that project.  The input is mainly Java source code
and the output is mainly JAR files that are executed by a JVM.  My website is no
different.  Remove Java source code and insert Markdown documents.  Remove JAR files
executed by a JVM and insert HTML files presented by a browser.  There are a few
differences between the two types of projects, but in all of the important ways, they
are the same.&lt;/p&gt;
&lt;p&gt;I took the time to manually scan each article for my website multiple times before I
did my website’s soft release.  To me, it just makes sense that there should be an
easier way to perform that process.  Easier in terms of time, and easier in terms of
consistency.  Unless I am missing something out there in the Internet, the only project
that came close to fulfilling my requirements was &lt;code&gt;Markdownlint&lt;/code&gt;, and it still had some
things missing.  I came to the realization that to be able to lint a Markdown file
against a set of rules, I was going to have to write my own Markdown parser.&lt;/p&gt;
&lt;p&gt;In the last couple of decades of professional life, I have written many parsers, so that
part of the project doesn’t scare me.  Due to the great works of the people at the
&lt;a href="https://github.github.com/gfm/"&gt;GFM site&lt;/a&gt;, there we a solid number of test cases that I
can test the parser against.  The extensibility issue would make me look at different
ways to integrate code into my tool, so a plus there.  All in all, a decent number of
things I have to get right, but nothing too far out of my field of experience.&lt;/p&gt;
&lt;p&gt;Sure it would be hard in places… but also a challenge!  Just the kind of thing I like!&lt;/p&gt;
&lt;h2 id="what-comes-next"&gt;What Comes Next?&lt;a class="headerlink" href="#what-comes-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://jackdewinter.github.io/2019/12/16/markdown-linter-setting-up-parser-tests/"&gt;next article&lt;/a&gt;, I start breaking down the
requirements for the Markdown parser and document how I will setup the tests for it.
As I am parsing a well-known format with varying implementations already available, it
is important to stay focused on one implementation and have a solid set of tests to
ensure I don’t go backwards in my development.&lt;/p&gt;</content><category term="Software Quality"></category><category term="markdown linter"></category></entry><entry><title>Website Soft Launch!</title><link href="https://jackdewinter.github.io/2019/12/01/website-soft-launch/" rel="alternate"></link><published>2019-12-01T00:00:00-08:00</published><updated>2019-12-01T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-12-01:/2019/12/01/website-soft-launch/</id><summary type="html">
&lt;p&gt;Well, it took a lot of work, but the website is finally tuned up the way I want it to be!&lt;/p&gt;
&lt;p&gt;I still have a number of small things to do to get the website up and running at 100%.
However, I am doing this soft-launch to start publishing articles …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Well, it took a lot of work, but the website is finally tuned up the way I want it to be!&lt;/p&gt;
&lt;p&gt;I still have a number of small things to do to get the website up and running at 100%.
However, I am doing this soft-launch to start publishing articles on a regular basis
instead of batching them up.  In the
&lt;a href="https://www.graylog.org/resources/crawl-walk-run"&gt;crawl-walk-run model&lt;/a&gt;,
this is me moving my website from the crawl stage to the walk stage.&lt;/p&gt;
&lt;p&gt;The website itself was mostly ready about 2-3 weeks ago, near the start of November.  But
as this is something public with my name attached to it, I wanted this soft-launch to be
a good representation of what I can do and what I can say.  As such, I went over the
website with a keen eye for detail during the period.  There were a number of days
where I just went through each individual article, one at a time, looking for something
specific.  On one day, it was making sure the categories were good.  On another, it was
making sure the tags I had selected for each article made sense.  On others, it was just
scanning the articles and making sure they were reflecting my voice.&lt;/p&gt;
&lt;p&gt;As this is a learning experience for me, please visit the pages on the site and leave
constructive comments about the content or the style!  Remember that everyone has had
help learning things in their live, and pay it forward!&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="website soft-launch"></category></entry><entry><title>The Inspiration For Jack's Digital Workbench</title><link href="https://jackdewinter.github.io/2019/11/15/the-inspiration-for-jacks-digital-workbench/" rel="alternate"></link><published>2019-11-15T00:00:00-08:00</published><updated>2019-11-15T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-11-15:/2019/11/15/the-inspiration-for-jacks-digital-workbench/</id><summary type="html">&lt;p&gt;Growing up in the late 70s and early 80s, the only computers that were available to me
at the time were the &lt;a href="https://en.wikipedia.org/wiki/Commodore_PET"&gt;Commodore&lt;/a&gt; line of
computers locked up in schools.  To feed my growing and inquiring mind, that left
electronics and mechanics to experiment with, and expendable examples of both …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Growing up in the late 70s and early 80s, the only computers that were available to me
at the time were the &lt;a href="https://en.wikipedia.org/wiki/Commodore_PET"&gt;Commodore&lt;/a&gt; line of
computers locked up in schools.  To feed my growing and inquiring mind, that left
electronics and mechanics to experiment with, and expendable examples of both were hard
to come by.  My only choice was to scrounge around for things in various stages of
disrepair, and upon getting one of those uncommon finds, take it downstairs to our
unheated garage and trying to &amp;ldquo;fix&amp;rdquo; it.  Far from a stellar place to work, it was not
heated, not ventilated and rarely keep clean.  And at the head of that garage, on the
wall adjoining the basement, was a solitary, ugly workbench fastened to the wall.&lt;/p&gt;
&lt;p&gt;That workbench was often the birthplace of many far-fetched dreams of what I could do if
only I could properly figure the thing laid out before me.  I almost never had the right
tools, so to be totally honest, more things got &amp;ldquo;more broken&amp;rdquo; than ever got fixed or
reassembled into something else.  Even with the right tools, while I believe my ability
to make it work again would have increased, the drive and knowledge to do so was
probably not there.  But even with a veritable graveyard of things that were not
completed, I chose not to dwell on the failures or make excuses for why I didn&amp;rsquo;t finish
them.  Instead, every time I approached that bench, I chose to dream and move forward.&lt;/p&gt;
&lt;p&gt;Looking back, I fondly remember the times I stood at that bench with the single, bright
work light in my eyes.  Back then, it was always the journey and the creative
imagination that was important.  The only pressure to produce something concrete was
when my mom asked &amp;ldquo;So, what have you been working on?&amp;rdquo;  However, as I grew older, I
realized that my mom&amp;rsquo;s question was equal parts sincere interest on her part and her
desire to have me grow past that graveyard of unfinished projects.  I believe that she
wanted me to be able to channel that creativity into the something tangible. Not so she
could show off my work to others, but in a sincere effort to help me grow.&lt;/p&gt;
&lt;p&gt;Things are a lot different some 40 years later.  Even though I longer use that old
workbench, I try and capture a lot of that creativity and wonder on a daily basis, both
in my professional life and home life.  The projects I undertake are no longer
far-fetched, but grounded in reality.  As a result, I am better at selecting the projects
that I want to work on and I am more successful in carrying them to completion.
When a project fails, I embrace one of the Mythbuster&amp;rsquo;s idioms,
&lt;a href="https://mygeekwisdom.com/2016/01/09/failure-is-always-an-option/"&gt;&amp;ldquo;Failure is always an option&amp;rdquo;&lt;/a&gt;
and try and learn what failed and how to deal with it next time.  While a small number of
projects till end up in my project graveyard, but I keep the larger number of successful
projects on proud display in my workplace and my house.&lt;/p&gt;
&lt;p&gt;So why start a blog and call it &amp;ldquo;Jack&amp;rsquo;s Digital Workbench&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;The simple answer is that I started blogging to help me keep a digital form of that
garage workbench alive and renewed.  I want to inspire people in the same way that my
mother has done in the past and continues to do so today.  I want to inspire people to
dream big, following each dream up with a grounding that enables them to work on that
project and gain confidence in their skills along the way.  I want to inspire people to
try and take something on, taking any failures along the way as teaching or learning
moments and not as dream killers.&lt;/p&gt;
&lt;p&gt;Basically, the reason for Jack&amp;rsquo;s Digital Workbench is to communicate with others and to
inspire them in a positive manner to allow them to, in turn, inspire the people around
them.&lt;/p&gt;</content><category term="Personal"></category></entry><entry><title>Software Quality: Reliability</title><link href="https://jackdewinter.github.io/2019/11/10/software-quality-reliability/" rel="alternate"></link><published>2019-11-10T00:00:00-08:00</published><updated>2019-11-10T00:00:00-08:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-11-10:/2019/11/10/software-quality-reliability/</id><summary type="html">
&lt;p&gt;In the main article titled &lt;a href="https://jackdewinter.github.io/2019/09/15/what-is-software-quality/"&gt;What is Software Quality?&lt;/a&gt;, I
took a high level look at what I believe are the 4 pillars of software quality.  This article
will focus specifically on the Reliability pillar, with suggestions on how to measure
Reliability and how to write good requirements for this …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;In the main article titled &lt;a href="https://jackdewinter.github.io/2019/09/15/what-is-software-quality/"&gt;What is Software Quality?&lt;/a&gt;, I
took a high level look at what I believe are the 4 pillars of software quality.  This article
will focus specifically on the Reliability pillar, with suggestions on how to measure
Reliability and how to write good requirements for this pillar.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the main article on
&lt;a href="https://jackdewinter.github.io/2019/09/15/what-is-software-quality/"&gt;What is Software Quality?&lt;/a&gt;,
the essence of this pillar can be broken down into two questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does the software do the task that it is supposed to do?&lt;/li&gt;
&lt;li&gt;Does the software execute that task in a consistent manner?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article will take an in-depth look at common types of tests, discussing how those
tests can help us gather the information necessary to answer those questions.  At
the end of this article, the section
&lt;a href="https://jackdewinter.github.io/2019/11/10/software-quality-reliability/#how-to-measure-reliability"&gt;How To Measure Reliability&lt;/a&gt; will use that information to provide a cohesive answer
to those questions.&lt;/p&gt;
&lt;h2 id="how-does-testing-help-measure-reliability"&gt;How Does Testing Help Measure Reliability?&lt;a class="headerlink" href="#how-does-testing-help-measure-reliability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As discussed in the main article’s section on
&lt;a href="https://jackdewinter.github.io/2019/09/15/what-is-software-quality/#Reliability"&gt;Reliability&lt;/a&gt;,
many articles on testing and reliability refer to a test pyramid that defines the 4
basic types of reliability tests: unit tests, functional/integration tests, scenario
tests, and end-to-end tests.  While those articles often have slightly different takes
on what the pyramid represents, a general reading of most of those articles leaves me
with the opinion that each test in each section of the pyramid must pass every time.
With tests and reliability being closely related, it is easy for me to draw the
conclusion that if tests must pass every time, then reliability is a binary choice:
they all pass and the project is reliable, or one or more fail and the project is not
reliable.&lt;/p&gt;
&lt;p&gt;As such, my main question is: Does it have to be a
binary choice?  Are the only two choices that either all tests did pass or all tests did
not pass? If the answer to that question is a binary answer, then the answer is simple:
it is either 100% reliable or 0% reliable.  More likely, there are other answers that
will give use a better understanding of how to measure reliability and how to interpret
those measurements.&lt;/p&gt;
&lt;h2 id="can-we-identify-groups-of-tests"&gt;Can We Identify Groups of Tests?&lt;a class="headerlink" href="#can-we-identify-groups-of-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before determining whether or not reliability is a binary choice, I feel that it is important
to make some foundational decisions on how to measure reliability based on the types of tests
that are already identified.  To aid in making those decisions, it helps to examine the four
categories of tests, looking for groupings between them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="test pyramid" src="https://jackdewinter.github.io/images/quality-1/test-pyramid.png"/&gt;&lt;/p&gt;
&lt;p&gt;Using the definitions established in the main article, unit tests are used to test
the reliability of individual software components and functional tests are used to test the
reliability of more than one of those components working together.  Both of these categories
are used to determine the reliability of the components themselves, and not their objectives.
As such, they make for a good grouping as they have a common responsibility: technical
reliability.&lt;/p&gt;
&lt;p&gt;Observing the scenario tests and end-to-end tests through a similar lens, those tests are used to
determine whether or not the software project meets its business requirements.  The end-to-end tests are often a set of
tests that are very narrow and deep of purpose.   At a slightly lower level, the scenario
tests provide extra support to those end-to-end tests by breaking those “bulky” end-to-end
tests into more discrete actions matched to the overall business use cases for the project.
A good grouping for these tests is by what they: business reliability.&lt;/p&gt;
&lt;p&gt;Another way to think about it is to view the groups of tests in terms of whether or not they
are inside or outside of the
&lt;a href="https://www.techopedia.com/definition/3552/black-box-testing"&gt;black box&lt;/a&gt;
that is the software project.  The first group of tests verify the inside of that black box,
ensuring that all of the technical requirements or “what needs to be done to meet
expectations” are met.  The second group of tests verify the outside of that black box,
ensuring that all of the business requirements or “what is expected of the project” are met.&lt;/p&gt;
&lt;p&gt;[Add picture of pyramid showing inside and outside?]&lt;/p&gt;
&lt;h2 id="give-me-an-example"&gt;Give Me an Example&lt;a class="headerlink" href="#give-me-an-example" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the follow sections, I use the example of a simple project that uses a data store to
keep track of contact information. By providing a simple example that most developers have
encountered before, my hope is that it will make it easier for the reader to picture the
different types of tests and how they will interact with their team’s project.  As I
examine each type of tests, I try and explain my thinking on what I write and how
I write it for that group of tests, hoping to guide others on making better decisions
for their testing strategy.&lt;/p&gt;
&lt;p&gt;Note that I do not believe that the definition of “data store” is relevant to the example,
therefore the definition of “data store” is left up to the reader’s imagination and
experience.&lt;/p&gt;
&lt;h3 id="end-to-end-tests"&gt;End-To-End Tests&lt;a class="headerlink" href="#end-to-end-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting at the top of test pyramid, each end-to-end test needs to be a solid,
representative test of the main focus of the project itself.  These tests are usually a
small set of tests meant as a solid litmus test on whether the software project is
reliably meeting the requirements of the project.  In forming the initial end-to-end
tests, my intent is to start with a focus on positive cases which occur more than
60% of the time.&lt;/p&gt;
&lt;p&gt;For the example project, I started with a test to successfully add a new contact. As a
nice bonus, starting with that test allowed me to add the remove, list, and update
end-to-end tests, as they all need to add a new contact as a foundation of each of those
3 individual tests. Given my experience measuring quality, I believe that all of those
tests together provide that check with confidence for the example project.  If I had
found out
that the number of end-to-end tests I needed was more than a handful of tests, I would
have then examined the requirements and try to determine if the project had too many
responsibilities.  Doing this exercise with a new project often helps me figure out if
the project is properly scoped and designed, or if it requires further refinement.&lt;/p&gt;
&lt;p&gt;Having identified the end-to-end tests for a project and assuming that no further
refinement is necessary, I rarely write source code for these tests right away.  Most
of the time I just add some simple documentation to the project outlined in
&lt;a href="https://en.wikipedia.org/wiki/Pseudocode"&gt;pseudocode&lt;/a&gt; to capture that information.  I
find that the main benefit of doing this in the early stages is to provide a
well-defined high level goal that myself and my team can work towards. Even having rough
notes on what the test will eventually look like can help the team work towards that
goal of a properly reliable project.&lt;/p&gt;
&lt;h3 id="scenario-tests"&gt;Scenario Tests&lt;a class="headerlink" href="#scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Still on the outside of the box, I then add a number of scenario tests to expand on the
scope of each of end-to-end tests.  For these tests, I focus on
&lt;a href="https://en.wikipedia.org/wiki/Use_case"&gt;use cases&lt;/a&gt;
that the user of the project will experience in typical scenarios. The intent here is to
identify the scenario tests that collectively satisfy 90% or more of the projected
business use cases for a given slice of the project.&lt;/p&gt;
&lt;p&gt;For the example project, adding a test to verify that I can successfully add a contact
was the first scenario test that I added.  I then added a scenario for the negative use
case of adding a contact and being told there are invalid fields in my request and a
third for a contact name that already existed.  Together, these scenarios met my bar for
the “add a contact” slice of the scenarios for the project.&lt;/p&gt;
&lt;p&gt;It is important to remember that these are tests that are facing the user and systems
they interact with. Unless there is a very strong reason to, I try and avoid scenario
tests that depend on any specific state of the project unless the test explicitly sets
that state up.  From my experience, such a dependency on external setup of state is very
fragile and hard to maintain.  It also raises the question on whether or not it is a
realistic or valuable test if that setup is not something that the project itself sets
up.&lt;/p&gt;
&lt;h4 id="why-only-those-3-scenario-tests"&gt;Why only those 3 scenario tests?&lt;a class="headerlink" href="#why-only-those-3-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here is a simple table on what types of scenario tests to add that I quickly put
together for that project.  The estimates are just that, examples,  but helped me
determine if I hit the 90% mark I was aiming for.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Percentage&lt;/th&gt;
&lt;th&gt;Scenario&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Success&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;td&gt;Add a contact successfully to the project.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bad/Invalid Data&lt;/td&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;Add an invalid contact name and validate that a ValidateError response is returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Processing Error&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;Add an contact name for an already existing contact and validate that a ProcessingError response is returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I sincerely believe that between those 3 scenario tests, I can easily defend that they
represent 90%+ of the expected usage of the project for the specific task of adding a
contact. While the percentages in the table are
&lt;a href="https://en.wikipedia.org/wiki/Scientific_wild-ass_guess"&gt;swags&lt;/a&gt;
that seem to be “plucked out of thing air”, I believe they can be reasonably
defended&lt;sup id="fnref:defense"&gt;&lt;a class="footnote-ref" href="#fn:defense"&gt;1&lt;/a&gt;&lt;/sup&gt;.  This defense only needs to be reasonable enough to get the project
going. Once the project is going, real data can be obtained by monitoring and more
data-driven percentages can be used, if desired.&lt;/p&gt;
&lt;h4 id="how-did-i-get-there"&gt;How did I get there?&lt;a class="headerlink" href="#how-did-i-get-there" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;From experience, there are typically 4 groups of action results, and therefore,
scenarios: the action succeeded, the action failed due to bad data, the action failed
due to a processing error, or the action failed due to a system error.&lt;/p&gt;
&lt;p&gt;The first scenario test represents the first category.  Unless there was a good reason to
show another successful “add” use case, I will typically stick with a single “add” test.
As the goal is to achieve 90% of the typical use cases for the project, unless a
variant of that success case is justified by it’s potential contribution towards the 90%
total, it can be better performed by other tests.  In addition, tests on variations of
the input data are better performed by unit tests and functional tests, where executing
those tests have lower setup costs and lower execution costs.&lt;/p&gt;
&lt;p&gt;The second scenario test is used to satisfy the second group of tests where the data is
found to be bad or invalid. In general, I use these to test that there is consistent
error handling &lt;sup id="fnref:errorHandling"&gt;&lt;a class="footnote-ref" href="#fn:errorHandling"&gt;2&lt;/a&gt;&lt;/sup&gt; on the boundary between the user and the project.  At
this level, I ideally need only one or two tests to verify that any reporting of bad or
invalid data is being done consistently. By leaving the bulk of the invalid testing to
unit testing and/or functional testing, I can simulate many error conditions and check
them for consistent output at a low execution cost.  To be clear, if possible I try and
verify the general ability that consistent error handling is in place and not that a
specific instance of error is being reported properly.&lt;/p&gt;
&lt;p&gt;The third scenario test is used to verify the third group of tests where data is valid
but fails during processing.  Similar to the second group of tests, there is an
assumption that the reporting of processing errors should be done consistently.  However,
as most processing errors result due to a sequence of actions originating from the user,
representative types of processing errors should be tested individually.  The key to this
type of scenario tests is to represent processing errors that will help the group of
scenario tests hit that 90% mark.  Relating this to the example project, getting a
“already add a record with that name” response from the project is something that would
occur with enough frequency to qualify in my books.&lt;/p&gt;
&lt;p&gt;From experience, the fourth group of tests, testing for system errors, rarely makes it
to the level of a scenario test.  In this example, unless a system error is so
consistent that it was estimated to occur more than 10% of the time, a higher priority
is placed on the other types of responses.&lt;/p&gt;
&lt;p&gt;One of the exceptions to these generic rules are when a business requirement exists to
provide extra focus on a given portion of the interface.  These requirements are often
added to a project based on a past event, either in the project or in a related project.
As the business owners have taken the time to add the business requirement due to its
perceived priority, it should have a scenario test to verify that requirement is met.&lt;/p&gt;
&lt;p&gt;In the contact manager example, I made a big assumption that unless there were
requirements that stated otherwise, the data store is local and easy to reach.  If
instead we are talking about a project where the data is being collected on a mobile
device and relayed to a server, then a test in this last group of system errors would
increase in value.  The difference that this context introduces is that it is expected
that project will fail to reach the data store on a frequent basis, and hence, providing
a scenario for that happening helps us reach that 90% goal.&lt;/p&gt;
&lt;h3 id="commonalities-between-end-to-end-tests-and-scenario-tests"&gt;Commonalities between End-to-end tests and scenario tests&lt;a class="headerlink" href="#commonalities-between-end-to-end-tests-and-scenario-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While I took the long way around describing end-to-end tests and scenario tests, I
believe the journey was worth it.  These two types of tests test against the external
surface of the project, together painting a solid picture of what that external surface
will look like once the project is done.  For both of those tests, the project needs
clear business requirements on what benefit it provides to the user, which will be
highlighted by translating the requirements into the various tests.  By including either
actual data (for existing projects) or projected data (for new projects) on the usage
patterns for that project, the requirements can be prioritized to ensure the most
frequently used requirements are more fully tested.&lt;/p&gt;
&lt;p&gt;For each of those requirements and goals, the team can then set goals for the project
based on those documented requirements.  By codifying those goals and requirements with
end-to-end and scenario tests, you firm up those goals into something concrete.  Those
actions allow the team to present a set of tests or test outlines to the authors of the
requirements, validating that things are going in the right direction before writing too
much source code or setting up of interfaces with the user.  That communication and
changing the course before writing code can save a team hours, days, or weeks,
depending on any course changes discovered.&lt;/p&gt;
&lt;p&gt;What happens if the requirements change?  The project has a set of tests that
explicitly test against the outside of the box, and informs the team on what changes
will be needed if that requirement change is applied to the project.  At the very least,
it starts a conversation with the author of the requirement about what the external
surface of the project will look like before and after the change.  With that
conversation started, the team can have a good understanding of how things will change,
with some level of confidence that the change is the change specified by the
requirements author.&lt;/p&gt;
&lt;h3 id="unit-tests-and-functional-tests"&gt;Unit Tests and Functional Tests&lt;a class="headerlink" href="#unit-tests-and-functional-tests" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Transitioning to inside of the black box, unit tests and functional tests are more
understood by developers and more frequently used than end-to-end tests or scenario
tests. The unit tests isolate a single component (usually a class) and attempt to test
that each interface of that component and is functioning properly.  The functional tests
do the same thing, but with a single group of components that work together as a single
component rather than a single component itself.&lt;/p&gt;
&lt;p&gt;From an implementation point of view, the main difference is in how these tests are
created. Unit tests, as they are testing a single component, should only contain a
project reference to the one component being tested.  If the components are created
properly and have a good separation from the rest of the project, this should be
achievable for a good number of
components for the project, especially the support components.  Therefore, the degree to
which these tests are successful is determined by the amount of clean division of
responsibilities the project has between it’s components.&lt;/p&gt;
&lt;p&gt;Functional tests complete the rest of the inside-of-the-box testing by testing individual
components with related components, in the way they are used in a production
environment.  With these tests, the degree to which these tests are successful is the
ability to inject the project dependencies into one or more of the components being
tested, coupled with the clean division of responsibilities needed for good unit tests.
While using a concept such as the interface concept from Java and C# is not required, it
does allow the injection of dependencies to be performed cleanly and with purpose.&lt;/p&gt;
&lt;p&gt;To enable groups of functional tests to be as independent of the components outside of
their group as possible, &lt;a href="https://en.wikipedia.org/wiki/Mock_object"&gt;mock objects&lt;/a&gt; are
often used to replace concrete classes that are part of your project.  If interfaces are
used in your project to allow for better
&lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt;,
your functional tests can create mock objects that reside with your tests.  This provides
more control and reliability on what changes you are making from the live instance of
the interfaces, for the sake of testing.  If interfaces are not supplied for better
dependency injection, a mocking library such as the Java
&lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;
are required to replace test dependencies with reliable objects.&lt;/p&gt;
&lt;h4 id="back-to-our-example"&gt;Back to our example&lt;a class="headerlink" href="#back-to-our-example" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Using the example project as a template, we know from the section on
&lt;a href="https://jackdewinter.github.io/2019/11/10/software-quality-reliability/#Scenario-Tests"&gt;scenario tests&lt;/a&gt;
that we need to test for valid inputs when adding a new contact.  To add
coverage for the component containing the “add a contact” logic as a unit test, it’s
success is determined by how much of the handling the external interface is in the one
component. If that component contains all of the code needed to handle that external
request in one method, it is extremely hard to test that component without bringing in
the other components.  That is definition of a functional test, not a unit test.  As an
alternative, if the validation of the input can be condensed into it’s own component and
removed from that method, that validation component can be unit tested very effectively.&lt;/p&gt;
&lt;p&gt;Applying that refactoring pattern a couple of more times in the right ways, the project’s
ability to be functionally tested increases.  As an added bonus,  depending on how the
refactoring is accomplished, new unit tests can be added based on the refactoring,
gaining measurable confidence on each additional component tested.  &lt;/p&gt;
&lt;p&gt;Using the adding a contact example again, having refactored the input validation to a
validation class could be followed by the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a new component for the handling of “add a contact” and decouple it from logic of the handling of the external interface&lt;/li&gt;
&lt;li&gt;move the user authentication and authorization logic into it’s own component&lt;/li&gt;
&lt;li&gt;move the persisting of the new contact logic into it’s own component&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From a functional test point of view, each of these refactorings makes it easier to test.
For the first refactoring, instead of having to rely on all functional testing going
through the external interface, which may include costly setup, we can create a local
instance of the new component and test against that.  If interfaces are used for the
remaining two refactorings, then test objects can be used instead of the “live” objects,
otherwise a mocking library can be used to replace those objects with more predictable
objects.&lt;/p&gt;
&lt;h2 id="how-is-each-group-of-tests-measured"&gt;How is each group of Tests Measured?&lt;a class="headerlink" href="#how-is-each-group-of-tests-measured" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On this winding journey to determine how to measure reliability, I explored the relevant
elements of the four main types of tests.  I believe that I was successful in showing a
clear delineation between the two groups of tests and the benefits each group provides.
To recap, the outside-of-the-box group validates the expectations to be met, matched
against the requirements set out for the project.  The inside-of-the-box group validates
how those exceptions are met, matched against the external interfaces for the project.&lt;/p&gt;
&lt;p&gt;These two distinct foundations are important, as the two distinct groups of tests require
two distinct groups of measurements.&lt;/p&gt;
&lt;p&gt;The first group, scenario tests and end-to-end tests, are measured by scenario coverage.
Scenario coverage measures the number of tests that successfully pass against the total
number of scenario tests and end-to-end tests for that project.  As this group of tests
is measuring the business expectations of the project, this measurement is a simple
fraction: the number of passing tests as the numerator and the number of defined tests
as the denominator.&lt;/p&gt;
&lt;p&gt;The second group, unit tests and functional tests, are measured by source code coverage,
or code coverage for short.  Code coverage can be specified along 6 different axes:
class, method, line, complexity, blocks, and lines.  Different measurement tools will
provide different subsets of those measurements, but in the end they are all relaying
the same thing: the points in the project’s source code that are not properly tested.&lt;/p&gt;
&lt;h2 id="back-to-the-original-question"&gt;Back to the original question&lt;a class="headerlink" href="#back-to-the-original-question" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Does it (the measuring of reliability) have to be a binary choice?&lt;/p&gt;
&lt;p&gt;It depends.&lt;/p&gt;
&lt;p&gt;In an ideal world, the answer to that question is yes, but we do not live in an ideal
world.  In the real world, we have a decision to make for either group of tests on what
is good enough for the project and that group of tests.&lt;/p&gt;
&lt;p&gt;If the suggestions of this article are followed, then a condition of releasing the
project to a production state is 100% scenario coverage.  Anything less than 100% means
that critical use cases for the project are not complete, hence the project itself is not
complete.  &lt;/p&gt;
&lt;p&gt;To achieve the 100% coverage without adding new project code, updated requirements are
needed from the requirements author, say a project manager, to change the composition of
the scenario tests and end-to-end tests.  This may include removing some of these
tests as the release goals for the project are changed.  While changing and removing
goals and their tests, may seem like cheating to some people, the other option is
very risky.&lt;/p&gt;
&lt;p&gt;It should be evident that if a project is released without all scenario tests and
end-to-end tests passing, that team is taking a gamble with their reputation and the
reputation of the project.  It is better to adjust the tests and goals, and communicate
those changes, than to take a risk on releasing something before it meets those goals.&lt;/p&gt;
&lt;p&gt;Following the suggestions of this article for code coverage is a more nuanced goal, and
really does depend on the project and the situation. If architected and designed to
support proper testing from the beginning, I would argue that 95%+ code coverage is easy
and desirable.  If you are adding testing to an already existing project or do not have
the full support of the developers on the project, this number is going to be lower.&lt;/p&gt;
&lt;p&gt;Another factor is the type of project that is being tested and who will use it.  If you
are creating this project to support people inside of your company, it is possible that
one of the requirements is to have a lower initial code coverage target to allow the
project to be used right away and alleviate some internal company pressure.  If the
project is something that will represent you and your company on the international stage,
you will have to balance the time and effort needed to meet a higher bar for code
coverage with the need to get the project out where it can be used.  As with many things,
it is a matter of negotiation and balance between the various requirements.&lt;/p&gt;
&lt;h2 id="what-is-really-important"&gt;What Is Really Important&lt;a class="headerlink" href="#what-is-really-important" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I want to stress that I believe that the important thing is that each project measures
where they are against whatever goals they set for their project. The team doesn’t need
to always maintain a near-100% code coverage measure, but that team needs to know where
they stand.  This will influence and inform the people that author the requirements and
adjust the priorities for the team.  Any negotiations within the team can then cite this
information and use it to help with the balancing act of adding new features, fixing
existing bugs, and enhancing code quality (in this case, increasing code coverage).&lt;/p&gt;
&lt;h2 id="how-to-measure-reliability"&gt;How To Measure Reliability&lt;a class="headerlink" href="#how-to-measure-reliability" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To answer the question “Does the software do the task that it is supposed to do?”,
scenario coverage is measured.  Scenario coverage for end-to-end tests and scenario
tests should always be at 100% when a production release of the project is performed.
This measurement is binary.  Until that release (or next production release) is
performed, adding or changing these tests based on the requirements for the next release
will inform the team and any stakeholders of how close the team is to satisfying those
requirements for that release.&lt;/p&gt;
&lt;p&gt;To answer the question “Does the software execute that task in a consistent manner?”,
code coverage is measured.  Code coverage for unit tests and functional tests should
strive for 95% code coverage along all 6 axes with all active tests completing
successfully 100% of the time.  The test completion percentage must be non-negotiable,
but the code coverage percentage must take into account the maturity of the project and
the usage of the project.  This measurement is non-binary.  However, it is important to
know your project’s code coverage measurement, and how it trends over time. While the
measurement is non-binary, it is suggested to create a binary rule that
specifies what the minimum percentage is for each axis, failing the rule if that
specific metric falls below the goal percentage.&lt;/p&gt;
&lt;h2 id="wrapping-it-up"&gt;Wrapping It Up&lt;a class="headerlink" href="#wrapping-it-up" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By breaking down the types of tests that are expected for a given project, the two
different types of measurements of reliably become more evident.  Scenario coverage
is determined by outlining the major scenarios for using a project and writing
end-to-end tests and scenario tests against them.  Scenario coverage must be a binary
measurement at release time.  Code coverage is determined by using tools to measure
which parts of the code are executed when running functional tests and unit tests.
Code coverage is a non-binary metric that must have a minimum bar for coverage that is
met for the project, and determined on the merits of the project itself.&lt;/p&gt;
&lt;p&gt;By using these two measurements, I hope that I have shown that it is possible to provide
a way to empirically measure reliability.  By having a project be transparent about how
it is reaching those measurements and what they are, any team can provide meaningful and
understandable measurements of reliability.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:defense"&gt;
&lt;p&gt;If asked, I could easily defend the percentages.  For the success case, I would assume that half the 60% number will come from first try successes and half the number will come from success that occurred after people fixed errors returned from the other two tests and resubmitted the data.  While the other two categories are somewhat guesswork, from my experience validation errors are 2-3 times more common than an “existing contact” processing error.  Note that in the absence of real data, these are estimates that do not have to be perfect, just reasonable. &lt;a class="footnote-backref" href="#fnref:defense" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:errorHandling"&gt;
&lt;p&gt;In designing any type of project, you should seek to have clear and consistent interfaces between your project and the users of the project.  An extension of that statement is that any responses you return to your user should be grouped with related responses and returned in a common data structure or UI element to avoid confusion. &lt;a class="footnote-backref" href="#fnref:errorHandling" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Software Quality"></category><category term="measuring software quality"></category><category term="software reliability"></category><category term="end-to-end tests"></category><category term="scenario tests"></category><category term="functional tests"></category><category term="unit tests"></category><category term="code coverage"></category><category term="scenario coverage"></category></entry><entry><title>Fine Tuning Pelican: Getting Ready For a Soft-Launch</title><link href="https://jackdewinter.github.io/2019/11/03/fine-tuning-pelican-getting-ready-for-a-soft-launch/" rel="alternate"></link><published>2019-11-03T00:00:00-07:00</published><updated>2019-11-03T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-11-03:/2019/11/03/fine-tuning-pelican-getting-ready-for-a-soft-launch/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Through the previous 11 articles, I have detailed the various fine tuning that I have
done on my website as I get it ready to publish.  Having completed and tested most of
the preparations to get the website ready for a soft-launch, it was time to think long
and hard about what categories and tags to use, and the rules going forward for both.
For me, having those two concepts right is going to help me shape the voice of my
website and really dial in the content I want to deliver.  This article details the
steps I took to take those final steps towards publishing.&lt;/p&gt;
&lt;h2 id="write-some-starter-articles"&gt;Write Some Starter Articles&lt;a class="headerlink" href="#write-some-starter-articles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To make sure that I was not presenting a blank website to any prospective readers, I
made sure to write a number of articles to have preloaded for the website’s soft launch.
I am not sure if others would make the same decision, but my reasoning was this: how
can I invite readers to my website if there is nothing to read?&lt;/p&gt;
&lt;p&gt;I am aware that my writing skill is passable and I am frequently reminded that I am
somewhat stubborn.  Between these two concepts, it took me a long while to find my voice
and come up with some ideas on what I wanted to write.  For each of the articles
published on this website before this date, there were probably 2-3 times as
many articles that “died” before they were finished, and another 2-3 times that died
before the first sentence was written.&lt;/p&gt;
&lt;p&gt;At first I thought this was a bit of a failure, but then I remembered some words from a
talk on photography that encouraged people to take 100 pictures, just to find the 1 or 2
pictures that were good.  The speaker went on to mention that as he gained more
experience, he still took 100 pictures, but the number of good pictures increased to the
point where his “good picture percentage” is now about 20%… and he is happy with that.
He went on to say that the most important things he learned were to take better pictures
and to not waste time on the picture that were not going to turn out.&lt;/p&gt;
&lt;h2 id="how-does-that-relate-to-article-writing"&gt;How Does That Relate To Article Writing?&lt;a class="headerlink" href="#how-does-that-relate-to-article-writing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Relating that back to my article writing, I believe that I am getting better in writing
the articles for three main reasons.  And when I say three main reasons, I am not really
talking about first, second, and third place – I am talking about three reasons that I
feel are almost equal in importance.&lt;/p&gt;
&lt;p&gt;The first reason is that like the photographer, I needed experience to grow as a writer
and gain confidence with my writing.  If I waited until after the soft-launch of the
website, then all of my learning through articles would be laid out for everyone to see.
From my experience, you only get one chance to make a good first impression… after
that, the good impression have less and less impact.  By gaining that experience before
the launch, it enabled me to make all of the failures I wanted to without worrying about
any first impressions being lost.&lt;/p&gt;
&lt;p&gt;The second reason is that I noticed that the more passionate I was about the subject
matter, the more passionate I was about writing the article.  By reducing the scope of
categories and subjects to the ones that I was most passionate about, my drive to write
a good article, start to finish, was more intense.  While that passion also caused me to
take more time to write the articles (and fuss over them like crazy), when each article
was done, I sincerely feel like I have done my best.  No regrets, no what-ifs, but a
strong feeling that I did my best in writing the article the way I did.&lt;/p&gt;
&lt;h2 id="properly-scoping-my-categories"&gt;Properly Scoping My Categories&lt;a class="headerlink" href="#properly-scoping-my-categories" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Stemming in part from the second reason above, the third reason that I think I got better
with the articles was that I narrowed the scope of the article topics from “anything I
want to say” to a small number of categories.  By focusing on a smaller and more focused
number of categories, I can afford to be more passionate about them.  I know that these
categories may change over time, but I am going to keep it to 5 categories or less.&lt;/p&gt;
&lt;p&gt;This part was not as easy as I thought, but also not as difficult.  As I wrote the
articles, I started noticing trends on which articles were making it further along and
kept notes and ideas for new articles.  If the category was a good one, I was picking
up speed in writing the articles.  Another good indicator was how easy it was to come
up with new articles for that category, along with a 3-4 sentence “sketch” on what the
article should be about.  It did take me a bit of time to recognize it, but in
retrospect, it was obvious what the categories should have been from the start.&lt;/p&gt;
&lt;h2 id="determining-good-rules-for-tags"&gt;Determining Good Rules for Tags&lt;a class="headerlink" href="#determining-good-rules-for-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last thing I needed to figure out before a soft-launch was the tags.  Unlike the
categories where I have a number of preset categories to create articles in, the tags
are present to allow for better identification of what topics or concepts are in an
article.  This in turn allows a reader to click on one of the tags displayed for an
article and see what other articles are listed there.&lt;/p&gt;
&lt;p&gt;Whereas for my website the categories are more or less fixed, the first rule I came up
with is that the tags should be fluid and truly represent the article.  If I want readers
to be able to find similar articles, I want to build trust that if I say an article is
tagged with a given word or phrase, it will directly reference that tag.  On my travels
through the internet, there is nothing more disappointing that following a link about
something you are researching, only to find that that the data you were promised is only
1 sentence in an article.  I don’t want that for my website.&lt;/p&gt;
&lt;p&gt;The second rule that I wrote for myself might seem stupid or silly, but a tag should
not be the same or similar to an existing category.  Before going through my articles
for my soft-launch, there were a number of times where that duplication existed.  Now,
often that was due to me not having the first rule in place when authoring those
articles, but it still happened.  This should be an easy one to follow.&lt;/p&gt;
&lt;p&gt;Finally, the last rule that I came up in preparation for the soft-launch was that tags
will be descriptive without being too verbose.  When I picture this rule in my mind,
what I usually think of is 2 words, where one is an adjective and the other is a noun.
While this can sometimes get to 3 words, I don’t want it to extend past there as that
is descending quickly into the verbose category.  As an example, “website” is a bad tag
as it does not describe what kind of website I am talking about.  On the other side,
“how to write a better website” is too verbose, practically being it’s own sentence. In
between is “writing better websites” which seems to strike a good balance between the
two for me.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using the other articles in this series as a jumping off point, this article focuses on
getting the categories and tags right across the articles.  I talked briefly about my
philosophy about preloading the site with articles, both to gain experience in writing
articles and to determine which articles were the right articles for me to write about.
As a natural result of that work, I was able to determine a good initial set of
categories for my website, encompassing the topics that I am most passionate about,
hopefully ensuring that my best work will be put forward.  Finally, I came up with a
number of initial rules about tags to help readers of my website find related content
on my website with a minimum of effort.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="website soft-launch"></category></entry><entry><title>Fine Tuning Pelican: Enabling Website Crawling</title><link href="https://jackdewinter.github.io/2019/10/30/fine-tuning-pelican-enabling-website-crawling/" rel="alternate"></link><published>2019-10-30T00:00:00-07:00</published><updated>2019-10-30T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-30:/2019/10/30/fine-tuning-pelican-enabling-website-crawling/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many forms of website crawling are fraught with copyright issues and may be considered
unethical, as is discussed in this article on
&lt;a href="https://www.promptcloud.com/blog/data-crawling-and-extraction-ethics/"&gt;Data Crawling and Ethics&lt;/a&gt;.  In contrast, there are legal and ethical uses
for web crawling, such as providing the data to search engines such as
&lt;a href="https://www.google.com"&gt;Google&lt;/a&gt; and &lt;a href="https://www.bing.com"&gt;Bing&lt;/a&gt;.  While Search Engine
Registration and Optimization is covered in another article, it is worthwhile to ensure
that the website is properly set up to regulate any web crawling that does occur.  This
article details the setup required to enable this regulation.&lt;/p&gt;
&lt;h2 id="why-use-a-robotstxt-file"&gt;Why Use A Robots.Txt File?&lt;a class="headerlink" href="#why-use-a-robotstxt-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.robotstxt.org/robotstxt.html"&gt;Robots Exclusion Protocol&lt;/a&gt; has been around
for almost as long as webservers.  As described in the protocol, it manifests itself as
a specially formatted &lt;code&gt;robots.txt&lt;/code&gt; file located in the base directory of the webserver.
While this protocol is not enforceable and remains a suggestion for
web crawlers, it does provide for the rules that you have for “proper” crawlers accessing
your website.&lt;/p&gt;
&lt;p&gt;For my website, this file exists in the content directory at &lt;code&gt;/extras/robots.txt&lt;/code&gt; and
has the following configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User-agent: *
Disallow:

Sitemap: https://jackdewinter.github.io/sitemap.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This instructs any web crawler that is behaving properly of 3 important facts about the
website.  The first instruction is that the website is okay with crawlers representing
any user agents are allowed to access the site.  The second instruction is that there
are no paths in the webserver that web crawlers are not allowed to access.  Finally,
the third instruction provides the web crawler with the location of the website’s
sitemap, detailing the location of each page on the website.&lt;/p&gt;
&lt;p&gt;These pieces of information are important for different reasons.  The first two pieces of
information are meant to restrict web crawlers from accessing the site, if so informed.
In the case of this configuration, the &lt;code&gt;*&lt;/code&gt; value for the &lt;code&gt;user-agent&lt;/code&gt; field means that
all user agents are allowed, and the empty value for the &lt;code&gt;disallow&lt;/code&gt; field means that no
parts of the website are disallowed.  Between these two instructions, a web crawler
can correctly determine that it is allowed to access any webpage on the website,
appearing as any type of web browser or web crawler.&lt;/p&gt;
&lt;h2 id="how-to-publish-the-robotstxt-file"&gt;How To Publish The Robots.txt File&lt;a class="headerlink" href="#how-to-publish-the-robotstxt-file" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Publishing the &lt;code&gt;robots.txt&lt;/code&gt; file requires two separate bits of configuration to ensure
it is done properly.  The first bit of configuration modifies the existing
&lt;code&gt;STATIC_PATHS&lt;/code&gt; value to add the path &lt;code&gt;extra/robots.txt&lt;/code&gt; to the list of directories and
files to publish without modification.  The second bit of configuration specifies that
the file at the path &lt;code&gt;extra/robots.txt&lt;/code&gt;, when published without any modifications, will
be located at the path &lt;code&gt;/robots.txt&lt;/code&gt; at the webserver’s root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'extra/robots.txt'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'extra/robots.txt'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'/robots.txt'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="publishing-the-sitemap"&gt;Publishing the Sitemap&lt;a class="headerlink" href="#publishing-the-sitemap" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Generating a sitemap for Pelican is accomplished by adding the &lt;code&gt;sitemap&lt;/code&gt; plugin to the
&lt;code&gt;PLUGINS&lt;/code&gt; configuration variable as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As detailed in the
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/sitemap"&gt;sitemap plugin documentation&lt;/a&gt;, while there are defaults for the sitemap, it is always better to specify actual
values for each specific website.  The values used for my website are as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'format'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'xml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'priorities'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'indexes'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'pages'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;'changefreqs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'weekly'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'indexes'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'weekly'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'pages'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'monthly'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In short, the configuration specifies that the format is &lt;code&gt;xml&lt;/code&gt;, producing a
&lt;code&gt;/sitemap.xml&lt;/code&gt; file.  The priorities of scanning are articles, then indexes, then pages,
with change frequencies roughly backing up the priorities.  For my website, the thought
behind the values is that articles, and the indices they are part of, will be updated on
a weekly frequency while pages will vary rarely changed.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The purpose of this article was to detail the configuration for my website that supports
crawling of the site for information.  The first part of this configuration enabled the
creation of a &lt;code&gt;robots.txt&lt;/code&gt; file and publishing that file as part of the website.  The
second part of the configuration added the &lt;code&gt;sitemap&lt;/code&gt; plugin and tailored the sitemap
configuration for the specific balances for my website.  Together, this configuration
makes me feel confident that the website is well configured for web crawlers,
specifically search engines.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="pelican website crawling"></category><category term="pelican sitemap"></category></entry><entry><title>Fine Tuning Pelican: Connecting with Readers</title><link href="https://jackdewinter.github.io/2019/10/27/fine-tuning-pelican-connecting-with-readers/" rel="alternate"></link><published>2019-10-27T00:00:00-07:00</published><updated>2019-10-27T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-27:/2019/10/27/fine-tuning-pelican-connecting-with-readers/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most important things for a website to focus on is to connect to the people
that are viewing the website.  That focus is usually geared towards the readers that are
attracted to the website’s content and retaining that focus.  To retain this connection,
a website needs to employ a number of tools to engage the readers and maintain their
attention.  Without employing these tools, any readers of the site will be transient and
unlikely to return.  This article discusses the tools that my website uses to engage and
attempt to retain readers.&lt;/p&gt;
&lt;h2 id="social-media"&gt;Social Media&lt;a class="headerlink" href="#social-media" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As social media is so pervasive in today’s society, it is pivotal to add links
to your social media accounts, as detailed in the Elegant article on
&lt;a href="https://next.elegant.oncrashreboot.com/how-to-display-your-social-media-profiles"&gt;displaying social media profiles&lt;/a&gt;.  For my website, that configuration boiled
down to the following configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Stay in Touch'&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GitHub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/jackdewinter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'github-alt'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'linkedin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://www.linkedin.com/in/jackdewinter/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"linkedin"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'RSS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://jackdewinter.github.io/feeds/all.atom.xml'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Together, these configuration settings provide for the &lt;code&gt;Stay in Touch&lt;/code&gt; section at the
bottom of the right sidebar, containing icons that will take you to social media
associated with the website.  The one outlier to this is the RSS icon that appears at the
end of the other icons.  While technically not a form of social media, by following the
&lt;a href="https://next.elegant.oncrashreboot.com/how-to-show-rss-feeds-icon"&gt;Elegant steps outlined here&lt;/a&gt;,
this useful icon is added and placed in a location that is easily accessible for any
readers to use in their automation.&lt;/p&gt;
&lt;h2 id="allow-readers-to-comment"&gt;Allow Readers To Comment&lt;a class="headerlink" href="#allow-readers-to-comment" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To establish a sense of community and utility with the website, it is important to allow
readers to make comments on your articles.  While some of those comments may not always
seem nice, it is important to try and engage with each reader’s comment, and figure out
a positive manner in which to respond to it.&lt;/p&gt;
&lt;p&gt;While Pelican does not support any commenting system itself, the Elegant theme has
supported &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; for a long time, and recently added support for
&lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt;.  Going through the obvious features of each of
these platforms, I quickly constructed the following table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Disqus&lt;/th&gt;
&lt;th&gt;Utterances&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;paid tiers&lt;/td&gt;
&lt;td&gt;free (backed by GitHub)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register with Disqus&lt;/td&gt;
&lt;td&gt;register with GitHub&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;savvy readers may already have GitHub account&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Based on that information, choosing Utterances was an easy choice for me.
Registering with Utterances is also easy, with Elegant having taken care of a number of
the steps for us.&lt;/p&gt;
&lt;h3 id="enabling-utterances-for-the-repository"&gt;Enabling Utterances For The Repository&lt;a class="headerlink" href="#enabling-utterances-for-the-repository" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Going to the &lt;a href="https://utteranc.es/"&gt;Utterances website&lt;/a&gt;, my first pass at trying to
figure out how to register was an utter bust, and I confess that I was somewhat
confused.  Taking a step back, I was able to figure out the following flow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;made sure I have a GitHub account&lt;/li&gt;
&lt;li&gt;went to the &lt;a href="https://github.com/apps/utterances"&gt;Utterance application page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clicked on the &lt;code&gt;Configure&lt;/code&gt; button at the top right of the page&lt;/li&gt;
&lt;li&gt;picked the User or Group containing the project where the target repository for the comments is&lt;/li&gt;
&lt;li&gt;my repository for the website is &lt;code&gt;jackdewinter\jackdewinter.github.io&lt;/code&gt;, so I selected &lt;code&gt;jackdewinter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;verified my access to setup the account by providing the password&lt;/li&gt;
&lt;li&gt;this verification may not occur if you have verified your access within the last 10-15 minutes&lt;/li&gt;
&lt;li&gt;selected the repository &lt;code&gt;jackdewinter.github.io&lt;/code&gt; from the drop-down list&lt;/li&gt;
&lt;li&gt;pressed the &lt;code&gt;Save&lt;/code&gt; button to save these changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I was able to get this flow right on the first try, it did take me an additional
time or two to get the flow documented correctly.  Other than that, it was really easy to
setup, with no misleading steps along the way.&lt;/p&gt;
&lt;h3 id="enabling-utterances-in-elegant"&gt;Enabling Utterances In Elegant&lt;a class="headerlink" href="#enabling-utterances-in-elegant" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I had the GitHub portion of Utterances set up, it was time to setup Elegant to make
use of that setup.  Following Elegant’s article on
&lt;a href="https://next.elegant.oncrashreboot.com/enable-utterances-comments"&gt;Comments - Enabling Utterances&lt;/a&gt;, I quickly came up with the following configuration changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;UTTERANCES_REPO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"jackdewinter/jackdewinter.github.io"&lt;/span&gt;
&lt;span class="n"&gt;UTTERANCES_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Comments"&lt;/span&gt;
&lt;span class="n"&gt;UTTERANCES_FILTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;UTTERANCES_THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"github-light"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order of appearance in the above code block, the comments will appear as issues in
the GitHub repository &lt;code&gt;jackdewinter/jackdewinter.github.io&lt;/code&gt; tagged with the label
&lt;code&gt;Comments&lt;/code&gt;.  At the bottom of each article, the &lt;code&gt;Comments&lt;/code&gt; section is not be filtered
out by default, shown to the reader using the &lt;code&gt;github-light&lt;/code&gt; theme.&lt;/p&gt;
&lt;p&gt;With these configuration settings in place, a quick publishing and hosting of the website
showed that comments were now enabled for articles!&lt;/p&gt;
&lt;h3 id="testing-utterances"&gt;Testing Utterances&lt;a class="headerlink" href="#testing-utterances" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the configuration in place, I performed a couple of quick tests of the newly
installed comment system.  Picking an article at random, I scrolled down to the bottom
where a &lt;code&gt;Comments&lt;/code&gt; section awaited me.  Signing in through GitHub, I was then able to
leave a comment that was persisted after a couple of page refreshes.&lt;/p&gt;
&lt;p&gt;Opening a new tab in the same browser, I navigated over to my &lt;code&gt;jackdewinter.github.io&lt;/code&gt;
repository and clicked on the &lt;code&gt;Issues&lt;/code&gt; button to open the Issues page for the repository.
There under the Issues section was the URL of article that I selected with a &lt;code&gt;Comments&lt;/code&gt;
label on it.  Opening up the issue, I was greeted with the test comments that I had
entered previously.&lt;/p&gt;
&lt;h3 id="tuning-utterances"&gt;Tuning Utterances&lt;a class="headerlink" href="#tuning-utterances" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After reading the other articles in that section of the Elegant documentation, two other
articles leapt out as being useful.  During testing, I had noticed that there weren’t any
text or images that separated the article from the comments, and I wanted to change that.
The article on
&lt;a href="https://next.elegant.oncrashreboot.com/invite-visitors-comment"&gt;Comments - Invite Visitors To Comment&lt;/a&gt;
provided a nice way to do this, so I followed their suggestions and made the following
change to the configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;COMMENTS_INTRO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"So what do you think? Did I miss something? Is any part unclear? Leave your comments below."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another thing that I noticed during testing was that the comments were filed under an
issue with the URL of the article.  I want to be able to make small changes to the
article title if need be, therefore basing the issue on the article’s URL is less than
optimal.  Luckily, the authors of Elegant thought about this problems and have an
article on
&lt;a href="https://next.elegant.oncrashreboot.com/comments-thread-id"&gt;Comments - Thread Id&lt;/a&gt;
that deals with it.&lt;/p&gt;
&lt;p&gt;Without any changes, each issue will be attributed to the URL of the article.  In the
case of this article, that URL ends with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/2019/10/01/fine-tuning-pelican-connecting-with-readers/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By adding the following line to this article’s metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;comment_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fine-tuning-pelican--connecting-with-readers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the issue that is created for the article is instead &lt;code&gt;fine-tuning-pelican--connecting-with-readers&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the start of this article, I stressed that a big part about a successful website is
the ability to engage readers and maintain their attention.  The first tool is to use
the social media section of the sidebar that is available with Elegant.  The second tool
is to have an active comment system for each article that is easy to use.  With two small
fine-tunings to the Elegant configuration, both of these tools were configured for the
website, and working great!&lt;/p&gt;
&lt;p&gt;While this was one of the aspects of running a website that I was worried about, having
great documentation from Elegant (
&lt;a href="https://next.elegant.oncrashreboot.com/invite-visitors-comment"&gt;Comments - Invite Visitors To Comment&lt;/a&gt;
)
and
&lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt; made this a snap to setup.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="pelican connect readers"></category><category term="pelican comments"></category><category term="utterances"></category></entry><entry><title>Fine Tuning Pelican: Producing RSS Feeds</title><link href="https://jackdewinter.github.io/2019/10/23/fine-tuning-pelican-producing-rss-feeds/" rel="alternate"></link><published>2019-10-23T00:00:00-07:00</published><updated>2019-10-23T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-23:/2019/10/23/fine-tuning-pelican-producing-rss-feeds/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it may seem counter-intuitive, the mostly text
&lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS Feeds&lt;/a&gt; have experienced a comeback in the last
5-10 years.  Due in large part to a wave of automation, these feeds are mostly set up
for computers to read and process new and existing articles, rather than human readers.
As such, I felt it was important to provide RSS feeds for my website.  This article
describes how to set up RSS feeds for a Pelican website.&lt;/p&gt;
&lt;h2 id="strictly-speaking"&gt;Strictly Speaking…&lt;a class="headerlink" href="#strictly-speaking" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For any purists reading this, note that the output that Pelican provides is actually in
the Atom format not pure RSS.  This is not a major issue as most RSS readers will accept
RSS format or Atom format for their readers.  A good article on the differences between
the two is
&lt;a href="http://www.differencebetween.info/difference-between-rss-and-atom"&gt;presented here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="only-generate-feeds-when-publishing"&gt;Only Generate Feeds When Publishing&lt;a class="headerlink" href="#only-generate-feeds-when-publishing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the normal course of writing content, I will often do a simple publish against the
&lt;code&gt;pelicanconf.py&lt;/code&gt; configuration to see how that content looks when rendered.  In my
&lt;code&gt;pelicanconf.py&lt;/code&gt; configuration, the following lines are present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless you are actively debugging something to do with RSS feeds, there is no need to
generate these feeds during development.  From a look and feel point of view, each RSS
feed contains the same text as the normally viewed article, with all of the theme
styling and extras removed.  As such, there is usually no benefit to generating the RSS
feed until the final publish step.  That is why the &lt;code&gt;publishconf.py&lt;/code&gt; configuration
includes configuration to override the &lt;code&gt;pelicanconf.py&lt;/code&gt; which enables RSS feed
generation.&lt;/p&gt;
&lt;h2 id="generating-the-right-types-of-rss-feeds"&gt;Generating the Right Types of RSS Feeds&lt;a class="headerlink" href="#generating-the-right-types-of-rss-feeds" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To provide the right types of RSS feeds for my website, I provided the following
configuration in the &lt;code&gt;publishconf.py&lt;/code&gt; files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Feed Items&lt;/span&gt;
&lt;span class="n"&gt;FEED_MAX_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'feeds/all.atom.xml'&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'feeds/{slug}.atom.xml'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line of configuration specifies that none of the feeds should not contain more
than 15 items.  Without this setting, a website with 200 articles would have all 200 of
those articles included in the feed each time the feed was generated.  In addition, when
each feed was downloaded, it would download all 200 articles. For me, this setting
presents a good balance between presenting a decent amount of content and sending too
much data.  It is very unlikely that I will publish more than 15 articles at a time, so
it just seems right.&lt;/p&gt;
&lt;p&gt;The next two lines of configuration enable the “all” feed and the “category” feeds.
The &lt;code&gt;FEED_ALL_ATOM&lt;/code&gt; configuration enables the &lt;code&gt;all.atom.xml&lt;/code&gt; feed to be established at
the location &lt;code&gt;feeds/all.atom.xml&lt;/code&gt;.  This feed contains every article is published, in
reverse order of publication.  The &lt;code&gt;CATEGORY_FEED_ATOM&lt;/code&gt; configuration enables the
individual category feeds, one for each category that exists.  Each on of those feeds is
located at &lt;code&gt;feeds/{slug}.atom.xml&lt;/code&gt; where &lt;code&gt;{slug}&lt;/code&gt; is the category for which the feed is
being generated.&lt;/p&gt;
&lt;p&gt;Based on the above configuration &lt;code&gt;publishconf.py&lt;/code&gt;, when this article was written, the
feeds produced were:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/feeds/all.atom.xml
/feeds/github.atom.xml
/feeds/markdown.atom.xml
/feeds/quality.atom.xml
/feeds/technology.atom.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started with a quick description of why an older protocol such as RSS and Atom are
still good things to have in today’s website world.  I then covered why to not generate
RSS feeds until publish time, followed by how to setup and configure the RSS feeds when
it was publish time.  This effort allowed me to add RSS feeds to my website in a pretty
painless manner, and should allow a reader to perform that same task.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="pelican rss feeds"></category></entry><entry><title>Fine Tuning Pelican: Custom Error Pages</title><link href="https://jackdewinter.github.io/2019/10/20/fine-tuning-pelican-custom-error-pages/" rel="alternate"></link><published>2019-10-20T00:00:00-07:00</published><updated>2019-10-20T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-20:/2019/10/20/fine-tuning-pelican-custom-error-pages/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a webpage is requested that does not exist, it is common for websites to react to
the request by displaying a custom error page.  While Pelican does not natively ship
with this feature, Elegant adds a themed page that does.  This article details the
changes needed to mark Elegant’s custom error page is properly used as “the” error page.&lt;/p&gt;
&lt;h2 id="configuring-elegant-and-github-pages"&gt;Configuring Elegant and GitHub Pages&lt;a class="headerlink" href="#configuring-elegant-and-github-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the instructions from the
&lt;a href="https://elegant.oncrashreboot.com/custom-404-page"&gt;Elegant Documentation&lt;/a&gt;,
Elegant can be instructed to generate a properly themed 404 page by adding the &lt;code&gt;404&lt;/code&gt;
string to the &lt;code&gt;DIRECT_TEMPLATES&lt;/code&gt; variable in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file.  After following
those instructions, the next time the website is generated, a &lt;code&gt;404.html&lt;/code&gt; file will be
generated in the base directory.  This file will have all of the trappings of the
Elegant theme, and it will display an error page that includes a box to search for what
the reader was looking for.&lt;/p&gt;
&lt;p&gt;The website hosting service that is being used will dictate if there are any extra steps
needed to enable the custom 404 page.  For GitHub Pages, as long as the file is named
&lt;code&gt;404.html&lt;/code&gt; and is in the root directory that is being hosted, GitHub will automatically
pick it up and use it as the 404 error page.  Note that it seems like the file must
exist on the &lt;code&gt;master&lt;/code&gt; branch of the GitHub Pages directory in order for that action to
take effect.&lt;/p&gt;
&lt;h2 id="using-other-themes"&gt;Using Other Themes&lt;a class="headerlink" href="#using-other-themes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are using a theme other than Elegant, you can replicate some of the behavior that
Elegant provides out of the box.  In particular, you can define a page called
&lt;code&gt;markdown.md&lt;/code&gt; somewhere in your contents, and add the following text to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Custom&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;
&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="c1"&gt;---&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key to this being used as an error page is the &lt;code&gt;permalink: /404.html&lt;/code&gt; part of the
markdown header.  This informs Pelican to always publish the page with output file of
&lt;code&gt;/404.html&lt;/code&gt;, placing it in the root directory where it will be picked up properly by
many site publishers, such as GitHub Pages.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this article, I provided some quick information on how to set up a custom 404 page
using Elegant, and noted how it will be picked up by GitHub Pages.  I also provided some
basic information on how to set up a custom page for themes other then Elegant.  By
using this approach, I was able to have a custom error page that had the theme of my
website, allowing the reader to recover in case of a bad URL.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="custom error page"></category><category term="github pages"></category></entry><entry><title>Fine Tuning Pelican: Markdown Configuration</title><link href="https://jackdewinter.github.io/2019/10/16/fine-tuning-pelican-markdown-configuration/" rel="alternate"></link><published>2019-10-16T00:00:00-07:00</published><updated>2019-10-16T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-16:/2019/10/16/fine-tuning-pelican-markdown-configuration/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When choosing authoring tools for a website, a primary concern is that the tools are
either already used by the authors or easy enough to learn by the authors that it does
not allow them to write freely.  For me, I regularly author documentation in Markdown
using Visual Studio Code for my professional job, so using the same tools for my website
was an easy choice. However, unlike the documents I write at work, the Pelican generator
utilizes the &lt;a href="https://python-markdown.github.io/"&gt;Python-Markdown generator library&lt;/a&gt;
which has a few more options than standard Markdown.  This article details the Markdown
configuration that I have enabled for my website, and why I have enabled the specified
configuration.&lt;/p&gt;
&lt;h2 id="markdown-configuration"&gt;Markdown Configuration&lt;a class="headerlink" href="#markdown-configuration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following configuration is the Markdown configuration for my website:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'extension_configs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.extra'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.admonition'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.codehilite'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'css_class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'highlight'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.meta'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'smarty'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'smart_angled_quotes'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.toc'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'permalink'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="markdownextensionsmeta"&gt;markdown.extensions.meta&lt;a class="headerlink" href="#markdownextensionsmeta" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This configuration is perhaps the most important extension that I use.  This setting
enables the
&lt;a href="https://python-markdown.github.io/extensions/meta_data/"&gt;Python-Markdown - Metadata&lt;/a&gt;
feature which enables the processing of the header of Markdown files with metadata about
the Markdown that is being authored.  While the Python-Markdown processor does not use
this metadata itself, the metadata is passed to Pelican and Elegant to allow for
configuration of the articles and pages on a one-by-one basis.&lt;/p&gt;
&lt;p&gt;This choice is actually a requirement for Pelican to work, being provided as one of the
defaults for the &lt;code&gt;MARKDOWN&lt;/code&gt; configuration element,
&lt;a href="http://docs.getpelican.com/en/stable/settings.html#basic-settings"&gt;as documented here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="markdownextensionsextra"&gt;markdown.extensions.extra&lt;a class="headerlink" href="#markdownextensionsextra" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This configuration enables the
&lt;a href="https://python-markdown.github.io/extensions/extra/"&gt;Python-Markdown - Extra&lt;/a&gt;
features which includes support for: abbreviations, attribute lists, definition lists,
fenced code blocks, footnotes, and tables.&lt;/p&gt;
&lt;p&gt;This choice is actually a requirement for Pelican to work, being provided as one of the
defaults for the &lt;code&gt;MARKDOWN&lt;/code&gt; configuration element,
&lt;a href="http://docs.getpelican.com/en/stable/settings.html#basic-settings"&gt;as documented here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="markdownextensionscodehilite"&gt;markdown.extensions.codehilite&lt;a class="headerlink" href="#markdownextensionscodehilite" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This configuration enables the
&lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;Python-Markdown - Code Hilites&lt;/a&gt;
feature to provide for special displaying of marked text within given areas of the
document.  These sections or specially marked text are typically used to display text
that represents code for programs or scripts, with more stringent rules on how to
display the text.&lt;/p&gt;
&lt;p&gt;If no specific text format is specified with the text block, such as many of the
code blocks in the article on
&lt;a href="https://jackdewinter.github.io/2019/09/01/static-websites-posting-my-first-article/#step-1-verify-our-basic-web-site"&gt;Static Websites: Posting My First Article&lt;/a&gt;.
If a text format is specified, this feature will try it’s best to match it to known
highlighters, using color to indicate different parts of the specified text format.
This can be seen in a later section of the above article where a code block is used for a
&lt;a href="https://jackdewinter.github.io/2019/09/01/static-websites-posting-my-first-article/#step-2-the-first-article"&gt;sample Markdown article&lt;/a&gt;
and later in the series where
&lt;a href="https://jackdewinter.github.io/2019/09/08/static-websites-getting-ready-for-publishing-themes-and-minutiae/#task-2-file-types-and-file-paths"&gt;Python configuration&lt;/a&gt;
is referenced.  In both of these examples, the highlighting done to the text is able to
be changed according to the type of text being highlighted.&lt;/p&gt;
&lt;p&gt;This choice is actually a requirement for Pelican to work, being provided as one of the
defaults for the &lt;code&gt;MARKDOWN&lt;/code&gt; configuration element,
&lt;a href="http://docs.getpelican.com/en/stable/settings.html#basic-settings"&gt;as documented here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="markdownextensionstoc"&gt;markdown.extensions.toc&lt;a class="headerlink" href="#markdownextensionstoc" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This configuration is present as part of the setup for
&lt;a href="https://jackdewinter.github.io/2019/10/13/fine-tuning-pelican-pelican-plugins/#navigable"&gt;Elegant’s Table Of Contents&lt;/a&gt; support. This
specific value instructs the
&lt;a href="https://python-markdown.github.io/extensions/toc/"&gt;Python-Markdown - Table of Contents&lt;/a&gt;
feature to generate permanent links at the end of each header.  These links provide the
destination URLs that Elegant’s Table of Content support use to go directly to a given
item in the Table of Contents.&lt;/p&gt;
&lt;p&gt;I subscribe to Elegant’s philosophy on providing a clean reading experience with minimal
distractions.  By moving the table of contents to the left sidebar and out of the
article, I believe the reader can focus more on the article.&lt;/p&gt;
&lt;h3 id="markdownextensionsadmonition"&gt;markdown.extensions.admonition&lt;a class="headerlink" href="#markdownextensionsadmonition" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This configuration enables the
&lt;a href="https://python-markdown.github.io/extensions/admonition/"&gt;Python-Markdown - Admonition&lt;/a&gt;
feature to provide a highlighted box around the indicated text content.  These
highlighted boxes are themed by Elegant to provide for a good, quick communication of
important information to the reader without being too disruptive. An example of
admonitions is available in this article on
&lt;a href="https://jackdewinter.github.io/2019/07/28/glanceable-displays-fine-tuning-a-raspberry-pi-installation/#requirements"&gt;Glanceable Displays&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I find that using admonitions in articles allows me to include more useful and
descriptive information to the reader.  The options of sections of tests in various
parentheses and braces, or placing the text in footnotes, doesn’t feel right to me,
while admonitions, with their colored call outs do.  This is a personal preference.&lt;/p&gt;
&lt;h3 id="smarty"&gt;smarty&lt;a class="headerlink" href="#smarty" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This configuration enables the
&lt;a href="https://python-markdown.github.io/extensions/smarty/"&gt;Python-Markdown - SmartyPants&lt;/a&gt;
feature to provide for more clear representation of various characters and character
sequences used in articles and pages.&lt;/p&gt;
&lt;p&gt;With this feature enabled, the following substitutions are made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the apostrophe character (&lt;code&gt;'&lt;/code&gt;) is translated into a left and right single quotes around the words or phrases they surround:  ‘this is my phrase’&lt;/li&gt;
&lt;li&gt;the quotation character (&lt;code&gt;'&lt;/code&gt;) is translated into a left and right double quotes around the words or phrases they surround:  “this is my phrase”&lt;/li&gt;
&lt;li&gt;double greater than signs (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) and less than signs (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;) are translated into angled quotes: « and »&lt;/li&gt;
&lt;li&gt;three period characters in a row (&lt;code&gt;...&lt;/code&gt;) are translated into ellipses: and so they said…&lt;/li&gt;
&lt;li&gt;two consecutive dashes (&lt;code&gt;--&lt;/code&gt;) and three consecutive dashes (&lt;code&gt;---&lt;/code&gt;) are turned into lengthened dash characters: – and —&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I am not 100% sold on this one, I like the effects it has, even though they are
small.  It just seems to add a bit of a finished touch to the articles.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article was created to share the Markdown configuration that I use for my website
For each feature that I use I specify what benefit it provides to the articles, along
with the reasons that have for using that Markdown feature.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="pelican markdown configuration"></category></entry><entry><title>Fine Tuning Pelican: Pelican Plugins</title><link href="https://jackdewinter.github.io/2019/10/13/fine-tuning-pelican-pelican-plugins/" rel="alternate"></link><published>2019-10-13T00:00:00-07:00</published><updated>2019-10-13T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-13:/2019/10/13/fine-tuning-pelican-pelican-plugins/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In setting up the website to reflect my decisions on how things should be displayed,
I surveyed a number of plugins to use.  Some of these plugins were chosen as they are
supported by the Elegant theme, and some by Pelican itself.  This article details the
list of the plugins that I use on my own website and why I decided to use them.&lt;/p&gt;
&lt;h2 id="plugins-i-use"&gt;Plugins I Use&lt;a class="headerlink" href="#plugins-i-use" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican plugins help shape the look and feel of a website, but they can also get in the
way of the content creation.  For me, it is important to experiment with plugins to
determine whether or not the plugin and the services it presents enhances either the
content creation or content display in a manner that I will find positive for my website.
If it doesn’t meet that metric with an acceptable cost for meeting that metric, then the
plugin gets discarded quickly.&lt;/p&gt;
&lt;p&gt;For the initial setup of my website, I just went for the standard plugins that work well
with Elegant, keeping it simple for now.&lt;/p&gt;
&lt;h3 id="search"&gt;Search&lt;a class="headerlink" href="#search" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;tipue_search&lt;/code&gt; plugin provides for a simple yet effect method to catalog the text
on the website and to provide for manner in which to search that catalog.  Elegant
exposes this capability using a search box in the top right corner of each webpage.
Instructions on how to configure this plugin are
&lt;a href="https://elegant.oncrashreboot.com/add-tipue-search"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Simply, a website without search would look vary basic, and I wanted to show a finished
product.  For me, Elegant makes it look nice, while being easy to use.&lt;/p&gt;
&lt;h3 id="navigable-table-of-contents"&gt;Navigable Table Of Contents&lt;a class="headerlink" href="#navigable-table-of-contents" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Between the &lt;code&gt;extract_toc&lt;/code&gt; plugin and some Markdown configuration, Pelican can take a
single Markdown tag and generate an accurate table of contents for the article in it’s
place.  Elegant can then take that information out of the main body of the article and
display it on the left sidebar in a manner that does not disrupt the reading of the
article.
Instructions on how to configure this plugin are
&lt;a href="https://elegant.oncrashreboot.com/how-elegant-displays-table-of-contents"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I subscribe to Elegant’s philosophy on providing a clean reading experience with minimal
distractions.  By moving the table of contents to the left sidebar and out of the
article, I believe the reader can focus more on the article.&lt;/p&gt;
&lt;h3 id="series-indicators"&gt;Series Indicators&lt;a class="headerlink" href="#series-indicators" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;series&lt;/code&gt; plugin provides extra information to Pelican’s template engine, to allow
themes to show that an article is part of a series.  Elegant takes that information and
displays the title of the series on the right sidebar, followed by an ordered list of
links to each article in the series.  Instructions on how to configure this plugin are
&lt;a href="https://elegant.oncrashreboot.com/how-to-use-multi-part-plugin"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a similar vein to how I feel about Elegant displaying the table of contents, having
a series navigation on the right sidebar allows for a ready to have a clean reading
experience while allowing the reader the freedom to navigate within a series of articles.&lt;/p&gt;
&lt;h3 id="previous-and-next-article-links"&gt;Previous And Next Article Links&lt;a class="headerlink" href="#previous-and-next-article-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;neighbors&lt;/code&gt; plugin provides the necessary information to determine the neighbors of
the current article, with respect to the time it was written.  Elegant displays this
information as the links are the bottom of the article, to assist in navigation.
Instructions on how to configure this plugin are
&lt;a href="https://elegant.oncrashreboot.com/how-to-show-previous-and-next-article"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quite simply, having the previous and next article links allow a reader to navigate
backward or forward through articles, without getting in the way of normal reading of
the article.&lt;/p&gt;
&lt;h3 id="sharing-article-links"&gt;Sharing Article Links&lt;a class="headerlink" href="#sharing-article-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;share_post&lt;/code&gt; plugin provides information that Elegant than uses to display simple
text links at the end of articles.  These links allow the reader to share this on their
Twitter accounts, through Facebook, or via there email accounts.  The main benefit of
these links are that they allow the reader to share these posts, hopefully attracting
more readers to the website without being tracked.  Many of the other “share”
buttons on other blogs are implement tracking on each link from one website to another,
a practice that doesn’t sit well with every reader. Instructions on how to configure
this plugin are
&lt;a href="https://elegant.oncrashreboot.com/how-to-use-social-sharing-plugin"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The benefit here is easy for me to quantify.  If it is simple and safe to share articles
with their friends, they will naturally share the articles. If readers share articles,
I will get more readers.&lt;/p&gt;
&lt;h3 id="improved-asset-downloads"&gt;Improved Asset Downloads&lt;a class="headerlink" href="#improved-asset-downloads" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;assets&lt;/code&gt; plugin provides for a way for Pelican to take supporting files for the
website, such as CSS files and Javascript files, and combine them into a smaller number
of files.  By performing this ‘minification’, the number of downloads for each page
or article is reduced, and therefore the pages and articles load time is smaller.
Instructions on
how to configure this plugin are
&lt;a href="https://elegant.oncrashreboot.com/avoid-unnecessary-http-requests"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The benefit here is also easy for me to quantify.  From a reader’s point of view, I don’t
want a page taking forever to download… the quicker the better.  From a provider’s
point of view, fewer requests containing fewer bytes means less load on the
infrastructure.&lt;/p&gt;
&lt;h3 id="reading-time-estimate"&gt;Reading Time Estimate&lt;a class="headerlink" href="#reading-time-estimate" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;post_stats&lt;/code&gt; plugin calculates an estimate of the time required to read the article.
Elegant displays this estimate at the top of the right sidebar.  Instructions on how to
configure this plugin are
&lt;a href="https://elegant.oncrashreboot.com/add-reading-time-estimate"&gt;located here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The benefit of this plugin is harder for me to justify, but it falls into my concept of
look-and-feel.  This plugin provides a good estimate as to how long a reader can expect
to take in reading the article, and hence budget enough time for them to read the article
without feeling hurried.&lt;/p&gt;
&lt;h3 id="sitemap"&gt;SiteMap&lt;a class="headerlink" href="#sitemap" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the &lt;code&gt;sitemap&lt;/code&gt; plugin requires a significant amount of configuration, it is detailed
along with the configuration for the &lt;code&gt;robots.txt&lt;/code&gt; file in the article on
&lt;a href="https://jackdewinter.github.io/2019/10/30/fine-tuning-pelican-enabling-website-crawling/#publishing-the-sitemap"&gt;Fine Tuning Pelican: Enabling Website Crawling&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article walked through the plugins that I currently use for my website, what they
are for, and how to install them.  To add extra context to each plugin, I also detailed
some of the reasons why I selected to use a given plugin, with it’s benefits to me.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="pelican plugins"></category></entry><entry><title>Fine Tuning Pelican: Copyright and Creative Commons Notice</title><link href="https://jackdewinter.github.io/2019/10/09/fine-tuning-pelican-copyright-and-creative-commons-notice/" rel="alternate"></link><published>2019-10-09T00:00:00-07:00</published><updated>2019-10-09T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-09:/2019/10/09/fine-tuning-pelican-copyright-and-creative-commons-notice/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For anything that you publish, you want to make sure that you clearly state your rights
as the author of the publication.  In addition, if you want people to use that
information in various ways, you want to make sure that you clearly state how they can
use that information for their benefit.  This article outlines the steps needed to ensure
that the website’s copyright and any licensing is prominently displayed.&lt;/p&gt;
&lt;h2 id="clearly-stating-the-copyright-and-licensing"&gt;Clearly Stating The Copyright and Licensing&lt;a class="headerlink" href="#clearly-stating-the-copyright-and-licensing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For copyright and licensing to be effective, you need it to be clearly stated in a place
that is visible.  One of the reasons I chose the Elegant theme is that it had a solid
place for this at the bottom of the page.&lt;/p&gt;
&lt;p&gt;To add the necessary information for Elegant to display the copyright and licensing,
add the following to the &lt;code&gt;pelicancpnf.py&lt;/code&gt; file, with your own name instead of mine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Legal&lt;/span&gt;
&lt;span class="n"&gt;SITE_LICENSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;amp;copy; Copyright 2019 by Jack De Winter and licensed under a &amp;lt;a rel="license"&lt;/span&gt;
&lt;span class="s2"&gt;  href="http://creativecommons.org/licenses/by/4.0/"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  Creative Commons Attribution 4.0 International License&amp;lt;/a&amp;gt;.&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configuration accomplished three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clearly states that the copyright for any information presented in the article, except where I denote that I am referencing someone else’s work, is mine.&lt;/li&gt;
&lt;li&gt;Clearly states the license under which any information presented can be used, using both the Creative Commons icon and text.&lt;/li&gt;
&lt;li&gt;Provides a link to the Creative Commons page that clearly states what the licensing agreement is.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="selecting-the-right-licensing"&gt;Selecting the Right Licensing&lt;a class="headerlink" href="#selecting-the-right-licensing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there are various licenses out there, the Creative Commons licenses have the right
balance for me between maintaining my ownership of my content and allowing others to use
the information cleanly.  The
&lt;a href="https://creativecommons.org/licenses/"&gt;Creative Commons Licenses Page&lt;/a&gt; gives a good
breakdown of what the particulars of each of their licenses allows and does not allow,
with easy to use pictures to allow for quick dissemination of the information.&lt;/p&gt;
&lt;p&gt;While there are other licenses, such as the
&lt;a href="https://en.wikipedia.org/wiki/MIT_License"&gt;MIT License&lt;/a&gt;, the
&lt;a href="https://en.wikipedia.org/wiki/GNU_General_Public_License"&gt;GNU General License&lt;/a&gt;, and
&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses"&gt;others&lt;/a&gt;,
for me the Creative Commons licenses are very dry and clean cut on what you can and
cannot do.  As I want people to use the information I am placing on my site, keeping the
license simple and clean is one of my priorities.&lt;/p&gt;
&lt;p&gt;As one of my goals is to help people, educate people, and inspire people, the most
simplistic license that allows people to use the information on the website while
protecting my copyright was the best solution.  Based on those justifications, the CC-BY
license was the right choice for me.  This version allows for the sharing and adapting of
the information on the website as long as any use of the information is given proper
credit, or attribution.  Basically, feel free to use it, but give credit where it is due.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this article, I outlined a discussion of why you want to make sure that you have
copyright and licensing information on your website.  I then provided a simple way of
adding the copyright and licensing information to each page of a Pelican website themed
with Elegant.  Finally, I had a quick discussion on what you should think about when
deciding on the licensing on your website, and why I chose the CC-BY license for my
website.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="copyright and license"></category></entry><entry><title>Fine Tuning Pelican: Publishing, Drafts, and Document Status Defaults</title><link href="https://jackdewinter.github.io/2019/10/06/fine-tuning-pelican-publishing-drafts-and-document-status-defaults/" rel="alternate"></link><published>2019-10-06T00:00:00-07:00</published><updated>2019-10-06T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-10-06:/2019/10/06/fine-tuning-pelican-publishing-drafts-and-document-status-defaults/</id><summary type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="preface"&gt;Preface&lt;a class="headerlink" href="#preface" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the articles in a series about how I fine tuned my Pelican+Elegant web
site to make it “more mine”.  For other articles in the series, click on the title of
the article under the heading “Fine Tuning Pelican” on the right side of the webpage.&lt;/p&gt;
&lt;p&gt;Unlike my series on &lt;a href="https://jackdewinter.github.io/2019/08/18/static-websites-choosing-a-static-web-site-generator/"&gt;Choosing and Setting Up Pelican&lt;/a&gt;,
these articles are intended to be byte sized, addressing specific fine tunings I made to
my own website. As such, the first article in this series contains a
&lt;a href="https://jackdewinter.github.io/2019/09/29/fine-tuning-pelican-setting-up-the-landing-page/#disclaimer"&gt;Disclaimer section&lt;/a&gt; with generic information
for each of the articles in the series.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When creating content for the website, it is often desired to group articles together
that are in various stages of readiness for publication.  Prior to publication, many
content authors want to see how their content will actually look by preparing a draft of
the content that only they can see.   This article discusses settings that address both of
those concerns.&lt;/p&gt;
&lt;h2 id="what-does-the-document-status-do"&gt;What Does the Document Status do?&lt;a class="headerlink" href="#what-does-the-document-status-do" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of the standard Pelican feature set, an article or page may have a status of
&lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;draft&lt;/code&gt; or &lt;code&gt;published&lt;/code&gt;.  If the status is &lt;code&gt;hidden&lt;/code&gt;, then it is ignored by
Pelican, and no further action is taken.  If the status is &lt;code&gt;draft&lt;/code&gt;, then it is published
under the &lt;code&gt;drafts&lt;/code&gt; directory and not registered with any of the navigation maps.
Finally, if the status is &lt;code&gt;published&lt;/code&gt;, then it is published using the standard Pelican
article and page mapping, and it is registered with the standard navigation maps.
While there isn’t much information on the &lt;code&gt;status&lt;/code&gt; metadata tag, it is included in the
main pelican documentation on
&lt;a href="https://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;File Metadata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Without any relevant &lt;code&gt;DEFAULT_METADATA&lt;/code&gt; settings being changed (more on that in a
minute), the default value for &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;published&lt;/code&gt;.  As such, as long as the article
is in the right place to be picked up, it will be published as part of the website. If
a draft version of the article is desired, then the &lt;code&gt;status&lt;/code&gt; metadata must be set to
&lt;code&gt;draft&lt;/code&gt; as shown in this example markdown article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;draft&lt;/span&gt;
&lt;span class="c1"&gt;---&lt;/span&gt;

&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the normal publishing process, the rendered version of this file will be placed
in the website’s &lt;code&gt;/drafts&lt;/code&gt; directory, most likely with a name such as
&lt;code&gt;some-markdown-article.html&lt;/code&gt;.  While it is obvious that the page was created by looking
at the output from the publishing of the website, this page will not appear on any
summaries or searches on the website.  This can all be changed by changing the &lt;code&gt;status&lt;/code&gt;
metadata to &lt;code&gt;publish&lt;/code&gt; and re-publishing the website.&lt;/p&gt;
&lt;h2 id="setting-a-document-status-default"&gt;Setting a Document Status Default&lt;a class="headerlink" href="#setting-a-document-status-default" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This information is largely taken from Pelican’s
&lt;a href="https://docs.getpelican.com/en/stable/content.html#publishing-drafts"&gt;Publishing Drafts&lt;/a&gt;
section.  As is mentioned in that section, to change the metadata default for articles
and pages from having a default &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;published&lt;/code&gt; to a default of &lt;code&gt;draft&lt;/code&gt;, the
following text much appear in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'draft'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the Publishing Drafts article does mention that to publish articles and pages, their
metadata must now include a &lt;code&gt;Status: published&lt;/code&gt; metadata line, I feel it does not stress
this enough.  When writing articles from that point forward, it may be easy to remember to
add that metadata tag to each article.  However, to ensure that any previously published
page or article is still published, each previous article and page must be revisited and
that metadata line must be added to those article’s metadata section.&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When authoring content, it is often desired to group articles in a series together, often
in different states of readiness.  This article started by looking at the document status
and how it works for Pelican, and then moving on to how to set a new default for a
Pelican-based website.  Finally, a note was added to Pelican’s own documentation on
document status to help any readers avoid “losing” any published articles if the default
document status is changed.&lt;/p&gt;</content><category term="Website"></category><category term="pelican website generator"></category><category term="pelican fine tuning"></category><category term="python"></category><category term="pelican document status"></category></entry></feed>