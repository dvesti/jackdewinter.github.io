<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Web Site - GitHub</title><link href="https://jackdewinter.github.io/" rel="alternate"></link><link href="https://jackdewinter.github.io/feeds/github.atom.xml" rel="self"></link><id>https://jackdewinter.github.io/</id><updated>2019-07-24T00:00:00-07:00</updated><entry><title>Starting With GitHub: Setting Up Credentials</title><link href="https://jackdewinter.github.io/2019/07/24/starting-with-github-setting-up-credentials/" rel="alternate"></link><published>2019-07-24T00:00:00-07:00</published><updated>2019-07-24T00:00:00-07:00</updated><author><name>Jack De Winter</name></author><id>tag:jackdewinter.github.io,2019-07-24:/2019/07/24/starting-with-github-setting-up-credentials/</id><summary type="html">&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In setting up this website, I needed to make sure I had Git&lt;sup id="fnref:Git"&gt;&lt;a class="footnote-ref" href="#fn:Git"&gt;1&lt;/a&gt;&lt;/sup&gt; and more specifically
GitHub &lt;sup id="fnref:GitHub"&gt;&lt;a class="footnote-ref" href="#fn:GitHub"&gt;2&lt;/a&gt;&lt;/sup&gt; setup to use GitHub&amp;rsquo;s GitHub Pages&lt;sup id="fnref:GitHubPages"&gt;&lt;a class="footnote-ref" href="#fn:GitHubPages"&gt;3&lt;/a&gt;&lt;/sup&gt; feature.  My source
control tool of choice was already Git, so it made sense to make my website platform of
choice GitHub â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In setting up this website, I needed to make sure I had Git&lt;sup id="fnref:Git"&gt;&lt;a class="footnote-ref" href="#fn:Git"&gt;1&lt;/a&gt;&lt;/sup&gt; and more specifically
GitHub &lt;sup id="fnref:GitHub"&gt;&lt;a class="footnote-ref" href="#fn:GitHub"&gt;2&lt;/a&gt;&lt;/sup&gt; setup to use GitHub&amp;rsquo;s GitHub Pages&lt;sup id="fnref:GitHubPages"&gt;&lt;a class="footnote-ref" href="#fn:GitHubPages"&gt;3&lt;/a&gt;&lt;/sup&gt; feature.  My source
control tool of choice was already Git, so it made sense to make my website platform of
choice GitHub Pages&lt;sup id="fnref2:GitHubPages"&gt;&lt;a class="footnote-ref" href="#fn:GitHubPages"&gt;3&lt;/a&gt;&lt;/sup&gt;.  I made this choice to ensure that I can write articles
with no changes to my normal workflows.  It is a high priority for me to make sure that any
Git access is secure and follows best common practices on security, so adding secure
access to GitHub was a pretty easy decision.&lt;/p&gt;
&lt;p&gt;This article details the actions and choices I made setting up my access to GitHub for my
blog.  It details how I followed the GitHub Pages&lt;sup id="fnref3:GitHubPages"&gt;&lt;a class="footnote-ref" href="#fn:GitHubPages"&gt;3&lt;/a&gt;&lt;/sup&gt; instructions for create a
personal website, creating a personal repository on GitHub to host the pages.  Then it
describes the two modes of accessing GitHub, SSH and HTTPS, and why I chose SSH.  Finally, it
provides detailed notes on how I generated a SSH keypair specifically for GitHub, and
configured both my local Git and the remote GitHub to use them.&lt;/p&gt;
&lt;h2 id="getting-started-with-github"&gt;Getting Started With GitHub&lt;a class="headerlink" href="#getting-started-with-github" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many good articles out there on how to install Git for different operating systems,
so I won&amp;rsquo;t repeat that information here.  Setting up access to GitHub is also easy as the
folks at GitHub have provided excellent instructions.  Simply go to the
&lt;a href="https://github.com/"&gt;GitHub Home Page&lt;/a&gt; and it will either allow you to login if you
have an account, or create a new account if you don&amp;rsquo;t.  As I had already dealt with a couple
of open source projects, I already have an account &lt;code&gt;jackdewinter&lt;/code&gt;, so I logged in without any
issues.&lt;/p&gt;
&lt;p&gt;After I logged in, the browser deposited me on my home page.  From there I was able to see
any projects that I had either contributed to or filed an issue against.  Just starting in my
Open Source journey, the contents were only a couple of projects that I had filed issues with.
Prior to this point, there was no need to authenticate my Git client with GitHub as I was just
downloading from public repositories.  I figured out quickly that setting up my own website
would require my own repositories, so I determined that authentication would also be required.&lt;/p&gt;
&lt;h2 id="creating-my-first-github-repository"&gt;Creating My First GitHub Repository&lt;a class="headerlink" href="#creating-my-first-github-repository" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://pages.github.com/"&gt;GitHub Pages home page&lt;/a&gt; has a really simple formula on their
web page for setting up personal web pages.  Step 1 was pretty easy: I made sure that
that the name of the repository was my GitHub user id (in my case &lt;code&gt;jackdewinter&lt;/code&gt;) followed by
&lt;code&gt;.github.io&lt;/code&gt;.  When the creation of my repository finished, GitHub deposited my browser
at the base of my new repository: &lt;code&gt;jackdewinter/jackdewinter.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The remaining steps in the formula dealt with cloning the repository, defining a sample
&lt;code&gt;index.html&lt;/code&gt; file for my website, and pushing that code back to the repository.  While I was
familiar with those concepts, any time I forget something I refer to the
&lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository"&gt;Git Basics documentation&lt;/a&gt;
on the Git website.  From there I can usually find the correct helper article on what I need
to accomplish within 2-3 clicks.&lt;/p&gt;
&lt;p&gt;The new concept that I had to deal with on the GitHub site is that unlike before, I was now
accessing a repository that was privately owned that I wanted to write to.  Unless you mark a
repository as private, everyone can see that repository and read from that repository.  My
website&amp;rsquo;s repository is public, so reading wasn&amp;rsquo;t a problem.&lt;/p&gt;
&lt;p&gt;Pushing the code back to the my repository would be a write, and was a problem.  Each project
has a list of who can write to it and the creator of the project is on that list by default.
But to write to the project, I had to have my local Git tool login to GitHub when needed and
authenticate.  I was going to have to dive into credentials.&lt;/p&gt;
&lt;h2 id="proofed-to-here"&gt;Proofed to here&lt;a class="headerlink" href="#proofed-to-here" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="github-authentication-ssh-vs-https"&gt;GitHub Authentication: SSH vs HTTPS&lt;a class="headerlink" href="#github-authentication-ssh-vs-https" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every time you log in to a website or to a program by using your user id and password, you
are establishing your credentials.  You tell the website or program &amp;lsquo;I am me, let me see
my stuff!&amp;rsquo;.  GitHub is no different that any of those sites.  If you want to be able to see
any of your private stuff or write to your stuff, it needs to make sure you are you.&lt;/p&gt;
&lt;p&gt;Going to the &lt;a href="https://help.github.com/en/articles/set-up-git#next-steps-authenticating-with-github-from-git"&gt;GitHub Authenticating Page&lt;/a&gt;,
there are two choices that allow us to connect to GitHub: HTTPS or SSH.  Both of these are
valid options, which allow for enhanced security when having Git connect to GitHub.  What it
breaks down to is the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SSH&lt;/th&gt;
&lt;th&gt;HTTPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;SSH - set up keys&lt;/li&gt;
&lt;li&gt;SSH - setup is more involved&lt;/li&gt;
&lt;li&gt;SSH - more secure&lt;/li&gt;
&lt;li&gt;Https - set up credential manager&lt;/li&gt;
&lt;li&gt;Https - less likely blocked by firewall&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking into this, I decided to go with SSH, as I wanted to opt for more security.  After
I performed some research at the GitHub site, I found this very good page on
&lt;a href="https://help.github.com/en/articles/using-ssh-over-the-https-port"&gt;SSH over the HTTPS port&lt;/a&gt;.
In it, they explain that there is a simple test to see if SSH will work from
your system to GitHub.  When you execute the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -T git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it will either return one of two responses.  If it returns with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Hi *username*! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then you can access GitHub via SSH without any issues.  If you see the other response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; ssh: connect to host github.com port 22: Connection timed out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then you have to setup SSH to connect to GitHub over the SSH port.  This can be checked with a
small modification to the above command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -T -p 443 git@ssh.github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command is now trying to establish a SSH session over port 443, and if you get the
&lt;code&gt;You've successfully&lt;/code&gt; response, it&amp;rsquo;s working fine.  Running these tests myself, I found
that I got a timeout on the first command and a success on the second command.  Following
the article, it recommends changes &lt;code&gt;~/.ssh/config&lt;/code&gt; to include the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  Hostname ssh.github.com
  Port 443
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My primary system is a Windows 10 machine, so instead of modifying &lt;code&gt;~/.ssh/config&lt;/code&gt;, I modified
the &lt;code&gt;%HOMEDRIVE%%HOMEPATH%\.ssh\config&lt;/code&gt;.  This time, when I executed the
&lt;code&gt;ssh -T git@github.com&lt;/code&gt; command, the response was successful.  Now I was ready to set up
the SSH keys.&lt;/p&gt;
&lt;h2 id="unique-ssh-keys"&gt;Unique SSH Keys&lt;a class="headerlink" href="#unique-ssh-keys" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Going back to the page &lt;a href="https://help.github.com/en/articles/set-up-git#next-steps-authenticating-with-github-from-git"&gt;GitHub Authenticating Page&lt;/a&gt;,
the next step is to generate a new SSH key and add it to our local SSH keyring.  The page
that it points to &lt;a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;on generating a new key&lt;/a&gt;
is pretty detailed, so I won&amp;rsquo;t try and improve over GitHub&amp;rsquo;s work.  If you already have a
key generated, it is assumed that you can reuse that key for GitHub.  I do want to talk about
that practice.&lt;/p&gt;
&lt;p&gt;Having a bit of a security background from my day job, I understand that you want to limit
exposure if something gets broken.  Just from a quick search, there are articles by
&lt;a href="https://askleo.com/why-is-it-so-important-to-use-a-different-password-on-every-site/"&gt;Leo Notenboom&lt;/a&gt;,
&lt;a href="https://blog.malwarebytes.com/101/2017/05/dont-need-27-different-passwords/"&gt;Malware Bytes Labs&lt;/a&gt;, and
&lt;a href="https://www.wikihow.com/Have-Many-Different-Passwords-for-Many-Different-Websites"&gt;WikiHow&lt;/a&gt;
that all describe how you should have different passwords for each account, and in many cases,
use a password manager.  And to be honest, that was just the first 3 that I clicked on.  There
were a lot more.  &lt;/p&gt;
&lt;p&gt;I can sum up and paraphrase the justification raised in each of those articles by posing a
single question: If someone breaks your password on one site, what is your exposure?  If you
have one password for all sites, then whoever breaks your password has access to that one
site.  If you have a different password for each site, the damage is limited to that one site.&lt;/p&gt;
&lt;p&gt;In my mind, using a public key for credentials is a similar concept to using a user-id and
password for credentials.  Therefore, it followed that if I follow good security practices for
passwords, I should also follow the same practices for key credentials.&lt;/p&gt;
&lt;h2 id="generating-a-new-key-for-github"&gt;Generating a New Key For GitHub&lt;a class="headerlink" href="#generating-a-new-key-for-github" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure I have secure access to GitHub, I followed the instructions
&lt;a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;for generating a new key&lt;/a&gt;.
To generate a distinct key for GitHub, I made one small modification to the instructions:
I saved the new key information with the filename &lt;code&gt;github-key&lt;/code&gt; instead of the default
&lt;code&gt;id_ras&lt;/code&gt;.  With that change in place, I followed the remaining instructions for setting up
ssh-agent and uploading the key information to GitHub, replacing any occurrence of &lt;code&gt;id_ras&lt;/code&gt;
with &lt;code&gt;github-key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With those steps accomplished, I had a specific key for GitHub and I had it registered locally.
I also had setup GitHub with the public portion of the credentials, as instructed.  The only
remaining step was ensure that any SSH connections to GitHub would use the GitHub credentials.
Doing a bit more research on the SSH configuration files, I quickly found that there was
built in support for this by adding the following to my &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  User git
  PreferredAuthentications publickey
  IdentityFile /c/Users/jackd/.ssh/github-key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Combined with the change from earlier in this article, my &lt;code&gt;~/.ssh/config&lt;/code&gt; file now looked like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  Hostname ssh.github.com
  Port 443
  User git
  PreferredAuthentications publickey
  IdentityFile /c/Users/jackd/.ssh/github-key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I performed a number of thorough tests, and everything passed without any issues!&lt;/p&gt;
&lt;h2 id="what-was-accomplished"&gt;What Was Accomplished&lt;a class="headerlink" href="#what-was-accomplished" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of any project, private or open-source, is setting up a version control system and secure
access to that system.&lt;/p&gt;
&lt;p&gt;This article details the actions and choices I made setting up my access to GitHub for my
blog.  It details how I followed the GitHub Pages&lt;sup id="fnref4:GitHubPages"&gt;&lt;a class="footnote-ref" href="#fn:GitHubPages"&gt;3&lt;/a&gt;&lt;/sup&gt; instructions for create a
personal website, creating a personal repository on GitHub to host the pages.  Then it
describes the two modes of accessing GitHub, SSH and HTTPS, and why I chose SSH.  Finally, it
provides detailed notes on how I generated a SSH keypair specifically for GitHub, and
configured both my local Git and the remote GitHub to use them.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:Git"&gt;
&lt;p&gt;Git is an open-source source control tool.  For more information, &lt;a href="https://git-scm.com/"&gt;look here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:Git" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:GitHub"&gt;
&lt;p&gt;GitHub is a common repository for open-source projects.  For more information, &lt;a href="https://help.github.com/en/articles/set-up-git"&gt;look here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:GitHub" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:GitHubPages"&gt;
&lt;p&gt;GitHub Pages are a feature of GitHub that allow people to host their personal websites on GitHub.  For more information, &lt;a href="https://pages.github.com/"&gt;look here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:GitHubPages" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:GitHubPages" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3:GitHubPages" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref4:GitHubPages" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="GitHub"></category></entry></feed>