var tipuesearch = {"pages":[{"title":"Glanceable Displays: Installing Raspbian on a Raspberry Pi","text":"Preface This is the second article in a series about Glanceable Displays and my efforts to create one for my household. For other articles in the series, click on the title of the article under the heading \"Glanceable Displays\" on the right side of the webpage. Introduction The methods detailed in this article provide for simple installation of the Raspbian operating system using the New Out Of Box Software (NOOBS) installation method, as suggested for beginners by the Raspberry Pi site . While there are more direct methods for experienced users, the NOOBs installation was selected for it's simplicity and ease of installation. Using the NOOBs installation, this article details the first steps I took in setting up one of my Raspberry Pi systems to be a glanceable display for my family. Those steps start with the formatting of a MicroSD card and installation of the NOOBs installer on to that MicroSD card. After installing that card into the Raspberry Pi, the steps continue with the installation of a stock Raspbian distribution, detailing the a couple of questions that need to be answered to complete the installation. Finally, to enable remote access, the last step is to ensure that I can access the Raspberry Pi using SSH for later configuration and control. Requirements Raspberry Pi, version 3.0 or later Power Supply for Raspberry Pi Keyboard and Mouse HDMI cable connected to monitor Cat5 Ethernet cable Note Please keep your own notes as you go, and refer back to them. While I have tested the steps on my own Raspberry Pi machines, they were by no means exhaustive tests. Step 1: Interfacing With a MicroSD Card The configuration and main drive for a Raspberry Pi is a MicroSD card. To get the card ready for use, your computer must be able to interface with the card. Most computers do not come with MicroSD slots, but there are a fair number with SD slots. To make things easier for MicroSD buyers, some of the more high end MicroSD makers include a MicroSD-to-SD adapter in their packaging, such as this 32GB MicroSD card from Amazon . I started out using this, but found that the adapter was only good for 3-4 uses, not for continual use. An alternative is a more multi-purpose adaptor, such as this multi-adapter from Amazon . As it is made from a more durable material, it will survive more uses. The one that I bought from Amazon at 7.00 USD is still working after about 70+ uses, so at 0.10 USD per use, it has already paid for itself. Also, as it has a USB adapter, I can plug it into a USB extension cable that I already have on my desk. Whichever way you decide to go, make sure to add the MicroSD card to the adapter before plugging the adaptor into you computer. Once it is securely in the adapter, make sure to apply it to the relevant slot on your computer firmly, and make sure the connection is there. On my Windows 10 machine, I can tell this happens as it will acknowledge the connection by opening up an Explorer window, with either a \"please format\" instruction or a list of any files in the directory. Step 2: Getting the MicroSD Card Ready Note Note that the steps that follow are for my Windows 10 machine. The NOOBs site , has sections for installing on Mac and Linux, but I did not test them. If they do not work,please Google/Bing linux microsd card format and linux microsd card mount . Feel free to replace the generic linux in the searches with the name of the Linux distribution that you are using. Step 2a: Reformatting a Used MicroSD Card Reusing old hardware is important, for many reasons such as the environment and cost. To make sure that is possible, it took me a number of tries to create a solid recipe for reformatting the MicroSD cards. As I mention in the Requirements section, keep good notes of what you do, or if following a recipe like this one, what changes you made to the recipe. While there is a command line only tool that will also do the job, I found it clunky and hard to use. Instead, the Disk Management applet for the control panel was the tool I settled on. This can be invoked by typing partition in the search window on the tool bar and selecting the create and format hard disk partitions item. Selecting that item brought up the Disk Management window, showing a break down of every drive connected to my computer. When the MicroSD card was properly connected to the computer, it showed up as Removable media after all of my permanent drives. Using the right mouse button, I clicked on each of the blocks on my MicroSD card and selected the Delete Volume menu item until all of the volumes were gone. When that was accomplished, I was left with two blocks, and right clicking on the rightmost block presented me with a Delete Partition menu item, which consolidated all of the partitions into a single unallocated block. From there, I was able to right click on the Unallocated partition to select the Create Volume menu item. This started a simple wizard that quickly walked me through the options for creating a new volume. I used all defaults that were presented with the exception of the file system and quick format settings. I changed the file system setting to FAT32 and unchecked the Use Quick Format checkbox, before clicking on finish and waiting for about 30 minutes before the format was complete. Step 2b: Formatting a New MicroSD Card From a Windows 10 point of view, this was easy. When the MicroSD card was properly connected to my computer, it prompted me to format the card, presenting me with the format dialog itself. When formatting the MicroSD card, it was important to select FAT32 as the type of format and to unselect Quick Format on the dialog. Once I clicked the format button, it took a good while before it was completed. As a rough estimate, I guessed that it was roughly 1 minute per gigabyte on the MicroSD card, regardless of computer speed. Step 3: Install Raspbian Lite Using NOOBS Note When the format is finished from the previous step, it is important to go to your taskbar and eject the media from your computer. I accomplished this by right clicking on the USB stick icon and selecting \"Eject Mass Storage Device\" from the menu. At that point, I cleanly removed the adaptor and the MicroSD card from the computer to ensure the ejection was complete. When I tested various scenarios, any time that I forgot to eject the media at this point, it did not take later on. The people behind the Raspberry PI made sure there is a simple to use installation system that simplifies the task of installing operating systems on to the Raspberry Pi. The New Out Of Box Software (NOOBS) site aims to allow a fairly basic installation of Raspberry Pi operating systems with little effort. Unless you are familiar with Linux systems, their installation can be very daunting, so it is best to keep the installation as simple as possible. To start that process, I downloaded the NOOBS zip file from their web site to my computer. After reinserting the MicroSD card and adapter to my computer, I then unzipped the contents of the NOOBS_V3_2_0.zip file to the root of the drive for the MicroSD card. I had to take care to ensure that the contents were in the root of the drive, not in a subdirectory of the drive. This happened enough times that I actually unzipped the files to a local directory and just used XCOPY to copy the files over, solving the placement problem for myself. As with the note at the start of this section, once this action was done, I once again ejected the USB device before disconnecting it from the computer, for the same reasons. Taking the MicroSD card, I found the MicroSD port on the Raspberry Pi. The port is flat with the motherboard of the Raspberry Pi, and the cases I have all have a hole in the case to make it easy to find. Inserting the card into the port, I then attached the other cables for monitor (HDMI), ethernet (Cat5), keyboard (USB), and mouse (USB), with the 5V adapter cable being last. Two minutes later, I was presented with a screen which prompted me to select the operating system to install. I tried a number of times to get the Raspbian Lite install to work, but encountered a number of issues, so I defaulted to the stock Raspbian [RECOMMENDED] install. Once I made this choice, I selected Raspbian [RECOMMENDED] from the top of the list in the NOOBs installation dialog, followed by pressing the Install button at the top. From there, it took about 30 minutes or so before I was prompted with a dialog box that said: OS(es) installed successfully When I pressed the OK button on that dialog, the system rebooted with first a rainbow screen, then a screen with a big raspberry on it, then lots of text scrolling by quickly. After a relatively small amount of action and a lot of waiting, it was now time to set up the operating system for simple uses! Step 4: Initial System Setup There was a lot of text that scrolled by so quickly, I was unable to read it. From what I could see, there were a lot of green OK texts on the left side, so I guessed that the installation had succeeded. After a nice round of blinking lights from the Raspberry Pi, the desktop showed up and proceeded to walk me through the setup configuration. The first dialog was pretty simple, with the title Welcome to Raspberry Pi . The important thing to note off of this dialog is at the bottom right of the dialog is the IP address that the system currently has assigned to it. As this was important, I wrote it down, and proceeded with the rest of the configuration. The configuration is a series of simple dialogs, each giving a clear indication of what is required. Whenever I pressed the Next button, it wrote the information to the system configuration files. As such, I expect delays between when I pressed the Next button and when the next dialog showed up. Turns out that was a rather healthy expectation. Some of the things that were setup were: country language time zone setting a new password take care of black border update software Having tested this workflow, I knew that the next workflow for my glanceable display would include updating existing packages and installing new packages. As such, I skipped the update software, knowing I would do it later. Both paths produce the same results, so feel free to skip it like I did, or update at a later point. Warning If you forget the password that you change it to, there is no easy way to recover what you changed the password to. Consider creating a fake entry in a password manager, like LastPass, and storing the password there for later use. Step 5: Setting Up SSH Access That being accomplished, the last thing to complete before stopping the installation of the bare bones system was to enable SSH access. By enabling SSH access, I could sit at my comfortable workspace, using my normal computer, chair, and desk instead of at the workbench where I had the Raspberry Pi connected. Frankly, the computer was connected in an almost Frankenstein like mess of wires on an old desk with a chair that was normally reserved for people visiting, not typing. My own workspace looked very inviting. To enable access, I entered the command sudo raspi-config , selecting 5. Interfacing Options , then selecting P2 SSH , and finally answering Yes to the question Would you like the SSH server to be enabled? . After this, the computer took about 30 seconds before being responsive again, with the text The SSH server is enabled. appearing on the screen. Pressing the enter key, and then selecting Finish , I was then back at the command prompt. This was the moment I was working towards: being able to have a bare bones system to use that I could access from my own computer. Entering sudo reboot , I waited about 45 seconds for the system to reboot and to be greeted with the raspberrypi login: prompt. Looking just above that text, I saw the text: [ OK ] Started OpenBSD Secure Shell server. This gave me a bit of confidence to move forward. At the very least, the operating system was indicating that it should allow SSH access. At the command line, I entered: ssh pi@192.168.2.3 and with the exception of the input yes to answer the question, the output was as follows: The authenticity of host '192.168.2.3 (192.168.2.3)' can't be established. ECDSA key fingerprint is SHA256:`some text here`. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '192.168.2.3' (ECDSA) to the list of known hosts. ... pi@raspberrypi:~ $ Note After each repeated installation on the same Raspberry Pi, when I went back to open a new SSH connection, it would report the error WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! . To allow access, I needed to edit the ~/.ssh/known_hosts file and remove the line for the IP address of the machine, as indicated at the end of the provided error message. What Was Accomplished This article detailed the steps taken to install the Raspbian operating system on a MicroSD card. It started by my formatting of the MicroSD card and copying the NOOBs installer onto the card, followed by inserting it into the Raspberry Pi's MicroSD slot. The steps continued with the largely automated installation of the operating system, only requiring the answers to six questions on my part. Finally, it concluded with the setup for SSH to allow me to configure the Raspberry Pi remotely. What's Next? In the next article in this series, Glanceable Displays: Fine Tuning A Raspberry Pi Installation, I walk through the steps I took to move the installation from a bare bones system, to one that had Wi-Fi and time support set up properly.","tags":"Technology","url":"https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/","loc":"https://jackdewinter.github.io/2019/07/21/glanceable-displays-installing-raspbian-on-a-raspberry-pi/"},{"title":"Glanceable Displays: What Are They?","text":"Preface This is the first article in a series about Glanceable Displays and my efforts to create one for my household. For other articles in the series, click on the title of the article under the heading \"Glanceable Displays\" on the right side of the webpage. Introduction In this article, I will introduce the concept of glanceable displays and describe how they can be used in an everyday office or home. I will then discuss how the audience for the display is important, including a side bar about my opinion on Spousal Acceptance Factor. Understanding the limitations of your audience is also covered, leading up to developing a set of definitions on what should be displayed. Finally, I will talk about how my family followed those steps to arrive at the requirements for our glanceable display, which has buy in from every member of our household. What Are Glanceable Displays? According to Dictionary.com : 1 noting or relating to information on an electronic screen that can be understood quickly or at a glance: glanceable data; a glanceable scoreboard. 2 enabling information on a screen to be quickly understood: a glanceable design; glanceable interfaces. In essence, a glanceable display is a display that provides information that can be quickly understood by people reading the display. An important qualification of these displays is that the information they display needs to have a broad degree of applicability without any ability for a specific reader to customize the data to their needs. As the display must provide information with no personal customization, it is important to think about various things up front. Who Is the Display For? The audience of the display will drive many of the other choices for the glanceable display. Be honest about who the real audience is for your glanceable display, and what benefits that audience will gain from the display. Negotiate with the audience members and make sure that there is something on the display for each member. If possible, engage with those members to help with the display so their work becomes part of the display, fostering interest from the beginning. The key is for your project to make the jump from \"my toy project\" to \"our useful project\", solving real world issues with real world requirements. If you are not honest about your audience and communicated with them sincerely, you will invariably end up missing your goals for the display. Without these, your base requirements will not be correct, and your final product will not be correct. If you only want the display for your personal office, it is perfectly acceptable for you to say that you are the sole audience and geek out on the display. That is, it is acceptable if you are honest about that audience. In that case, just be realistic and don't expect people you didn't include in your original audience to appreciate your display. After all, you made it just for you! Spousal Acceptance Factor As an aside, I have often heard of concerns from people about something they made having a low SAF or Spousal Acceptance Factor. I honestly think that is silly. If there is a low SAF, it probably means that someone did something where their spouse was either not consulted on not considered in terms of requirements. It is human to want to share your excitement with family around you but remember that your excitement is not their excitement. Unless you sincerely include them in the audience, the chance of acceptance will remain low. How Are You Going To Display It? In terms of deciding how to display the glanceable information, we really have only one decision to make: are we going to ask the viewer to visit an online site with a device or are we going to provide access to a device at a given location? If you decide on the visit paradigm, you don't have any hardware concerns as the reader is supplying the hardware. With the viewer using their own device to view the display, another decision must be made regarding whether to standardize on a single device type or to support multiple device types. If you decide to support multiple device types, you will probably need to use an intermediate step where you start with support for only the most used device type. Once that device type has been completed, you can then slowly adapt your display to the next device type your viewers are using. You will also need to ensure that you have a clear definition on where your display can be accessed from. If you have a web site for your office that you display on phones or tablets, can it be viewed from anywhere, or just within the office's WiFi area? If you decide on the specific location paradigm, you limit your device type to one, but you take on additional hardware concerns. You get to focus on a single device type, but in exchange, you need to provide for the setup and control of that device. Consider the case where the power goes off and then comes back. How will your hardware solution handle that or will someone need to reboot it? Another important consideration is the cost of the hardware and any needed peripherals. Will you reuse existing hardware that you already have, or will you require expenditures? The output from your evaluation of this section should be a choice of a single approach and a list of reasons why the selected approach was chosen. If possible, provide as many details as possible as it will help you in other sections going forward. Also, from your audience's point of view, it will help them understand the decisions that you have asked them to buy in to. What Do You Need To Consider Up Front? As the display is a glanceable display, this means that everyone should be able to view the display with few issues, if any. Common issues to think about are: Near and Far Sightedness A large segment of every population either wears glasses or contacts at some point in their life. Especially as people get older, their eyesight gets weaker and they rely on glasses more frequently. Depending on the differing eyesight of your audience, you may want to consider using larger fonts to enable them to see the screen more clearly. In addition, you may want to consider a high contract mode that includes fewer, but bolder colors to improve visibility. Color Blindness Color blindness, as shown in this article on Wikipedia , is an inability to see differences in either all colors or certain types of colors. Keep in mind that if you audience is not a family environment, the person with color blindness may not disclose that they are color blind up front. If one of your audience is color blind, using colors on your display to indicate certain things is a bad idea. Use shapes or text instead of colors to denote differences in the data being displayed. Dyslexia and Other Reading Disorders Dyslexia, as shown in this article on Wikipedia , is actually a family of similar disorders involving the brain and how numbers and letters are processed when reading. Other reading disorders, such as those mentioned in this Wikipedia article , are often grouped by people as dyslexia, when they are only related. As with dyslexia, keep in mind that if you audience is not a family environment, the person with dyslexia may not disclose that they are color blind up front. Advances in research on reading issues have produced advances such as the Dyslexie font which is specially made for people with dyslexia. Engage with your audience to determine if any such issues apply, what their effects are, and talk with them and research with them on ways to adapt the display to make it easier for them to comprehend. Young Readers Young readers, due to their age, are either still learning how to read or are building their vocabulary as the grow. To assist any young readers that are going to use your display, consider replacing some of the objects that you want to display with pictures that indicate the object's meaning. For ‘older' young readers, keep in mind that their vocabulary is different than yours, and change you designs for the display accordingly. What Are You Going To Display? Once you have all the other sections taken care of, the decision of what to put on the display is almost anti-climactic. After going through the process of identifying your audience, the type of display to use, and any considerations for your audience, you have probably defined at least one or two things to display along the way. At the very least, armed with the information above, you can engage with your audience in a brainstorming session that will allow you to get buy-in from them. Two important things to remember at this stage: soliciting help and iterative development. Don't be afraid to ask your audience to help you in the design for the display. That can take any form you want, from design the information for the display with them there to asking them to create the displays and presenting them to the entire audience. Remember, for the glanceable display to be successful, you will need buy-in from your audience. Having them help with the work will do that. Iterative development means that you and your audience are going to try and make something that works, but you do not expect it to be perfect on the first try. You and your audience may be confident think something works when you look at it initially, but over time that confidence may change. Don't be afraid to iterate on the design, keeping the things that work and changing the things that don't work. Our Discussion About Our Glanceable Display Understanding that any decision would affect my entire family, I asked if we could talk about it after dinner one night. In discussing the possibility of a display, we all agreed that there were common things that it would be nice to see. These things came down to 3 categories: calendar related, weather related, and other. As we all have busy lives, the calendar was a slam dunk. Our whiteboard calendar didn't get updated when it should, which left us looking at our online calendars on our phones. But even with our online calendars, it was a pain to remember to invite other family members to any events we had, regardless of whether or not they were part of the event. Having a single place to display that information keyed to a given individual would clear things up and simplify things a lot. Information on the weather was another category, mostly due to the Seattle weather. While my son wears the same type of clothes every day, my wife and I vary our clothing by the type of weather and activities we have planned. Having that advance knowledge of weather would cut down on having to actively seek that information from a number of online sources. After those two big categories, there were also some other little things brought up. Not having a good place to put them, the \"others\" category was formed. The discussion then moved to decide which class of glanceable display to use, and our family made a simple decision to go with a monitor driven by a web page hosted on a Raspberry Pi. We all agreed that we wanted something that would replace a seldom updated whiteboard calendar in our kitchen. It needed to be big enough to show several weeks' worth of calendar at a time, to allow us to plan that far out. We also wanted to make sure we kept each other honest, so we explicitly wanted it not tied to any of our personal computers and tied to a location that we know we all frequent: the kitchen. The choice of the Raspberry Pi satisfied these concerns pretty easily. From a hardware point of view, I had a spare one at home from a project I had wanted to do, but never started. From an operating system point of view, I have enough knowledge of Linux systems that I was confident that I would be able to handle the configuration. Finally, I was prepared to take the challenge on of setting up the system and working with my family to define the elements of the display with their input at ever step. The Decisions for Our Glanceable Display So, from those discussions, I arrived at the following. Audience The audience was our family. Display The display itself would be a simple Raspberry Pi with a monitor that was left from a project that I had (almost) worked on. The display would be located in the kitchen in a location that would be visible to family members, but not visible outside of the house. Considerations In our family, we don't have any members that have vision issues other than needing glasses. As such, the primary concern is that we can all ready the text on the display from 2 meters or 6 feet away. What To Display? The primary two goals for the display were to display our calendars and the weather for the next 5 days. Any enhancements of those two goals were fine, as long as the primary goals were not ignored. Some of the other ideas that were floated may seem funny, but they nicely fit into our other category: chore lists from Trello quote of the day number of days until Christmas number of people on the International Space Station current exchange rates Wrapping It Up The rest of the articles in this series will detail my family and I worked on our glanceable display. Based on the information from above, we have had good success with our display. Most of the fixes to the display were tweaks to the information being displayed, rather than the Raspberry Pi itself. I emphatically stand by the previous sections about and making sure you understand and engage your audience. I credit my family, the audience for our glanceable display, with having an honest conversation on what would help, and getting the buy in from them from the beginning. What Was Accomplished? This article presented a set of things to consider when creating a glanceable display, followed by notes on how my family followed that pattern to arrive at our requirements for our glanceable display. Those considerations started with defining your audience, proceeded to understanding your audience, and finally arriving at a set of things that you and your audience want to display. I cannot promise that if you follow these considerations that your journey will be as successful as ours. However, I believe I can say with some certainty that it will help you along the way with your own journey. To succeed, you need information to help guide you, and each of the considerations above will help you inch closer to that success. What's Next? In the next article in this series, Glanceable Displays: Installing Raspbian on a Raspberry Pi , I walk through the steps I took to set up a Raspberry Pi as our glanceable display of choice. It documents the journey from installation on to a blank MicroSD card to a bare bones installation that enabled remote SSH access.","tags":"Technology","url":"https://jackdewinter.github.io/2019/07/14/glanceable-displays-what-are-they/","loc":"https://jackdewinter.github.io/2019/07/14/glanceable-displays-what-are-they/"},{"title":"Starting With GitHub: Setting Up Credentials For My Personal Website","text":"Introduction In setting up this website, I needed to make sure I had Git 1 and more specifically GitHub 2 setup to use the GitHub Pages 3 feature. My source control tool of choice was already Git, so it made sense to make my website platform of choice GitHub Pages 3 . I made this choice to ensure that I can write articles with little or no changes to my normal workflow. Part of any project I do, private or open-source, is setting up a version control system and securing access to that version control system. It is always a high priority for me to make sure that any Git access is secure and follows best common practices on security. This article details the actions and choices I made in setting up my access to GitHub for my blog. It details how I followed the GitHub Pages instructions for creating a personal website and creating a personal repository on GitHub to achieve that. Then it describes the two modes of accessing GitHub, SSH and HTTPS, and why I chose SSH. Finally, it provides detailed notes on how I generated a SSH keypair specifically for GitHub, and configured both my local Git and the remote GitHub to use them. Getting Started With GitHub There are many good articles out there on how to install Git for different operating systems, so I'll assume any readers following along can do the research needed to install Git for their system. Setting up access to GitHub is even easier as the folks at GitHub have provided excellent instructions. Simply go to the GitHub Home Page and it will either allow you to login if you have an account, or create a new account if you don't. As I had already dealt with a couple of open source projects, I already have an account jackdewinter , so I logged in without any issues. After I logged in, the browser deposited me on my home page. From there I was able to see any projects that I had either contributed to or filed an issue against. Just starting in my Open Source journey, the contents were only a couple of projects that I had filed issues with. Prior to this point, I had no need to authenticate my Git client with GitHub as I was just downloading from public repositories. I figured out quickly that setting up my own website would require my own repositories, so I determined that authentication would also be required. Creating My First GitHub Repository The GitHub Pages home page has a really simple formula on their webpage for setting up personal webpages. Step 1 was pretty easy: I made sure that that the name of the repository was my GitHub user id (in my case jackdewinter ) followed by .github.io . When the creation of my repository finished, GitHub deposited my browser at the base of my new repository: jackdewinter/jackdewinter.github.io . The remaining steps in the formula dealt with cloning the repository, defining a sample index.html file for my website, and pushing that code back to the repository. While I was familiar with those concepts, I wasn't afraid to check back with the Git Basics documentation on the Git website when I forgot something. From there I can usually find the correct helper article on what I need to accomplish within 2-3 clicks. The new concept that I had to deal with on the GitHub site is that unlike before, I was now accessing a repository that was privately owned that I wanted to write to. Unless you mark a repository as private, everyone can see that repository and read from that repository. My website's repository is public, so reading wasn't a problem. Pushing the code back to my repository would be writing, and was a problem. Each project has a list of who can write to it and the creator of the project is on that list by default. But to write to the project, I had to have my local Git tool login to GitHub when needed and authenticate. I was going to have to dive into credentials. GitHub Authentication: SSH vs HTTPS Every time you log in to a website or to a program by using your user id and password, you establish your credentials. You tell the website or program \"I can prove I am me, let me see my stuff!\". The GitHub website is no different that any of those sites. If you want to be able to see any of your private stuff or write to your stuff, it needs to verify who you are. Going to the GitHub Authenticating Page , there are two choices that allow us to connect to GitHub: HTTPS and SSH. Both of these are valid options, allowing for enhanced security when having Git connect to GitHub. However, each of these options has different things going for and against it. After doing some research, it seemed to me to break down to the following: SSH HTTPS set up keys set up credential manager setup is more involved easy setup more secure less likely blocked by firewall Looking at this information, I decided to go with SSH as I wanted to opt for more security. SSH Access to GitHub During my research at the GitHub site, I had found this very good page on SSH over the HTTPS port . In it, they explain that there is a simple test to see if SSH will work from your system to GitHub. When you execute the following command: ssh -T git@github.com it will either return one of two responses. If it returns with: > Hi *username*! You've successfully authenticated, but GitHub does not provide shell access. then you can access GitHub via SSH without any issues. If you see the other response: > ssh: connect to host github.com port 22: Connection timed out then you have to setup SSH to connect to GitHub over the HTTPS port. This access can be verified with a small modification to the above command: ssh -T -p 443 git@ssh.github.com The command is now trying to establish a SSH session over port 443, and if you get the You've successfully response, it's working fine. Running these tests myself, I found that I got a timeout on the first command and a success on the second command. Following the article, it recommends changes ~/.ssh/config [&#94;SSH_CONFIG] to include the following: Note My primary system is a Windows 10 machine, so instead of modifying the ~/.ssh/config file, I modified the %HOMEDRIVE%%HOMEPATH%\\.ssh\\config file. On my system, that file is the c:\\Users\\jackd\\.ssh\\config file. Host github.com Hostname ssh.github.com Port 443 The next time, when I executed the ssh -T git@github.com command, the response was the You've successfully response. Now I was ready to set up the SSH keys. Unique SSH Keys Going back to the GitHub Authenticating Page , the next step was to generate a new SSH key pair and add it to my local SSH keyring. The page that points to generating a new key is pretty detailed, so I won't try and improve over GitHub's work. On my reading of the page, it seems to assume that if you will only have 1 key pair 4 generated and that you will reuse that key pair for GitHub. I have issues with that practice, so I want to talk about it. Having a bit of a security background from my day job, I want to limit exposure if something gets broken. Just from a quick search, there are articles by Leo Notenboom , Malware Bytes Labs , and WikiHow that all describe how you should have different passwords for each account, and in many cases, use a password manager. And to be honest, that was just the first 3 that I clicked on. There were a lot more. I can sum up and paraphrase the justification raised in each of those articles by posing a single question: If someone breaks your password on one site, what is your exposure? If you have one password for all sites, then whoever breaks your password has access to that one site. If you have a different password for each site, the damage is limited to one site, instead of all sites using that password. In my mind, using a key pair for credentials is a similar concept to using a user-id and password for credentials. Therefore, it followed that if I follow good security practices for passwords, I should also follow the same practices for key pairs as credentials. Generating a New Key For GitHub To ensure I have secure access to GitHub, I followed the instructions for generating a new key . To generate a distinct key pair for GitHub, I made one small modification to the instructions: I saved the new key pair information with the filename github-key instead of the default id_ras . This resulted in the files ~/.ssh/github-key and ~/.ssh/github-key.pub being created as the key pair. With those files created, I followed the remaining instructions for setting up ssh-agent and uploading the key information to GitHub, replacing any occurrence of id_ras with github-key . With that accomplished, I had a specific key pair for GitHub and I had it registered locally. I also had setup GitHub with the public portion of the credentials using the contents of ~/.ssh/github-key.pub , as instructed. The only remaining step was ensure that any SSH connections to GitHub would use the GitHub credentials. Doing a bit more research on the SSH configuration files, I quickly found that there was built in support for this by adding the following to my ~/.ssh/config file: Host github.com User git PreferredAuthentications publickey IdentityFile /c/Users/jackd/.ssh/github-key Note The location of ~/ on my Windows machine is %HOMEDRIVE%%HOMEPATH%\\ or c:\\Users\\jackd\\ . The format for the IdentityFile property is a standard Unix path format. This requires a translation from the Windows path format C:\\Users\\jackd\\.ssh\\github-key to the Unix path format of /c/Users/jackd/.ssh/github-key . Combined with the change from earlier in this article, my ~/.ssh/config file now looked like: Host github.com Hostname ssh.github.com Port 443 User git PreferredAuthentications publickey IdentityFile /c/Users/jackd/.ssh/github-key I performed a number of thorough tests, and everything passed without any issues! What Was Accomplished This article started with my creation of a GitHub repository to contain the files for my personal website using GitHub Pages. To securely access the repository, I chose the SSH protocol and discovered that I needed to employ SSH over HTTP. For enhanced security, I described a solid reason for wanting a unique SSH key for GitHub. Following that advice, I generated a new key and then changed the ~/.ssh/config file to use SSH over HTTPS and to point to that newly generated keypair. Git is an open-source source control tool. For more information, look here . ↩ GitHub is a common repository for open-source projects. For more information, look here . ↩ GitHub Pages are a feature of GitHub that allow people to host their personal websites on GitHub. For more information, look here . ↩ ↩ When a SSH key is generated, it comes in two parts. The private part is kept on the user's system while the public part can be distributed to any interested parties. Together they are referred to as a key pair. ↩","tags":"Technology","url":"https://jackdewinter.github.io/2019/07/07/starting-with-github-setting-up-credentials-for-my-personal-website/","loc":"https://jackdewinter.github.io/2019/07/07/starting-with-github-setting-up-credentials-for-my-personal-website/"},{"title":"Extended Markdown Examples","text":"This is a continuation of the previous cheat sheet for my website. This article specifically addresses any extensions that are not part of the base Markdown specification. Each section here represents an extension that I have enabled on my website. The formatting from the previous page is continued, with one small exception. The title of each section specifies the name of the extension instead of the name of the feature being documented (see Admonitions ). If an extension contains more than one feature, such as the Extra extension, the title specifies the name of the extension, a dash, and the name of the feature (see Footnotes ). Introduction The authors of the Python Markdown Package anticipated the addition of extra features. To ensure people would have choice, the base package can be extended using configuration . The Markdown extensions have been activated on my website by inserting the following text into my peliconconf.py: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 MARKDOWN = { 'extension_configs' : { 'markdown.extensions.extra' : {}, 'markdown.extensions.admonition' : {}, 'markdown.extensions.codehilite' : { 'css_class' : 'highlight' }, 'markdown.extensions.meta' : {}, 'smarty' : { 'smart_angled_quotes' : 'true' }, 'markdown.extensions.toc' : { 'permalink' : 'true' }, } } Table Of Contents [TOC] Introduction Table Of Contents CodeHilite - Code Blocks With Line Numbers Extra - Footnotes Extra - Abbreviations Extra - Definition Lists Smartypants Admonitions CodeHilite - Code Blocks With Line Numbers ``` #!python # Code goes here ... ``` 1 # Code goes here ... Extra - Footnotes Here's a simple footnote,[&#94;1] and here's a longer one.[&#94;bignote] [&#94;1]: This is the first footnote. [&#94;bignote]: Here's one with multiple paragraphs and code. Here's a simple footnote, 1 and here's a longer one. 2 Extra - Abbreviations The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C . Extra - Definition Lists Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus. Smartypants advantage is that code blocks are unaffected - apostrophe ' by itself - apostrophe as in 'quote me' - quotations mark \" by itself - quotations mark as in \"quote me\" - replacement of multi-character sequences with Unicode: << ... -- >> --- apostrophe ‘ by itself apostrophe as in ‘quote me' quotations mark \" by itself quotations mark as in \"quote me\" replacement of multi-character sequences with Unicode: « … – » — Admonitions broken down into section by the way that the Elegant theme colors the admonitions !!! note You should note that the title will be automatically capitalized. Note You should note that the title will be automatically capitalized. !!! important \"Replacement Title\" You should note that the default title will be replaced. Replacement Title You should note that the default title will be replaced. !!! hint You should note that the title will be automatically capitalized. Hint You should note that the title will be automatically capitalized. !!! tip \"Replacement Title\" You should note that the default title will be replaced. Replacement Title You should note that the default title will be replaced. !!! warning You should note that the title will be automatically capitalized. Warning You should note that the title will be automatically capitalized. !!! caution \"Replacement Title\" You should note that the default title will be replaced. Replacement Title You should note that the default title will be replaced. !!! attention \"\" You should note that this will have no title due to the empty title. You should note that this will have no title due to the empty title. !!! danger You should note that the title will be automatically capitalized. Danger You should note that the title will be automatically capitalized. !!! error \"Replacement Title\" You should note that the default title will be replaced. Replacement Title You should note that the default title will be replaced. This is the first footnote. ↩ Here's one with multiple paragraphs and code. ↩","tags":"Markdown","url":"https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/","loc":"https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/"},{"title":"Standard Markdown Examples","text":"As I started writing my articles for my blog, I realized I needed something. To help me write articles using this flavor of Markdown 1 , I needed my own cheat sheet. My hope is that it provides clear guidance on which aspects of the various forms of Markdown worked for me, and which didn't. Introduction Horizontal Break Headings Text Emphasis Numbered lists Bulleted List Block quote Code Block Tables Links Local Links Remote Links Download Links ) Images Introduction I am writing articles and pages on Pelican 4.0.1 2 using the Elegant 3 theme, therefore I want to make sure I have a cheat sheet that is specific to this dialect of Markdown. The base Markdown used for Pelican uses the Python Markdown Package which (with 3 exceptions) follows John Gruber's Markdown definition very literally. Pelican configuration also supports providing Markdown with additional configuration that enables other features. Those features are documented separately in the next page . The format of this cheat sheet is simple. Each section is separated from the next with a horizontal break and the name of the section. Any notes regarding that section are placed at the top of the section in point form, to ensure they are brief. Then a Code Block section is used to show the literal code used to produce the effects that are presented right after the code block. Horizontal Break A horizontal break occurs after 3 or more hyphens. --- A horizontal break occurs after 3 or more hyphens. Headings # Heading Level 1 ## Heading Level 2 ### Heading Level 3 Heading Level 1 Heading Level 2 Heading Level 3 Text Emphasis two spaces at the end of a line will be equivalent to <br/> This text is **bold** and this text is also __bold__. This text is *italic* and this text is also _italic_. This text is **_italic and bold_**, but no two spaces at end. Single ```line``` block. Inline `code` has ```back-ticks like this ` around``` it. This text is bold and this text is also bold . This text is italic and this text is also italic . This text is italic and bold , but no two spaces at end. Single line block. Inline code has back-ticks like this ` around it. Numbered lists to maintain the indentation, place 4 spaces at the start of the line 1. One New para. Blah 2. Two - unordered - list 3. Three 1. ordered 2. list - unordered - list 3. items One New para. Blah Two unordered list Three ordered list unordered list items Bulleted List to maintain the indentation, place 4 spaces at the start of the line - This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. - Another item in the same list. - Bulleted item - Bulleted item This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Another item in the same list. Bulleted item Bulleted item Block quote > This is the first paragraph of a blockquote with two paragraphs. > Lorem ipsum dolor sit amet, > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > > This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level. This is the first paragraph of a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. This is the first level of quoting. This is nested blockquote. Back to the first level. Code Block line numbers can be added via extensions ```text Make things only as complex as they need to be. ``` ```Python # Blogroll LINKS = ( ('Pelican', 'Pelican', 'http://getpelican.com/'), ) ``` Make things only as complex as they need to be. # Blogroll LINKS = ( ( 'Pelican' , 'Pelican' , 'http://getpelican.com/' ), ) Tables colons can be used to align columns. | Column1 | Column 2 | Column 3 |---|---|---| | Value 1 | Value 2 | Value 3 | | Value 4 | Value 5 | Value 6 | | Value 7 | Value 8 | Value 9 | | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | Column1 Column 2 Column 3 Value 1 Value 2 Value 3 Value 4 Value 5 Value 6 Value 7 Value 8 Value 9 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 Links Local Links {filename} tag indicates location in the content folder. [About Page]({filename}/pages/about.md) About Page Remote Links proper URL indicates a remote website [Python Package Index](https://pypi.org) Python Package Index Download Links download links are not natively supported in Markdown must explicitly create HTML text inline to achieve that Creating a link to a file to download, not display, is not natively supported in markdown. [Pelican Brag Document (display)]({filename}/images/markdown-1/pelican.txt) <a href=\"{filename}/images/pelican.txt\" download>Pelican Brag Document (download)</a> Pelican Brag Document (display) Pelican Brag Document (download) Images {filename} tag indicates location in the content folder. ![python logo]({filename}/images/markdown-1/python_icon.png) Markdown allows for HTML pages to be written using a simple text editor with no knowledge of HTML. ↩ Pelican is a Static Site Generator written in Python. ↩ The Elegant theme's repository is here . ↩","tags":"Markdown","url":"https://jackdewinter.github.io/2019/06/29/standard-markdown-examples/","loc":"https://jackdewinter.github.io/2019/06/29/standard-markdown-examples/"},{"title":"My Long Article","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer malesuada sed tortor et pulvinar. Donec a vehicula ligula. Quisque porta erat vitae lectus lacinia varius. Integer sed lacus in libero volutpat lobortis ac vitae velit. Praesent rutrum turpis sem, id mattis sem pulvinar id. Morbi leo felis, facilisis in ex a, viverra placerat justo. Donec ac risus non sapien feugiat malesuada. Para 1 Donec quam neque, vulputate quis purus at, tempus tincidunt neque. Sed posuere eros eu massa lobortis varius. Ut condimentum elit eros. Sed vel nunc vitae nibh aliquet vestibulum vitae quis justo. Sed vel ligula turpis. Aliquam et mi mollis, suscipit sapien vel, molestie enim. Morbi sodales, dui nec congue tristique, risus mi luctus nulla, vel egestas sem nulla quis augue. Nulla vitae efficitur odio, quis egestas ex. Pellentesque a est viverra, fringilla dui ac, laoreet purus. Suspendisse porta aliquet nunc et pulvinar. Integer ante felis, tincidunt eu ipsum a, imperdiet convallis augue. Cras vulputate sapien sit amet metus placerat, sed congue turpis tempus. Nunc pretium ac dolor eget tincidunt. Para 2 Nunc id tortor lectus. Quisque fermentum sem ut elit ultricies sollicitudin. Curabitur blandit, elit at suscipit mattis, purus lectus eleifend felis, id rutrum neque sapien vitae arcu. Aenean elementum lacus tristique purus facilisis placerat. Nunc pharetra lorem ut finibus blandit. Aenean scelerisque elit nec malesuada accumsan. Proin eu orci eget odio scelerisque viverra a ac nulla. Vestibulum elementum lobortis quam. Morbi porta rutrum mi, quis laoreet nunc dictum at. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Ut in lobortis massa. Para 2a Phasellus et leo in nunc fermentum vulputate. Nullam sed interdum augue. Duis eu dignissim eros. Mauris pretium turpis non purus porta, non consequat enim rutrum. Fusce dui odio, consequat in rhoncus sed, interdum vulputate quam. Nullam nec dolor ex. Curabitur dapibus vestibulum odio at sodales. Para 2b Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum. Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum. Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum. Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum. Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum. Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum. Etiam dignissim lorem at turpis suscipit pharetra. Ut velit velit, pellentesque sit amet ex sed, efficitur laoreet enim. Etiam pharetra neque quam, in elementum massa molestie vel. Duis nec venenatis nisi. Etiam condimentum, leo vel ultrices placerat, dolor nibh pretium tortor, vel egestas odio nulla ut lectus. Etiam ultrices nulla quis felis tincidunt, quis sollicitudin elit lacinia. Suspendisse porttitor nulla rhoncus est blandit, eu faucibus lacus vestibulum.","tags":"Python, Fred","url":"https://jackdewinter.github.io/2010/12/03/my-super-long-post/","loc":"https://jackdewinter.github.io/2010/12/03/my-super-long-post/"},{"title":"My Short Article","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer malesuada sed tortor et pulvinar. Donec a vehicula ligula. Quisque porta erat vitae lectus lacinia varius. Integer sed lacus in libero volutpat lobortis ac vitae velit. Praesent rutrum turpis sem, id mattis sem pulvinar id. Morbi leo felis, facilisis in ex a, viverra placerat justo. Donec ac risus non sapien feugiat malesuada.","tags":"Python, Fred","url":"https://jackdewinter.github.io/2010/12/03/my-super-short-post/","loc":"https://jackdewinter.github.io/2010/12/03/my-super-short-post/"}]};